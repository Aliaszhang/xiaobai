
h743_spi_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  0800d120  0800d120  0001d120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7fc  0800d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d800  0800d800  0001d800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0800d804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006284  240001e4  0800d9e8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006468  0800d9e8  00026468  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013ecd  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002542  00000000  00000000  000340df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d80  00000000  00000000  00036628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ca8  00000000  00000000  000373a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000372e8  00000000  00000000  00038050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000132f0  00000000  00000000  0006f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015c87c  00000000  00000000  00082628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001deea4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c58  00000000  00000000  001deef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e4 	.word	0x240001e4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d108 	.word	0x0800d108

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e8 	.word	0x240001e8
 80002dc:	0800d108 	.word	0x0800d108

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9ac 	b.w	8000a78 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	4604      	mov	r4, r0
 80007b0:	468e      	mov	lr, r1
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d14d      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4694      	mov	ip, r2
 80007ba:	d969      	bls.n	8000890 <__udivmoddi4+0xe8>
 80007bc:	fab2 f282 	clz	r2, r2
 80007c0:	b152      	cbz	r2, 80007d8 <__udivmoddi4+0x30>
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	f1c2 0120 	rsb	r1, r2, #32
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d2:	ea41 0e03 	orr.w	lr, r1, r3
 80007d6:	4094      	lsls	r4, r2
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	0c21      	lsrs	r1, r4, #16
 80007de:	fbbe f6f8 	udiv	r6, lr, r8
 80007e2:	fa1f f78c 	uxth.w	r7, ip
 80007e6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ee:	fb06 f107 	mul.w	r1, r6, r7
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80007fe:	f080 811f 	bcs.w	8000a40 <__udivmoddi4+0x298>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 811c 	bls.w	8000a40 <__udivmoddi4+0x298>
 8000808:	3e02      	subs	r6, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f0f8 	udiv	r0, r3, r8
 8000814:	fb08 3310 	mls	r3, r8, r0, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb00 f707 	mul.w	r7, r0, r7
 8000820:	42a7      	cmp	r7, r4
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x92>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f100 33ff 	add.w	r3, r0, #4294967295
 800082c:	f080 810a 	bcs.w	8000a44 <__udivmoddi4+0x29c>
 8000830:	42a7      	cmp	r7, r4
 8000832:	f240 8107 	bls.w	8000a44 <__udivmoddi4+0x29c>
 8000836:	4464      	add	r4, ip
 8000838:	3802      	subs	r0, #2
 800083a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800083e:	1be4      	subs	r4, r4, r7
 8000840:	2600      	movs	r6, #0
 8000842:	b11d      	cbz	r5, 800084c <__udivmoddi4+0xa4>
 8000844:	40d4      	lsrs	r4, r2
 8000846:	2300      	movs	r3, #0
 8000848:	e9c5 4300 	strd	r4, r3, [r5]
 800084c:	4631      	mov	r1, r6
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d909      	bls.n	800086a <__udivmoddi4+0xc2>
 8000856:	2d00      	cmp	r5, #0
 8000858:	f000 80ef 	beq.w	8000a3a <__udivmoddi4+0x292>
 800085c:	2600      	movs	r6, #0
 800085e:	e9c5 0100 	strd	r0, r1, [r5]
 8000862:	4630      	mov	r0, r6
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	fab3 f683 	clz	r6, r3
 800086e:	2e00      	cmp	r6, #0
 8000870:	d14a      	bne.n	8000908 <__udivmoddi4+0x160>
 8000872:	428b      	cmp	r3, r1
 8000874:	d302      	bcc.n	800087c <__udivmoddi4+0xd4>
 8000876:	4282      	cmp	r2, r0
 8000878:	f200 80f9 	bhi.w	8000a6e <__udivmoddi4+0x2c6>
 800087c:	1a84      	subs	r4, r0, r2
 800087e:	eb61 0303 	sbc.w	r3, r1, r3
 8000882:	2001      	movs	r0, #1
 8000884:	469e      	mov	lr, r3
 8000886:	2d00      	cmp	r5, #0
 8000888:	d0e0      	beq.n	800084c <__udivmoddi4+0xa4>
 800088a:	e9c5 4e00 	strd	r4, lr, [r5]
 800088e:	e7dd      	b.n	800084c <__udivmoddi4+0xa4>
 8000890:	b902      	cbnz	r2, 8000894 <__udivmoddi4+0xec>
 8000892:	deff      	udf	#255	; 0xff
 8000894:	fab2 f282 	clz	r2, r2
 8000898:	2a00      	cmp	r2, #0
 800089a:	f040 8092 	bne.w	80009c2 <__udivmoddi4+0x21a>
 800089e:	eba1 010c 	sub.w	r1, r1, ip
 80008a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a6:	fa1f fe8c 	uxth.w	lr, ip
 80008aa:	2601      	movs	r6, #1
 80008ac:	0c20      	lsrs	r0, r4, #16
 80008ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80008b2:	fb07 1113 	mls	r1, r7, r3, r1
 80008b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ba:	fb0e f003 	mul.w	r0, lr, r3
 80008be:	4288      	cmp	r0, r1
 80008c0:	d908      	bls.n	80008d4 <__udivmoddi4+0x12c>
 80008c2:	eb1c 0101 	adds.w	r1, ip, r1
 80008c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x12a>
 80008cc:	4288      	cmp	r0, r1
 80008ce:	f200 80cb 	bhi.w	8000a68 <__udivmoddi4+0x2c0>
 80008d2:	4643      	mov	r3, r8
 80008d4:	1a09      	subs	r1, r1, r0
 80008d6:	b2a4      	uxth	r4, r4
 80008d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008dc:	fb07 1110 	mls	r1, r7, r0, r1
 80008e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008e4:	fb0e fe00 	mul.w	lr, lr, r0
 80008e8:	45a6      	cmp	lr, r4
 80008ea:	d908      	bls.n	80008fe <__udivmoddi4+0x156>
 80008ec:	eb1c 0404 	adds.w	r4, ip, r4
 80008f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f4:	d202      	bcs.n	80008fc <__udivmoddi4+0x154>
 80008f6:	45a6      	cmp	lr, r4
 80008f8:	f200 80bb 	bhi.w	8000a72 <__udivmoddi4+0x2ca>
 80008fc:	4608      	mov	r0, r1
 80008fe:	eba4 040e 	sub.w	r4, r4, lr
 8000902:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000906:	e79c      	b.n	8000842 <__udivmoddi4+0x9a>
 8000908:	f1c6 0720 	rsb	r7, r6, #32
 800090c:	40b3      	lsls	r3, r6
 800090e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000912:	ea4c 0c03 	orr.w	ip, ip, r3
 8000916:	fa20 f407 	lsr.w	r4, r0, r7
 800091a:	fa01 f306 	lsl.w	r3, r1, r6
 800091e:	431c      	orrs	r4, r3
 8000920:	40f9      	lsrs	r1, r7
 8000922:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000926:	fa00 f306 	lsl.w	r3, r0, r6
 800092a:	fbb1 f8f9 	udiv	r8, r1, r9
 800092e:	0c20      	lsrs	r0, r4, #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fb09 1118 	mls	r1, r9, r8, r1
 8000938:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093c:	fb08 f00e 	mul.w	r0, r8, lr
 8000940:	4288      	cmp	r0, r1
 8000942:	fa02 f206 	lsl.w	r2, r2, r6
 8000946:	d90b      	bls.n	8000960 <__udivmoddi4+0x1b8>
 8000948:	eb1c 0101 	adds.w	r1, ip, r1
 800094c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000950:	f080 8088 	bcs.w	8000a64 <__udivmoddi4+0x2bc>
 8000954:	4288      	cmp	r0, r1
 8000956:	f240 8085 	bls.w	8000a64 <__udivmoddi4+0x2bc>
 800095a:	f1a8 0802 	sub.w	r8, r8, #2
 800095e:	4461      	add	r1, ip
 8000960:	1a09      	subs	r1, r1, r0
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb1 f0f9 	udiv	r0, r1, r9
 8000968:	fb09 1110 	mls	r1, r9, r0, r1
 800096c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000970:	fb00 fe0e 	mul.w	lr, r0, lr
 8000974:	458e      	cmp	lr, r1
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x1e2>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000980:	d26c      	bcs.n	8000a5c <__udivmoddi4+0x2b4>
 8000982:	458e      	cmp	lr, r1
 8000984:	d96a      	bls.n	8000a5c <__udivmoddi4+0x2b4>
 8000986:	3802      	subs	r0, #2
 8000988:	4461      	add	r1, ip
 800098a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800098e:	fba0 9402 	umull	r9, r4, r0, r2
 8000992:	eba1 010e 	sub.w	r1, r1, lr
 8000996:	42a1      	cmp	r1, r4
 8000998:	46c8      	mov	r8, r9
 800099a:	46a6      	mov	lr, r4
 800099c:	d356      	bcc.n	8000a4c <__udivmoddi4+0x2a4>
 800099e:	d053      	beq.n	8000a48 <__udivmoddi4+0x2a0>
 80009a0:	b15d      	cbz	r5, 80009ba <__udivmoddi4+0x212>
 80009a2:	ebb3 0208 	subs.w	r2, r3, r8
 80009a6:	eb61 010e 	sbc.w	r1, r1, lr
 80009aa:	fa01 f707 	lsl.w	r7, r1, r7
 80009ae:	fa22 f306 	lsr.w	r3, r2, r6
 80009b2:	40f1      	lsrs	r1, r6
 80009b4:	431f      	orrs	r7, r3
 80009b6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ba:	2600      	movs	r6, #0
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	f1c2 0320 	rsb	r3, r2, #32
 80009c6:	40d8      	lsrs	r0, r3
 80009c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009cc:	fa21 f303 	lsr.w	r3, r1, r3
 80009d0:	4091      	lsls	r1, r2
 80009d2:	4301      	orrs	r1, r0
 80009d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009d8:	fa1f fe8c 	uxth.w	lr, ip
 80009dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009e0:	fb07 3610 	mls	r6, r7, r0, r3
 80009e4:	0c0b      	lsrs	r3, r1, #16
 80009e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ea:	fb00 f60e 	mul.w	r6, r0, lr
 80009ee:	429e      	cmp	r6, r3
 80009f0:	fa04 f402 	lsl.w	r4, r4, r2
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x260>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80009fe:	d22f      	bcs.n	8000a60 <__udivmoddi4+0x2b8>
 8000a00:	429e      	cmp	r6, r3
 8000a02:	d92d      	bls.n	8000a60 <__udivmoddi4+0x2b8>
 8000a04:	3802      	subs	r0, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a10:	fb07 3316 	mls	r3, r7, r6, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb06 f30e 	mul.w	r3, r6, lr
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x28a>
 8000a20:	eb1c 0101 	adds.w	r1, ip, r1
 8000a24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a28:	d216      	bcs.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	d914      	bls.n	8000a58 <__udivmoddi4+0x2b0>
 8000a2e:	3e02      	subs	r6, #2
 8000a30:	4461      	add	r1, ip
 8000a32:	1ac9      	subs	r1, r1, r3
 8000a34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a38:	e738      	b.n	80008ac <__udivmoddi4+0x104>
 8000a3a:	462e      	mov	r6, r5
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	e705      	b.n	800084c <__udivmoddi4+0xa4>
 8000a40:	4606      	mov	r6, r0
 8000a42:	e6e3      	b.n	800080c <__udivmoddi4+0x64>
 8000a44:	4618      	mov	r0, r3
 8000a46:	e6f8      	b.n	800083a <__udivmoddi4+0x92>
 8000a48:	454b      	cmp	r3, r9
 8000a4a:	d2a9      	bcs.n	80009a0 <__udivmoddi4+0x1f8>
 8000a4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a54:	3801      	subs	r0, #1
 8000a56:	e7a3      	b.n	80009a0 <__udivmoddi4+0x1f8>
 8000a58:	4646      	mov	r6, r8
 8000a5a:	e7ea      	b.n	8000a32 <__udivmoddi4+0x28a>
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e794      	b.n	800098a <__udivmoddi4+0x1e2>
 8000a60:	4640      	mov	r0, r8
 8000a62:	e7d1      	b.n	8000a08 <__udivmoddi4+0x260>
 8000a64:	46d0      	mov	r8, sl
 8000a66:	e77b      	b.n	8000960 <__udivmoddi4+0x1b8>
 8000a68:	3b02      	subs	r3, #2
 8000a6a:	4461      	add	r1, ip
 8000a6c:	e732      	b.n	80008d4 <__udivmoddi4+0x12c>
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e709      	b.n	8000886 <__udivmoddi4+0xde>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	e742      	b.n	80008fe <__udivmoddi4+0x156>

08000a78 <__aeabi_idiv0>:
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 f87f 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f8bb 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fa13 	bl	8000eb4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a8e:	f000 f935 	bl	8000cfc <MX_SPI2_Init>
  MX_DMA_Init();
 8000a92:	f000 f9d7 	bl	8000e44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a96:	f000 f987 	bl	8000da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PRINT_BIN("start app\r\n");
 8000a9a:	484e      	ldr	r0, [pc, #312]	; (8000bd4 <main+0x158>)
 8000a9c:	f000 fc24 	bl	80012e8 <my_basename>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	2396      	movs	r3, #150	; 0x96
 8000aa4:	494c      	ldr	r1, [pc, #304]	; (8000bd8 <main+0x15c>)
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 fc32 	bl	8001310 <log_binary>
  log_print();
 8000aac:	f000 fca6 	bl	80013fc <log_print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (xl355_fifo_full_flag > 0)
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <main+0x160>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f340 808a 	ble.w	8000bce <main+0x152>
	  {
		  PRINT_BIN("xl355_fifo_full_flag:%d\r\n", xl355_fifo_full_flag);
 8000aba:	4846      	ldr	r0, [pc, #280]	; (8000bd4 <main+0x158>)
 8000abc:	f000 fc14 	bl	80012e8 <my_basename>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <main+0x160>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	23a3      	movs	r3, #163	; 0xa3
 8000aca:	4945      	ldr	r1, [pc, #276]	; (8000be0 <main+0x164>)
 8000acc:	2001      	movs	r0, #1
 8000ace:	f000 fc1f 	bl	8001310 <log_binary>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad8:	4842      	ldr	r0, [pc, #264]	; (8000be4 <main+0x168>)
 8000ada:	f003 fab9 	bl	8004050 <HAL_GPIO_WritePin>
		  ret = HAL_SPI_Receive(&hspi2, spi_recv_buffer, recv_len, 1000);
 8000ade:	f241 12a7 	movw	r2, #4519	; 0x11a7
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	4940      	ldr	r1, [pc, #256]	; (8000be8 <main+0x16c>)
 8000ae8:	4840      	ldr	r0, [pc, #256]	; (8000bec <main+0x170>)
 8000aea:	f005 ff57 	bl	800699c <HAL_SPI_Receive>
 8000aee:	4603      	mov	r3, r0
 8000af0:	75fb      	strb	r3, [r7, #23]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af8:	483a      	ldr	r0, [pc, #232]	; (8000be4 <main+0x168>)
 8000afa:	f003 faa9 	bl	8004050 <HAL_GPIO_WritePin>
		  if (ret != HAL_OK)
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00b      	beq.n	8000b1c <main+0xa0>
		  {
			  PRINT_BIN("SPI SEND FAIL:%d\r\n", ret);
 8000b04:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <main+0x158>)
 8000b06:	f000 fbef 	bl	80012e8 <my_basename>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	23a9      	movs	r3, #169	; 0xa9
 8000b12:	4937      	ldr	r1, [pc, #220]	; (8000bf0 <main+0x174>)
 8000b14:	2001      	movs	r0, #1
 8000b16:	f000 fbfb 	bl	8001310 <log_binary>
 8000b1a:	e055      	b.n	8000bc8 <main+0x14c>
		  }
		  else
		  {
			  data_len = unpackage_xl355_raw_data(spi_recv_buffer, sensor_data, recv_len);
 8000b1c:	f241 13a7 	movw	r3, #4519	; 0x11a7
 8000b20:	461a      	mov	r2, r3
 8000b22:	4934      	ldr	r1, [pc, #208]	; (8000bf4 <main+0x178>)
 8000b24:	4830      	ldr	r0, [pc, #192]	; (8000be8 <main+0x16c>)
 8000b26:	f000 fad9 	bl	80010dc <unpackage_xl355_raw_data>
 8000b2a:	6138      	str	r0, [r7, #16]
			  if (data_len < 0)
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da09      	bge.n	8000b46 <main+0xca>
			  {
				  PRINT_BIN("sensor data len error\r\n");
 8000b32:	4828      	ldr	r0, [pc, #160]	; (8000bd4 <main+0x158>)
 8000b34:	f000 fbd8 	bl	80012e8 <my_basename>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	23b0      	movs	r3, #176	; 0xb0
 8000b3c:	492e      	ldr	r1, [pc, #184]	; (8000bf8 <main+0x17c>)
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fbe6 	bl	8001310 <log_binary>
 8000b44:	e040      	b.n	8000bc8 <main+0x14c>
			  }
			  else
			  {
				  i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
				  //for (i = 0; i < data_len; i+=9)
				  {
					  if ((sensor_data[i+2] & 0x01) == 0x01)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <main+0x178>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d036      	beq.n	8000bc8 <main+0x14c>
					  {
						  x = adxl355_conversion_acc_data(&sensor_data[i]);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <main+0x178>)
 8000b5e:	4413      	add	r3, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fa25 	bl	8000fb0 <adxl355_conversion_acc_data>
 8000b66:	ed87 0a02 	vstr	s0, [r7, #8]
						  y = adxl355_conversion_acc_data(&sensor_data[i+3]);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <main+0x178>)
 8000b70:	4413      	add	r3, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fa1c 	bl	8000fb0 <adxl355_conversion_acc_data>
 8000b78:	ed87 0a01 	vstr	s0, [r7, #4]
						  z = adxl355_conversion_acc_data(&sensor_data[i+6]);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3306      	adds	r3, #6
 8000b80:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <main+0x178>)
 8000b82:	4413      	add	r3, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fa13 	bl	8000fb0 <adxl355_conversion_acc_data>
 8000b8a:	ed87 0a00 	vstr	s0, [r7]
						  PRINT_BIN("[%04d]accx:%0.2f\t accy:%0.2f\t accz:%0.2f\r\n", i, x, y, z);
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <main+0x158>)
 8000b90:	f000 fbaa 	bl	80012e8 <my_basename>
 8000b94:	4602      	mov	r2, r0
 8000b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ba2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ba6:	edd7 5a00 	vldr	s11, [r7]
 8000baa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000bae:	ed8d 5b06 	vstr	d5, [sp, #24]
 8000bb2:	ed8d 6b04 	vstr	d6, [sp, #16]
 8000bb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	23bc      	movs	r3, #188	; 0xbc
 8000bc0:	490e      	ldr	r1, [pc, #56]	; (8000bfc <main+0x180>)
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 fba4 	bl	8001310 <log_binary>
					  }
				  }
			  }
		  }
		  xl355_fifo_full_flag = 0;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <main+0x160>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
	  }
	  log_print();
 8000bce:	f000 fc15 	bl	80013fc <log_print>
	  if (xl355_fifo_full_flag > 0)
 8000bd2:	e76d      	b.n	8000ab0 <main+0x34>
 8000bd4:	0800d120 	.word	0x0800d120
 8000bd8:	0800d134 	.word	0x0800d134
 8000bdc:	240029b0 	.word	0x240029b0
 8000be0:	0800d154 	.word	0x0800d154
 8000be4:	58020400 	.word	0x58020400
 8000be8:	240004f8 	.word	0x240004f8
 8000bec:	24000200 	.word	0x24000200
 8000bf0:	0800d180 	.word	0x0800d180
 8000bf4:	24001754 	.word	0x24001754
 8000bf8:	0800d1a8 	.word	0x0800d1a8
 8000bfc:	0800d1d4 	.word	0x0800d1d4

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09c      	sub	sp, #112	; 0x70
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	224c      	movs	r2, #76	; 0x4c
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f007 febe 	bl	8008990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2220      	movs	r2, #32
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f007 feb8 	bl	8008990 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f003 fa49 	bl	80040b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <SystemClock_Config+0xf4>)
 8000c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2e:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <SystemClock_Config+0xf4>)
 8000c30:	f023 0301 	bic.w	r3, r3, #1
 8000c34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <SystemClock_Config+0xf4>)
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <SystemClock_Config+0xf8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c48:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <SystemClock_Config+0xf8>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <SystemClock_Config+0xf8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c5c:	bf00      	nop
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <SystemClock_Config+0xf8>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c6a:	d1f8      	bne.n	8000c5e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000c82:	230c      	movs	r3, #12
 8000c84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 5;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c92:	230c      	movs	r3, #12
 8000c94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c96:	2302      	movs	r3, #2
 8000c98:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fa42 	bl	800412c <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000cae:	f000 fbd5 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	233f      	movs	r3, #63	; 0x3f
 8000cb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fe55 	bl	8004988 <HAL_RCC_ClockConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ce4:	f000 fbba 	bl	800145c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000ce8:	f004 f804 	bl	8004cf4 <HAL_RCC_EnableCSS>
}
 8000cec:	bf00      	nop
 8000cee:	3770      	adds	r7, #112	; 0x70
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	58000400 	.word	0x58000400
 8000cf8:	58024800 	.word	0x58024800

08000cfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d02:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <MX_SPI2_Init+0xa8>)
 8000d04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d16:	2207      	movs	r2, #7
 8000d18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_SPI2_Init+0xa4>)
 8000d8e:	f005 fcff 	bl	8006790 <HAL_SPI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000d98:	f000 fb60 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24000200 	.word	0x24000200
 8000da4:	40003800 	.word	0x40003800

08000da8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_USART1_UART_Init+0x94>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <MX_USART1_UART_Init+0x98>)
 8000db6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dcc:	220c      	movs	r2, #12
 8000dce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000df0:	f006 fc8f 	bl	8007712 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000dfa:	f000 fb2f 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000e02:	f007 fcc3 	bl	800878c <HAL_UARTEx_SetTxFifoThreshold>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8000e0c:	f000 fb26 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000e14:	f007 fcf8 	bl	8008808 <HAL_UARTEx_SetRxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000e1e:	f000 fb1d 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x90>)
 8000e24:	f007 fc79 	bl	800871a <HAL_UARTEx_DisableFifoMode>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000e2e:	f000 fb15 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000378 	.word	0x24000378
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	001e8480 	.word	0x001e8480

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f001 f802 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e72:	200b      	movs	r0, #11
 8000e74:	f001 f819 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f000 fffa 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e82:	200c      	movs	r0, #12
 8000e84:	f001 f811 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f000 fff2 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e92:	200d      	movs	r0, #13
 8000e94:	f001 f809 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	200e      	movs	r0, #14
 8000e9e:	f000 ffea 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ea2:	200e      	movs	r0, #14
 8000ea4:	f001 f801 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	4a33      	ldr	r2, [pc, #204]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_GPIO_Init+0xec>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <MX_GPIO_Init+0xf0>)
 8000f4a:	f003 f881 	bl	8004050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <MX_GPIO_Init+0xf0>)
 8000f68:	f002 fec2 	bl	8003cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <MX_GPIO_Init+0xf4>)
 8000f82:	f002 feb5 	bl	8003cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f000 ff73 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f90:	2017      	movs	r0, #23
 8000f92:	f000 ff8a 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58020400 	.word	0x58020400
 8000fa8:	58020800 	.word	0x58020800
 8000fac:	00000000 	.word	0x00000000

08000fb0 <adxl355_conversion_acc_data>:

/* USER CODE BEGIN 4 */
float adxl355_conversion_acc_data(uint8_t *data)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  	uint32_t acc_raw;      // register data
    int32_t acc_actual;    //
    float acc_float;       //

    acc_raw = (((data[0] << 16) | (data[1] << 8) | data[2]) >> 4);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	041a      	lsls	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	3202      	adds	r2, #2
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	111b      	asrs	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]

    if(acc_raw >= 0x80000)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000fda:	d306      	bcc.n	8000fea <adxl355_conversion_acc_data+0x3a>
    {
        acc_actual = -((~acc_raw & 0x3FFFF) + 1);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e001      	b.n	8000fee <adxl355_conversion_acc_data+0x3e>
    }
    else
    {
        acc_actual = acc_raw;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	617b      	str	r3, [r7, #20]
    }

    acc_float = acc_actual * 0.0039; // 2g: scale factor 3.9 ug/LSB
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ff8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001020 <adxl355_conversion_acc_data+0x70>
 8000ffc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001000:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001004:	edc7 7a03 	vstr	s15, [r7, #12]
    // acc_float = acc_actual * 0.0039; // 4g: scale factor 7.8 ug/LSB
    // acc_float = acc_actual * 0.0039; // 8g: scale factor 15.6 ug/LSB

    return acc_float;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	ee07 3a90 	vmov	s15, r3
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	f3af 8000 	nop.w
 8001020:	8e8a71de 	.word	0x8e8a71de
 8001024:	3f6ff2e4 	.word	0x3f6ff2e4

08001028 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6)
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	2b40      	cmp	r3, #64	; 0x40
 8001036:	d104      	bne.n	8001042 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		xl355_fifo_full_flag++;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_GPIO_EXTI_Callback+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_GPIO_EXTI_Callback+0x28>)
 8001040:	6013      	str	r3, [r2, #0]
	}
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	240029b0 	.word	0x240029b0

08001054 <adler32>:

#define BASE 65521
uint32_t adler32(uint8_t *buf, uint32_t len)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]

   uint32_t adler = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
   uint32_t s1    = (adler >> 0) & 0xFFFF;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	b29b      	uxth	r3, r3
 8001066:	617b      	str	r3, [r7, #20]
   uint32_t s2    = (adler >> 16) & 0xFFFF;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	613b      	str	r3, [r7, #16]
   uint32_t i;

   for (i = 0; i < len; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e022      	b.n	80010ba <adler32+0x66>
   {
      s1 = (s1 + buf[i]) % BASE;
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	18d1      	adds	r1, r2, r3
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <adler32+0x84>)
 8001084:	fba3 2301 	umull	r2, r3, r3, r1
 8001088:	0bda      	lsrs	r2, r3, #15
 800108a:	4613      	mov	r3, r2
 800108c:	031b      	lsls	r3, r3, #12
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	4413      	add	r3, r2
 8001094:	1acb      	subs	r3, r1, r3
 8001096:	617b      	str	r3, [r7, #20]
      s2 = (s2 + s1) % BASE;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	18d1      	adds	r1, r2, r3
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <adler32+0x84>)
 80010a0:	fba3 2301 	umull	r2, r3, r3, r1
 80010a4:	0bda      	lsrs	r2, r3, #15
 80010a6:	4613      	mov	r3, r2
 80010a8:	031b      	lsls	r3, r3, #12
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	1acb      	subs	r3, r1, r3
 80010b2:	613b      	str	r3, [r7, #16]
   for (i = 0; i < len; i++)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3d8      	bcc.n	8001074 <adler32+0x20>
//      printf("s2:%#x, s1:%#x\n", s2, s1);
   }

   return (s2 << 16) + s1;
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	041a      	lsls	r2, r3, #16
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4413      	add	r3, r2
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	80078071 	.word	0x80078071

080010dc <unpackage_xl355_raw_data>:

int unpackage_xl355_raw_data(uint8_t *in_buf, uint8_t *out_buff, uint16_t in_len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	; 0x38
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
    int pack_content_len = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    int raw_data_len = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t cmd = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t adler32_check_sum = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
    uint32_t adler32_code = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    uint32_t microseconds;
    uint32_t seconds;

    if (in_buf[0] != 0xEF || in_buf[1] != 0xEF)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2bef      	cmp	r3, #239	; 0xef
 8001106:	d104      	bne.n	8001112 <unpackage_xl355_raw_data+0x36>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2bef      	cmp	r3, #239	; 0xef
 8001110:	d014      	beq.n	800113c <unpackage_xl355_raw_data+0x60>
    {
    	PRINT_BIN("header not right %#x %#x\r\n", in_buf[0], in_buf[1]);
 8001112:	486d      	ldr	r0, [pc, #436]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 8001114:	f000 f8e8 	bl	80012e8 <my_basename>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	9100      	str	r1, [sp, #0]
 800112a:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 800112e:	4967      	ldr	r1, [pc, #412]	; (80012cc <unpackage_xl355_raw_data+0x1f0>)
 8001130:	2001      	movs	r0, #1
 8001132:	f000 f8ed 	bl	8001310 <log_binary>
    	return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e0c1      	b.n	80012c0 <unpackage_xl355_raw_data+0x1e4>
    }

    pack_content_len = ((in_buf[2] << 24) | (in_buf[3] << 16) | (in_buf[4] << 8) | in_buf[5]);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3302      	adds	r3, #2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3303      	adds	r3, #3
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	431a      	orrs	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3304      	adds	r3, #4
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	4313      	orrs	r3, r2
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	3205      	adds	r2, #5
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pack_content_len <= 9 || in_len < pack_content_len)
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	2b09      	cmp	r3, #9
 8001166:	dd03      	ble.n	8001170 <unpackage_xl355_raw_data+0x94>
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800116c:	429a      	cmp	r2, r3
 800116e:	dd10      	ble.n	8001192 <unpackage_xl355_raw_data+0xb6>
    {
    	PRINT_BIN("content len not right %#x : %#x\r\n", pack_content_len, in_len);
 8001170:	4855      	ldr	r0, [pc, #340]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 8001172:	f000 f8b9 	bl	80012e8 <my_basename>
 8001176:	4602      	mov	r2, r0
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	f240 13eb 	movw	r3, #491	; 0x1eb
 8001184:	4952      	ldr	r1, [pc, #328]	; (80012d0 <unpackage_xl355_raw_data+0x1f4>)
 8001186:	2001      	movs	r0, #1
 8001188:	f000 f8c2 	bl	8001310 <log_binary>
    	return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	e096      	b.n	80012c0 <unpackage_xl355_raw_data+0x1e4>
    }
    raw_data_len = pack_content_len - 9;
 8001192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001194:	3b09      	subs	r3, #9
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
    PRINT_BIN("raw data len %d\r\n", raw_data_len);
 8001198:	484b      	ldr	r0, [pc, #300]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 800119a:	f000 f8a5 	bl	80012e8 <my_basename>
 800119e:	4602      	mov	r2, r0
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f240 13ef 	movw	r3, #495	; 0x1ef
 80011a8:	494a      	ldr	r1, [pc, #296]	; (80012d4 <unpackage_xl355_raw_data+0x1f8>)
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 f8b0 	bl	8001310 <log_binary>

    adler32_code = ((in_buf[in_len - 4] << 24) | (in_buf[in_len - 3] << 16) | (in_buf[in_len - 2] << 8) | in_buf[in_len - 1]);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	3b04      	subs	r3, #4
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	061a      	lsls	r2, r3, #24
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	3b03      	subs	r3, #3
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	440b      	add	r3, r1
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	041b      	lsls	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	3b02      	subs	r3, #2
 80011ce:	68f9      	ldr	r1, [r7, #12]
 80011d0:	440b      	add	r3, r1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	88fa      	ldrh	r2, [r7, #6]
 80011da:	3a01      	subs	r2, #1
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	440a      	add	r2, r1
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61fb      	str	r3, [r7, #28]
    adler32_check_sum = adler32(in_buf, in_len - 4);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	3b04      	subs	r3, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff ff31 	bl	8001054 <adler32>
 80011f2:	6238      	str	r0, [r7, #32]

    if (adler32_code != adler32_check_sum)
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d010      	beq.n	800121e <unpackage_xl355_raw_data+0x142>
    {
    	PRINT_BIN("adler32 code not equal %#x:%#x\r\n", adler32_code, adler32_check_sum);
 80011fc:	4832      	ldr	r0, [pc, #200]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 80011fe:	f000 f873 	bl	80012e8 <my_basename>
 8001202:	4602      	mov	r2, r0
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8001210:	4931      	ldr	r1, [pc, #196]	; (80012d8 <unpackage_xl355_raw_data+0x1fc>)
 8001212:	2001      	movs	r0, #1
 8001214:	f000 f87c 	bl	8001310 <log_binary>
    	return -1;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	e050      	b.n	80012c0 <unpackage_xl355_raw_data+0x1e4>
    }

    cmd = in_buf[6];
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	799b      	ldrb	r3, [r3, #6]
 8001222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    PRINT_BIN("cmd: %#x\r\n", cmd);
 8001226:	4828      	ldr	r0, [pc, #160]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 8001228:	f000 f85e 	bl	80012e8 <my_basename>
 800122c:	4602      	mov	r2, r0
 800122e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	f240 13fb 	movw	r3, #507	; 0x1fb
 8001238:	4928      	ldr	r1, [pc, #160]	; (80012dc <unpackage_xl355_raw_data+0x200>)
 800123a:	2001      	movs	r0, #1
 800123c:	f000 f868 	bl	8001310 <log_binary>

    seconds      = ((in_buf[7] << 24)  | (in_buf[8] << 16)  | (in_buf[9] << 8)  | in_buf[10]);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3307      	adds	r3, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	061a      	lsls	r2, r3, #24
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3309      	adds	r3, #9
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	4313      	orrs	r3, r2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	320a      	adds	r2, #10
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
    microseconds = ((in_buf[11] << 24) | (in_buf[12] << 16) | (in_buf[13] << 8) | in_buf[14]);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	330b      	adds	r3, #11
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	061a      	lsls	r2, r3, #24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	330c      	adds	r3, #12
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	431a      	orrs	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	330d      	adds	r3, #13
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4313      	orrs	r3, r2
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	320e      	adds	r2, #14
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
    PRINT_BIN("time:%u.%u\r\n", seconds, microseconds/1000);
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <unpackage_xl355_raw_data+0x1ec>)
 800128e:	f000 f82b 	bl	80012e8 <my_basename>
 8001292:	4602      	mov	r2, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	4912      	ldr	r1, [pc, #72]	; (80012e0 <unpackage_xl355_raw_data+0x204>)
 8001298:	fba1 1303 	umull	r1, r3, r1, r3
 800129c:	099b      	lsrs	r3, r3, #6
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <unpackage_xl355_raw_data+0x208>)
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 f830 	bl	8001310 <log_binary>


    memcpy(out_buff, &in_buf[15], raw_data_len);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	330f      	adds	r3, #15
 80012b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b6:	4619      	mov	r1, r3
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f007 fb5b 	bl	8008974 <memcpy>

    return raw_data_len;
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3730      	adds	r7, #48	; 0x30
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	0800d120 	.word	0x0800d120
 80012cc:	0800d214 	.word	0x0800d214
 80012d0:	0800d244 	.word	0x0800d244
 80012d4:	0800d278 	.word	0x0800d278
 80012d8:	0800d29c 	.word	0x0800d29c
 80012dc:	0800d2d0 	.word	0x0800d2d0
 80012e0:	10624dd3 	.word	0x10624dd3
 80012e4:	0800d2f0 	.word	0x0800d2f0

080012e8 <my_basename>:
char log_msg_buf[MAX_LOG_BUFF_SIZE];
char log_msg_send[MAX_LOG_BUFF_SIZE];
uint16_t log_msg_len = 0;  //needn`t mutex

char *my_basename(char *s)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
    char *p_ret;
    p_ret = strrchr(s, '/');
 80012f0:	212f      	movs	r1, #47	; 0x2f
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f008 f9c2 	bl	800967c <strrchr>
 80012f8:	60f8      	str	r0, [r7, #12]
    if (p_ret)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <my_basename+0x1e>
    {
        return (p_ret + 1);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	e000      	b.n	8001308 <my_basename+0x20>
    }
    return s;
 8001306:	687b      	ldr	r3, [r7, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <log_binary>:

    return -1;
}*/

int log_binary(log_level_e level, const char *fmt, ...)
{
 8001310:	b40e      	push	{r1, r2, r3}
 8001312:	b580      	push	{r7, lr}
 8001314:	b0c5      	sub	sp, #276	; 0x114
 8001316:	af00      	add	r7, sp, #0
 8001318:	4602      	mov	r2, r0
 800131a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800131e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001322:	701a      	strb	r2, [r3, #0]
    va_list ap;
    char msg_buf[MAX_ONE_LOG_SIZE] = {0};
 8001324:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	3304      	adds	r3, #4
 8001332:	22f6      	movs	r2, #246	; 0xf6
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f007 fb2a 	bl	8008990 <memset>
    int len = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    if (level < LOG_LEVEL_DEBUG)
 8001342:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001346:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <log_binary+0x44>
    {
        return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e047      	b.n	80013e4 <log_binary+0xd4>
    }

    if (log_msg_len+100 >= MAX_LOG_BUFF_SIZE)
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <log_binary+0xe4>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	f641 42e7 	movw	r2, #7399	; 0x1ce7
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <log_binary+0x54>
    {
      return 1;
 8001360:	2301      	movs	r3, #1
 8001362:	e03f      	b.n	80013e4 <log_binary+0xd4>
    }

    va_start(ap, fmt);
 8001364:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001368:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    len = vsnprintf((char *)msg_buf, MAX_ONE_LOG_SIZE, fmt, ap);
 800136c:	f107 000c 	add.w	r0, r7, #12
 8001370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001374:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001378:	21fa      	movs	r1, #250	; 0xfa
 800137a:	f009 f819 	bl	800a3b0 <vsniprintf>
 800137e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    va_end(ap);

    if (len > 0)
 8001382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001386:	2b00      	cmp	r3, #0
 8001388:	dd2a      	ble.n	80013e0 <log_binary+0xd0>
    {
      if ((log_msg_len + len) < MAX_LOG_BUFF_SIZE)
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <log_binary+0xe4>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001394:	4413      	add	r3, r2
 8001396:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800139a:	4293      	cmp	r3, r2
 800139c:	dc16      	bgt.n	80013cc <log_binary+0xbc>
      {
        memcpy(&log_msg_buf[log_msg_len], msg_buf, len);
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <log_binary+0xe4>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <log_binary+0xe8>)
 80013a6:	4413      	add	r3, r2
 80013a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80013ac:	f107 010c 	add.w	r1, r7, #12
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 fadf 	bl	8008974 <memcpy>
        log_msg_len += len;
 80013b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <log_binary+0xe4>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <log_binary+0xe4>)
 80013c6:	801a      	strh	r2, [r3, #0]
        return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e00b      	b.n	80013e4 <log_binary+0xd4>
      }
      else
      {
        log_msg_buf[log_msg_len] = 0;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <log_binary+0xe4>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <log_binary+0xe8>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
        log_msg_len = MAX_LOG_BUFF_SIZE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <log_binary+0xe4>)
 80013da:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80013de:	801a      	strh	r2, [r3, #0]
      }
    }

    return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80013ea:	46bd      	mov	sp, r7
 80013ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013f0:	b003      	add	sp, #12
 80013f2:	4770      	bx	lr
 80013f4:	2400644c 	.word	0x2400644c
 80013f8:	240029b4 	.word	0x240029b4

080013fc <log_print>:


int log_print(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    if (log_msg_len > 0)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <log_print+0x50>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01d      	beq.n	8001444 <log_print+0x48>
    {
        memcpy(log_msg_send, log_msg_buf, MAX_LOG_BUFF_SIZE);
 8001408:	4a11      	ldr	r2, [pc, #68]	; (8001450 <log_print+0x54>)
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <log_print+0x58>)
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8001414:	461a      	mov	r2, r3
 8001416:	f007 faad 	bl	8008974 <memcpy>
        HAL_UART_Transmit(&huart1, (uint8_t *)log_msg_send, strlen(log_msg_send), 100);
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <log_print+0x54>)
 800141c:	f7fe ff60 	bl	80002e0 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <log_print+0x54>)
 8001428:	480b      	ldr	r0, [pc, #44]	; (8001458 <log_print+0x5c>)
 800142a:	f006 f9c2 	bl	80077b2 <HAL_UART_Transmit>
        memset(log_msg_buf, 0x0, MAX_LOG_BUFF_SIZE);
 800142e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001432:	2100      	movs	r1, #0
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <log_print+0x58>)
 8001436:	f007 faab 	bl	8008990 <memset>
        log_msg_len = 0;
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <log_print+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	801a      	strh	r2, [r3, #0]
        return 0;
 8001440:	2300      	movs	r3, #0
 8001442:	e001      	b.n	8001448 <log_print+0x4c>
    }
    return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2400644c 	.word	0x2400644c
 8001450:	24004700 	.word	0x24004700
 8001454:	240029b4 	.word	0x240029b4
 8001458:	24000378 	.word	0x24000378

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_MspInit+0x30>)
 8001470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x30>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x30>)
 8001480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	58024400 	.word	0x58024400

0800149c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b8      	sub	sp, #224	; 0xe0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	22bc      	movs	r2, #188	; 0xbc
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f007 fa67 	bl	8008990 <memset>
  if(hspi->Instance==SPI2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a56      	ldr	r2, [pc, #344]	; (8001620 <HAL_SPI_MspInit+0x184>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	f040 80a5 	bne.w	8001618 <HAL_SPI_MspInit+0x17c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fdef 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80014e8:	f7ff ffb8 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <HAL_SPI_MspInit+0x188>)
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f2:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_SPI_MspInit+0x188>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014fc:	4b49      	ldr	r3, [pc, #292]	; (8001624 <HAL_SPI_MspInit+0x188>)
 80014fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_SPI_MspInit+0x188>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_SPI_MspInit+0x188>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_SPI_MspInit+0x188>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001528:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800152c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001542:	2305      	movs	r3, #5
 8001544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800154c:	4619      	mov	r1, r3
 800154e:	4836      	ldr	r0, [pc, #216]	; (8001628 <HAL_SPI_MspInit+0x18c>)
 8001550:	f002 fbce 	bl	8003cf0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001556:	4a36      	ldr	r2, [pc, #216]	; (8001630 <HAL_SPI_MspInit+0x194>)
 8001558:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_SPI_MspInit+0x190>)
 800155c:	2227      	movs	r2, #39	; 0x27
 800155e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001560:	4b32      	ldr	r3, [pc, #200]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_SPI_MspInit+0x190>)
 800156e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001572:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <HAL_SPI_MspInit+0x190>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_SPI_MspInit+0x190>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001592:	4826      	ldr	r0, [pc, #152]	; (800162c <HAL_SPI_MspInit+0x190>)
 8001594:	f000 fca4 	bl	8001ee0 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 800159e:	f7ff ff5d 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_SPI_MspInit+0x190>)
 80015a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_SPI_MspInit+0x190>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_SPI_MspInit+0x19c>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015b6:	2228      	movs	r2, #40	; 0x28
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015bc:	2240      	movs	r2, #64	; 0x40
 80015be:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <HAL_SPI_MspInit+0x198>)
 80015ee:	f000 fc77 	bl	8001ee0 <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 80015f8:	f7ff ff30 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <HAL_SPI_MspInit+0x198>)
 8001600:	679a      	str	r2, [r3, #120]	; 0x78
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_SPI_MspInit+0x198>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	2024      	movs	r0, #36	; 0x24
 800160e:	f000 fc32 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001612:	2024      	movs	r0, #36	; 0x24
 8001614:	f000 fc49 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	37e0      	adds	r7, #224	; 0xe0
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40003800 	.word	0x40003800
 8001624:	58024400 	.word	0x58024400
 8001628:	58020400 	.word	0x58020400
 800162c:	24000288 	.word	0x24000288
 8001630:	40020010 	.word	0x40020010
 8001634:	24000300 	.word	0x24000300
 8001638:	40020028 	.word	0x40020028

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0b8      	sub	sp, #224	; 0xe0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	22bc      	movs	r2, #188	; 0xbc
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f007 f997 	bl	8008990 <memset>
  if(huart->Instance==USART1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_UART_MspInit+0x174>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 809d 	bne.w	80017a8 <HAL_UART_MspInit+0x16c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800166e:	2301      	movs	r3, #1
 8001670:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fd1f 	bl	80050c0 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001688:	f7ff fee8 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168c:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <HAL_UART_MspInit+0x178>)
 800168e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001692:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_UART_MspInit+0x178>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800169c:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <HAL_UART_MspInit+0x178>)
 800169e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <HAL_UART_MspInit+0x178>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	4a40      	ldr	r2, [pc, #256]	; (80017b4 <HAL_UART_MspInit+0x178>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ba:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <HAL_UART_MspInit+0x178>)
 80016bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e2:	2307      	movs	r3, #7
 80016e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ec:	4619      	mov	r1, r3
 80016ee:	4832      	ldr	r0, [pc, #200]	; (80017b8 <HAL_UART_MspInit+0x17c>)
 80016f0:	f002 fafe 	bl	8003cf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream2;
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_UART_MspInit+0x180>)
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_UART_MspInit+0x184>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_UART_MspInit+0x180>)
 80016fc:	2229      	movs	r2, #41	; 0x29
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_UART_MspInit+0x180>)
 800170e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001712:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_UART_MspInit+0x180>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_UART_MspInit+0x180>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001732:	4822      	ldr	r0, [pc, #136]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001734:	f000 fbd4 	bl	8001ee0 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800173e:	f7ff fe8d 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_UART_MspInit+0x180>)
 8001746:	67da      	str	r2, [r3, #124]	; 0x7c
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_UART_MspInit+0x180>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream3;
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_UART_MspInit+0x18c>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001756:	222a      	movs	r2, #42	; 0x2a
 8001758:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_UART_MspInit+0x188>)
 800175c:	2240      	movs	r2, #64	; 0x40
 800175e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_UART_MspInit+0x188>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_UART_MspInit+0x188>)
 8001788:	2200      	movs	r2, #0
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <HAL_UART_MspInit+0x188>)
 800178e:	f000 fba7 	bl	8001ee0 <HAL_DMA_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x160>
    {
      Error_Handler();
 8001798:	f7ff fe60 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_UART_MspInit+0x188>)
 80017a0:	679a      	str	r2, [r3, #120]	; 0x78
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_UART_MspInit+0x188>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	37e0      	adds	r7, #224	; 0xe0
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40011000 	.word	0x40011000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	58020000 	.word	0x58020000
 80017bc:	24000408 	.word	0x24000408
 80017c0:	40020040 	.word	0x40020040
 80017c4:	24000480 	.word	0x24000480
 80017c8:	40020058 	.word	0x40020058

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <NMI_Handler+0x4>

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <MemManage_Handler+0x4>

080017de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 fa26 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA1_Stream0_IRQHandler+0x10>)
 8001826:	f001 f8fd 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	24000288 	.word	0x24000288

08001834 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <DMA1_Stream1_IRQHandler+0x10>)
 800183a:	f001 f8f3 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000300 	.word	0x24000300

08001848 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <DMA1_Stream2_IRQHandler+0x10>)
 800184e:	f001 f8e9 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000408 	.word	0x24000408

0800185c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA1_Stream3_IRQHandler+0x10>)
 8001862:	f001 f8df 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000480 	.word	0x24000480

08001870 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001874:	2040      	movs	r0, #64	; 0x40
 8001876:	f002 fc04 	bl	8004082 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <SPI2_IRQHandler+0x10>)
 8001886:	f005 fc4d 	bl	8007124 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	24000200 	.word	0x24000200

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ae:	f007 f837 	bl	8008920 <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
	return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018d6:	e7fe      	b.n	80018d6 <_exit+0x12>

080018d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e00a      	b.n	8001900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ea:	f3af 8000 	nop.w
 80018ee:	4601      	mov	r1, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	429a      	cmp	r2, r3
 8001906:	dbf0      	blt.n	80018ea <_read+0x12>
	}

return len;
 8001908:	687b      	ldr	r3, [r7, #4]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e009      	b.n	8001938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf1      	blt.n	8001924 <_write+0x12>
	}
	return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
	return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001972:	605a      	str	r2, [r3, #4]
	return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_isatty>:

int _isatty(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return 1;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f006 ff9c 	bl	8008920 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24080000 	.word	0x24080000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	24006450 	.word	0x24006450
 8001a1c:	24006468 	.word	0x24006468

08001a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a24:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <SystemInit+0xe4>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2a:	4a36      	ldr	r2, [pc, #216]	; (8001b04 <SystemInit+0xe4>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <SystemInit+0xe8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d807      	bhi.n	8001a50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <SystemInit+0xe8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 030f 	bic.w	r3, r3, #15
 8001a48:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <SystemInit+0xe8>)
 8001a4a:	f043 0307 	orr.w	r3, r3, #7
 8001a4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <SystemInit+0xec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <SystemInit+0xec>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <SystemInit+0xec>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <SystemInit+0xec>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4929      	ldr	r1, [pc, #164]	; (8001b0c <SystemInit+0xec>)
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <SystemInit+0xf0>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <SystemInit+0xe8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <SystemInit+0xe8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 030f 	bic.w	r3, r3, #15
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <SystemInit+0xe8>)
 8001a84:	f043 0307 	orr.w	r3, r3, #7
 8001a88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <SystemInit+0xec>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <SystemInit+0xec>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <SystemInit+0xec>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <SystemInit+0xec>)
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <SystemInit+0xf4>)
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <SystemInit+0xec>)
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <SystemInit+0xf8>)
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <SystemInit+0xec>)
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <SystemInit+0xfc>)
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <SystemInit+0xec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <SystemInit+0xec>)
 8001ab6:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <SystemInit+0xfc>)
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <SystemInit+0xec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <SystemInit+0xec>)
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <SystemInit+0xfc>)
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <SystemInit+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <SystemInit+0xec>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <SystemInit+0xec>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <SystemInit+0xec>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <SystemInit+0x100>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <SystemInit+0x104>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aea:	d202      	bcs.n	8001af2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <SystemInit+0x108>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <SystemInit+0x10c>)
 8001af4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001af8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	52002000 	.word	0x52002000
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b14:	02020200 	.word	0x02020200
 8001b18:	01ff0000 	.word	0x01ff0000
 8001b1c:	01010280 	.word	0x01010280
 8001b20:	5c001000 	.word	0x5c001000
 8001b24:	ffff0000 	.word	0xffff0000
 8001b28:	51008108 	.word	0x51008108
 8001b2c:	52004000 	.word	0x52004000

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b34:	f7ff ff74 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f006 fee5 	bl	800892c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe ff8b 	bl	8000a7c <main>
  bx  lr
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b70:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8001b74:	0800d804 	.word	0x0800d804
  ldr r2, =_sbss
 8001b78:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8001b7c:	24006468 	.word	0x24006468

08001b80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC3_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f000 f968 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b90:	f003 f8c0 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	4913      	ldr	r1, [pc, #76]	; (8001bf0 <HAL_Init+0x6c>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_Init+0x68>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_Init+0x6c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_Init+0x70>)
 8001bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_Init+0x74>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f814 	bl	8001bfc <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e002      	b.n	8001be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fc43 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	0800d310 	.word	0x0800d310
 8001bf4:	24000004 	.word	0x24000004
 8001bf8:	24000000 	.word	0x24000000

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e021      	b.n	8001c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_InitTick+0x64>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f94d 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f917 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x68>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2400000c 	.word	0x2400000c
 8001c60:	24000000 	.word	0x24000000
 8001c64:	24000008 	.word	0x24000008

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	24006454 	.word	0x24006454

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	24006454 	.word	0x24006454

08001ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetREVID+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	5c001000 	.word	0x5c001000

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	05fa0000 	.word	0x05fa0000

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff40 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff33 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa4 	bl	8001e1c <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fed2 	bl	8001c90 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e316      	b.n	8002526 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a66      	ldr	r2, [pc, #408]	; (8002098 <HAL_DMA_Init+0x1b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d04a      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_DMA_Init+0x1bc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d045      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a63      	ldr	r2, [pc, #396]	; (80020a0 <HAL_DMA_Init+0x1c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d040      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_DMA_Init+0x1c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d03b      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_Init+0x1c8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d036      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	; (80020ac <HAL_DMA_Init+0x1cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d031      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_DMA_Init+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d02c      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a5c      	ldr	r2, [pc, #368]	; (80020b4 <HAL_DMA_Init+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d027      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_DMA_Init+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d022      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a59      	ldr	r2, [pc, #356]	; (80020bc <HAL_DMA_Init+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d01d      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_DMA_Init+0x1e0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d018      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a56      	ldr	r2, [pc, #344]	; (80020c4 <HAL_DMA_Init+0x1e4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d013      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <HAL_DMA_Init+0x1e8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00e      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a53      	ldr	r2, [pc, #332]	; (80020cc <HAL_DMA_Init+0x1ec>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_DMA_Init+0x1f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_DMA_Init+0xb8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_DMA_Init+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Init+0xbc>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Init+0xbe>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 813b 	beq.w	800221a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_DMA_Init+0x1b8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d04a      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a36      	ldr	r2, [pc, #216]	; (800209c <HAL_DMA_Init+0x1bc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d045      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	; (80020a0 <HAL_DMA_Init+0x1c0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d040      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <HAL_DMA_Init+0x1c4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d03b      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	; (80020a8 <HAL_DMA_Init+0x1c8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d036      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <HAL_DMA_Init+0x1cc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d031      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <HAL_DMA_Init+0x1d0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02c      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	; (80020b4 <HAL_DMA_Init+0x1d4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d027      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_DMA_Init+0x1d8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d022      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_DMA_Init+0x1dc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01d      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	; (80020c0 <HAL_DMA_Init+0x1e0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d018      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <HAL_DMA_Init+0x1e4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_DMA_Init+0x1e8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00e      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a24      	ldr	r2, [pc, #144]	; (80020cc <HAL_DMA_Init+0x1ec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d009      	beq.n	8002054 <HAL_DMA_Init+0x174>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_DMA_Init+0x1f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_DMA_Init+0x174>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_DMA_Init+0x1f4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <HAL_DMA_Init+0x186>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e007      	b.n	8002076 <HAL_DMA_Init+0x196>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002076:	e02f      	b.n	80020d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002078:	f7ff fe0a 	bl	8001c90 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b05      	cmp	r3, #5
 8002084:	d928      	bls.n	80020d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2220      	movs	r2, #32
 800208a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2203      	movs	r2, #3
 8002090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e246      	b.n	8002526 <HAL_DMA_Init+0x646>
 8002098:	40020010 	.word	0x40020010
 800209c:	40020028 	.word	0x40020028
 80020a0:	40020040 	.word	0x40020040
 80020a4:	40020058 	.word	0x40020058
 80020a8:	40020070 	.word	0x40020070
 80020ac:	40020088 	.word	0x40020088
 80020b0:	400200a0 	.word	0x400200a0
 80020b4:	400200b8 	.word	0x400200b8
 80020b8:	40020410 	.word	0x40020410
 80020bc:	40020428 	.word	0x40020428
 80020c0:	40020440 	.word	0x40020440
 80020c4:	40020458 	.word	0x40020458
 80020c8:	40020470 	.word	0x40020470
 80020cc:	40020488 	.word	0x40020488
 80020d0:	400204a0 	.word	0x400204a0
 80020d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1c8      	bne.n	8002078 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4b83      	ldr	r3, [pc, #524]	; (8002300 <HAL_DMA_Init+0x420>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80020fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b04      	cmp	r3, #4
 800212a:	d107      	bne.n	800213c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4313      	orrs	r3, r2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800213c:	4b71      	ldr	r3, [pc, #452]	; (8002304 <HAL_DMA_Init+0x424>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b71      	ldr	r3, [pc, #452]	; (8002308 <HAL_DMA_Init+0x428>)
 8002142:	4013      	ands	r3, r2
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002148:	d328      	bcc.n	800219c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b28      	cmp	r3, #40	; 0x28
 8002150:	d903      	bls.n	800215a <HAL_DMA_Init+0x27a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b2e      	cmp	r3, #46	; 0x2e
 8002158:	d917      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b3e      	cmp	r3, #62	; 0x3e
 8002160:	d903      	bls.n	800216a <HAL_DMA_Init+0x28a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b42      	cmp	r3, #66	; 0x42
 8002168:	d90f      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b46      	cmp	r3, #70	; 0x46
 8002170:	d903      	bls.n	800217a <HAL_DMA_Init+0x29a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b48      	cmp	r3, #72	; 0x48
 8002178:	d907      	bls.n	800218a <HAL_DMA_Init+0x2aa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b4e      	cmp	r3, #78	; 0x4e
 8002180:	d905      	bls.n	800218e <HAL_DMA_Init+0x2ae>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b52      	cmp	r3, #82	; 0x52
 8002188:	d801      	bhi.n	800218e <HAL_DMA_Init+0x2ae>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_DMA_Init+0x2b0>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f023 0307 	bic.w	r3, r3, #7
 80021b2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d117      	bne.n	80021f6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00e      	beq.n	80021f6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f001 fbff 	bl	80039dc <DMA_CheckFifoParam>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e197      	b.n	8002526 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f001 fb3a 	bl	8003878 <DMA_CalcBaseAndBitshift>
 8002204:	4603      	mov	r3, r0
 8002206:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e0cd      	b.n	80023b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a3b      	ldr	r2, [pc, #236]	; (800230c <HAL_DMA_Init+0x42c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_DMA_Init+0x430>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01d      	beq.n	800226a <HAL_DMA_Init+0x38a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a38      	ldr	r2, [pc, #224]	; (8002314 <HAL_DMA_Init+0x434>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d018      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a36      	ldr	r2, [pc, #216]	; (8002318 <HAL_DMA_Init+0x438>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a35      	ldr	r2, [pc, #212]	; (800231c <HAL_DMA_Init+0x43c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Init+0x38a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a33      	ldr	r2, [pc, #204]	; (8002320 <HAL_DMA_Init+0x440>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a32      	ldr	r2, [pc, #200]	; (8002324 <HAL_DMA_Init+0x444>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Init+0x38a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_DMA_Init+0x448>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_DMA_Init+0x38e>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_DMA_Init+0x390>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 8097 	beq.w	80023a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_DMA_Init+0x42c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d021      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a22      	ldr	r2, [pc, #136]	; (8002310 <HAL_DMA_Init+0x430>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01c      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_DMA_Init+0x434>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d017      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_DMA_Init+0x438>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d012      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_DMA_Init+0x43c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_DMA_Init+0x440>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d008      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_DMA_Init+0x444>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d003      	beq.n	80022c4 <HAL_DMA_Init+0x3e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_DMA_Init+0x448>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_DMA_Init+0x44c>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d020      	beq.n	8002330 <HAL_DMA_Init+0x450>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d102      	bne.n	80022fc <HAL_DMA_Init+0x41c>
 80022f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022fa:	e01a      	b.n	8002332 <HAL_DMA_Init+0x452>
 80022fc:	2300      	movs	r3, #0
 80022fe:	e018      	b.n	8002332 <HAL_DMA_Init+0x452>
 8002300:	fe10803f 	.word	0xfe10803f
 8002304:	5c001000 	.word	0x5c001000
 8002308:	ffff0000 	.word	0xffff0000
 800230c:	58025408 	.word	0x58025408
 8002310:	5802541c 	.word	0x5802541c
 8002314:	58025430 	.word	0x58025430
 8002318:	58025444 	.word	0x58025444
 800231c:	58025458 	.word	0x58025458
 8002320:	5802546c 	.word	0x5802546c
 8002324:	58025480 	.word	0x58025480
 8002328:	58025494 	.word	0x58025494
 800232c:	fffe000f 	.word	0xfffe000f
 8002330:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002338:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002360:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <HAL_DMA_Init+0x650>)
 8002378:	4413      	add	r3, r2
 800237a:	4a6e      	ldr	r2, [pc, #440]	; (8002534 <HAL_DMA_Init+0x654>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	009a      	lsls	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f001 fa75 	bl	8003878 <DMA_CalcBaseAndBitshift>
 800238e:	4603      	mov	r3, r0
 8002390:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e008      	b.n	80023b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0b7      	b.n	8002526 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5f      	ldr	r2, [pc, #380]	; (8002538 <HAL_DMA_Init+0x658>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d072      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_DMA_Init+0x65c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d06d      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5c      	ldr	r2, [pc, #368]	; (8002540 <HAL_DMA_Init+0x660>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d068      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <HAL_DMA_Init+0x664>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d063      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a59      	ldr	r2, [pc, #356]	; (8002548 <HAL_DMA_Init+0x668>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05e      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a57      	ldr	r2, [pc, #348]	; (800254c <HAL_DMA_Init+0x66c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d059      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a56      	ldr	r2, [pc, #344]	; (8002550 <HAL_DMA_Init+0x670>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d054      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a54      	ldr	r2, [pc, #336]	; (8002554 <HAL_DMA_Init+0x674>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d04f      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a53      	ldr	r2, [pc, #332]	; (8002558 <HAL_DMA_Init+0x678>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d04a      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_DMA_Init+0x67c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d045      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_DMA_Init+0x680>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d040      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_DMA_Init+0x684>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d03b      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_DMA_Init+0x688>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d036      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_DMA_Init+0x68c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_DMA_Init+0x690>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d02c      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_DMA_Init+0x694>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d027      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_DMA_Init+0x698>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a45      	ldr	r2, [pc, #276]	; (800257c <HAL_DMA_Init+0x69c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01d      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a44      	ldr	r2, [pc, #272]	; (8002580 <HAL_DMA_Init+0x6a0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a42      	ldr	r2, [pc, #264]	; (8002584 <HAL_DMA_Init+0x6a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a41      	ldr	r2, [pc, #260]	; (8002588 <HAL_DMA_Init+0x6a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a3f      	ldr	r2, [pc, #252]	; (800258c <HAL_DMA_Init+0x6ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3e      	ldr	r2, [pc, #248]	; (8002590 <HAL_DMA_Init+0x6b0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_DMA_Init+0x5c6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <HAL_DMA_Init+0x6b4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_DMA_Init+0x5ca>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_DMA_Init+0x5cc>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f001 fb0f 	bl	8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d102      	bne.n	80024c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_DMA_Init+0x624>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d80c      	bhi.n	8002504 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 fb8c 	bl	8003c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	e008      	b.n	8002516 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	a7fdabf8 	.word	0xa7fdabf8
 8002534:	cccccccd 	.word	0xcccccccd
 8002538:	40020010 	.word	0x40020010
 800253c:	40020028 	.word	0x40020028
 8002540:	40020040 	.word	0x40020040
 8002544:	40020058 	.word	0x40020058
 8002548:	40020070 	.word	0x40020070
 800254c:	40020088 	.word	0x40020088
 8002550:	400200a0 	.word	0x400200a0
 8002554:	400200b8 	.word	0x400200b8
 8002558:	40020410 	.word	0x40020410
 800255c:	40020428 	.word	0x40020428
 8002560:	40020440 	.word	0x40020440
 8002564:	40020458 	.word	0x40020458
 8002568:	40020470 	.word	0x40020470
 800256c:	40020488 	.word	0x40020488
 8002570:	400204a0 	.word	0x400204a0
 8002574:	400204b8 	.word	0x400204b8
 8002578:	58025408 	.word	0x58025408
 800257c:	5802541c 	.word	0x5802541c
 8002580:	58025430 	.word	0x58025430
 8002584:	58025444 	.word	0x58025444
 8002588:	58025458 	.word	0x58025458
 800258c:	5802546c 	.word	0x5802546c
 8002590:	58025480 	.word	0x58025480
 8002594:	58025494 	.word	0x58025494

08002598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e237      	b.n	8002a1a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d004      	beq.n	80025c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e22c      	b.n	8002a1a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_DMA_Abort_IT+0x1a0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d04a      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <HAL_DMA_Abort_IT+0x1a4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d045      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a59      	ldr	r2, [pc, #356]	; (8002740 <HAL_DMA_Abort_IT+0x1a8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d040      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_DMA_Abort_IT+0x1ac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d03b      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a56      	ldr	r2, [pc, #344]	; (8002748 <HAL_DMA_Abort_IT+0x1b0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d036      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a55      	ldr	r2, [pc, #340]	; (800274c <HAL_DMA_Abort_IT+0x1b4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d031      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a53      	ldr	r2, [pc, #332]	; (8002750 <HAL_DMA_Abort_IT+0x1b8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02c      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_DMA_Abort_IT+0x1bc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d027      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_DMA_Abort_IT+0x1c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d022      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a4f      	ldr	r2, [pc, #316]	; (800275c <HAL_DMA_Abort_IT+0x1c4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d01d      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4d      	ldr	r2, [pc, #308]	; (8002760 <HAL_DMA_Abort_IT+0x1c8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d018      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a4c      	ldr	r2, [pc, #304]	; (8002764 <HAL_DMA_Abort_IT+0x1cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_DMA_Abort_IT+0x1d0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a49      	ldr	r2, [pc, #292]	; (800276c <HAL_DMA_Abort_IT+0x1d4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d009      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a47      	ldr	r2, [pc, #284]	; (8002770 <HAL_DMA_Abort_IT+0x1d8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <HAL_DMA_Abort_IT+0xc8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a46      	ldr	r2, [pc, #280]	; (8002774 <HAL_DMA_Abort_IT+0x1dc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Abort_IT+0xcc>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_DMA_Abort_IT+0xce>
 8002664:	2300      	movs	r3, #0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8086 	beq.w	8002778 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2204      	movs	r2, #4
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <HAL_DMA_Abort_IT+0x1a0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d04a      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a2e      	ldr	r2, [pc, #184]	; (800273c <HAL_DMA_Abort_IT+0x1a4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d045      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <HAL_DMA_Abort_IT+0x1a8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d040      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2b      	ldr	r2, [pc, #172]	; (8002744 <HAL_DMA_Abort_IT+0x1ac>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d03b      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a29      	ldr	r2, [pc, #164]	; (8002748 <HAL_DMA_Abort_IT+0x1b0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d036      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_DMA_Abort_IT+0x1b4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d031      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <HAL_DMA_Abort_IT+0x1b8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02c      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a25      	ldr	r2, [pc, #148]	; (8002754 <HAL_DMA_Abort_IT+0x1bc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d027      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <HAL_DMA_Abort_IT+0x1c0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d022      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_DMA_Abort_IT+0x1c4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d01d      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_DMA_Abort_IT+0x1c8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d018      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_DMA_Abort_IT+0x1cc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d013      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_DMA_Abort_IT+0x1d0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00e      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_DMA_Abort_IT+0x1d4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_DMA_Abort_IT+0x1d8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_DMA_Abort_IT+0x17c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_DMA_Abort_IT+0x1dc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d108      	bne.n	8002726 <HAL_DMA_Abort_IT+0x18e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e178      	b.n	8002a18 <HAL_DMA_Abort_IT+0x480>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e16f      	b.n	8002a18 <HAL_DMA_Abort_IT+0x480>
 8002738:	40020010 	.word	0x40020010
 800273c:	40020028 	.word	0x40020028
 8002740:	40020040 	.word	0x40020040
 8002744:	40020058 	.word	0x40020058
 8002748:	40020070 	.word	0x40020070
 800274c:	40020088 	.word	0x40020088
 8002750:	400200a0 	.word	0x400200a0
 8002754:	400200b8 	.word	0x400200b8
 8002758:	40020410 	.word	0x40020410
 800275c:	40020428 	.word	0x40020428
 8002760:	40020440 	.word	0x40020440
 8002764:	40020458 	.word	0x40020458
 8002768:	40020470 	.word	0x40020470
 800276c:	40020488 	.word	0x40020488
 8002770:	400204a0 	.word	0x400204a0
 8002774:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 020e 	bic.w	r2, r2, #14
 8002786:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6c      	ldr	r2, [pc, #432]	; (8002940 <HAL_DMA_Abort_IT+0x3a8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d04a      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6b      	ldr	r2, [pc, #428]	; (8002944 <HAL_DMA_Abort_IT+0x3ac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d045      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_DMA_Abort_IT+0x3b0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d040      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a68      	ldr	r2, [pc, #416]	; (800294c <HAL_DMA_Abort_IT+0x3b4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d03b      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a66      	ldr	r2, [pc, #408]	; (8002950 <HAL_DMA_Abort_IT+0x3b8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d036      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_DMA_Abort_IT+0x3bc>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d031      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a63      	ldr	r2, [pc, #396]	; (8002958 <HAL_DMA_Abort_IT+0x3c0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02c      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a62      	ldr	r2, [pc, #392]	; (800295c <HAL_DMA_Abort_IT+0x3c4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d027      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_DMA_Abort_IT+0x3c8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d022      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a5f      	ldr	r2, [pc, #380]	; (8002964 <HAL_DMA_Abort_IT+0x3cc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01d      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_DMA_Abort_IT+0x3d0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d018      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a5c      	ldr	r2, [pc, #368]	; (800296c <HAL_DMA_Abort_IT+0x3d4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a5a      	ldr	r2, [pc, #360]	; (8002970 <HAL_DMA_Abort_IT+0x3d8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a59      	ldr	r2, [pc, #356]	; (8002974 <HAL_DMA_Abort_IT+0x3dc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a57      	ldr	r2, [pc, #348]	; (8002978 <HAL_DMA_Abort_IT+0x3e0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0x290>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <HAL_DMA_Abort_IT+0x3e4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <HAL_DMA_Abort_IT+0x2a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e007      	b.n	800284a <HAL_DMA_Abort_IT+0x2b2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_DMA_Abort_IT+0x3a8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d072      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_DMA_Abort_IT+0x3ac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d06d      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_DMA_Abort_IT+0x3b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d068      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_DMA_Abort_IT+0x3b4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d063      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a36      	ldr	r2, [pc, #216]	; (8002950 <HAL_DMA_Abort_IT+0x3b8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_Abort_IT+0x3bc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d059      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_DMA_Abort_IT+0x3c0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d054      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_Abort_IT+0x3c4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04f      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_DMA_Abort_IT+0x3c8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_DMA_Abort_IT+0x3cc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_DMA_Abort_IT+0x3d0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_Abort_IT+0x3d4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_Abort_IT+0x3d8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_DMA_Abort_IT+0x3dc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Abort_IT+0x3e0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_DMA_Abort_IT+0x3e4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_Abort_IT+0x3e8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Abort_IT+0x3ec>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_Abort_IT+0x3f0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_DMA_Abort_IT+0x3f4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_Abort_IT+0x3f8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_DMA_Abort_IT+0x3fc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_DMA_Abort_IT+0x400>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort_IT+0x3a2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_DMA_Abort_IT+0x404>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d132      	bne.n	80029a0 <HAL_DMA_Abort_IT+0x408>
 800293a:	2301      	movs	r3, #1
 800293c:	e031      	b.n	80029a2 <HAL_DMA_Abort_IT+0x40a>
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d028      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop

08002a24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a30:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_DMA_IRQHandler+0x1ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a67      	ldr	r2, [pc, #412]	; (8002bd4 <HAL_DMA_IRQHandler+0x1b0>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0a9b      	lsrs	r3, r3, #10
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	; (8002bd8 <HAL_DMA_IRQHandler+0x1b4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_DMA_IRQHandler+0x1b8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5c      	ldr	r2, [pc, #368]	; (8002be0 <HAL_DMA_IRQHandler+0x1bc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5a      	ldr	r2, [pc, #360]	; (8002be4 <HAL_DMA_IRQHandler+0x1c0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <HAL_DMA_IRQHandler+0x1c4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a57      	ldr	r2, [pc, #348]	; (8002bec <HAL_DMA_IRQHandler+0x1c8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <HAL_DMA_IRQHandler+0x1cc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <HAL_DMA_IRQHandler+0x1d0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_DMA_IRQHandler+0x1d4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a51      	ldr	r2, [pc, #324]	; (8002bfc <HAL_DMA_IRQHandler+0x1d8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <HAL_DMA_IRQHandler+0x1dc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a4e      	ldr	r2, [pc, #312]	; (8002c04 <HAL_DMA_IRQHandler+0x1e0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_DMA_IRQHandler+0x1e4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a4b      	ldr	r2, [pc, #300]	; (8002c0c <HAL_DMA_IRQHandler+0x1e8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_DMA_IRQHandler+0x1ec>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xd2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_DMA_IRQHandler+0x1f0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_DMA_IRQHandler+0xd6>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_DMA_IRQHandler+0xd8>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 842b 	beq.w	8003358 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80a2 	beq.w	8002c5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <HAL_DMA_IRQHandler+0x1b4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2d      	ldr	r2, [pc, #180]	; (8002bdc <HAL_DMA_IRQHandler+0x1b8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d045      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_DMA_IRQHandler+0x1bc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d040      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_DMA_IRQHandler+0x1c0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d03b      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a28      	ldr	r2, [pc, #160]	; (8002be8 <HAL_DMA_IRQHandler+0x1c4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d036      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_DMA_IRQHandler+0x1c8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d031      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <HAL_DMA_IRQHandler+0x1cc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_DMA_IRQHandler+0x1d0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d027      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_DMA_IRQHandler+0x1d4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_DMA_IRQHandler+0x1d8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_DMA_IRQHandler+0x1dc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_DMA_IRQHandler+0x1e0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_DMA_IRQHandler+0x1e4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_DMA_IRQHandler+0x1e8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_DMA_IRQHandler+0x1ec>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x194>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_DMA_IRQHandler+0x1f0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d12f      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x1f4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf14      	ite	ne
 8002bc6:	2301      	movne	r3, #1
 8002bc8:	2300      	moveq	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e02e      	b.n	8002c2c <HAL_DMA_IRQHandler+0x208>
 8002bce:	bf00      	nop
 8002bd0:	24000000 	.word	0x24000000
 8002bd4:	1b4e81b5 	.word	0x1b4e81b5
 8002bd8:	40020010 	.word	0x40020010
 8002bdc:	40020028 	.word	0x40020028
 8002be0:	40020040 	.word	0x40020040
 8002be4:	40020058 	.word	0x40020058
 8002be8:	40020070 	.word	0x40020070
 8002bec:	40020088 	.word	0x40020088
 8002bf0:	400200a0 	.word	0x400200a0
 8002bf4:	400200b8 	.word	0x400200b8
 8002bf8:	40020410 	.word	0x40020410
 8002bfc:	40020428 	.word	0x40020428
 8002c00:	40020440 	.word	0x40020440
 8002c04:	40020458 	.word	0x40020458
 8002c08:	40020470 	.word	0x40020470
 8002c0c:	40020488 	.word	0x40020488
 8002c10:	400204a0 	.word	0x400204a0
 8002c14:	400204b8 	.word	0x400204b8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2208      	movs	r2, #8
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06e      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_DMA_IRQHandler+0x3f8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a67      	ldr	r2, [pc, #412]	; (8002e20 <HAL_DMA_IRQHandler+0x3fc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_DMA_IRQHandler+0x400>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a64      	ldr	r2, [pc, #400]	; (8002e28 <HAL_DMA_IRQHandler+0x404>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a63      	ldr	r2, [pc, #396]	; (8002e2c <HAL_DMA_IRQHandler+0x408>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a61      	ldr	r2, [pc, #388]	; (8002e30 <HAL_DMA_IRQHandler+0x40c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a60      	ldr	r2, [pc, #384]	; (8002e34 <HAL_DMA_IRQHandler+0x410>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5e      	ldr	r2, [pc, #376]	; (8002e38 <HAL_DMA_IRQHandler+0x414>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_DMA_IRQHandler+0x418>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_DMA_IRQHandler+0x41c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5a      	ldr	r2, [pc, #360]	; (8002e44 <HAL_DMA_IRQHandler+0x420>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_DMA_IRQHandler+0x424>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_DMA_IRQHandler+0x428>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a55      	ldr	r2, [pc, #340]	; (8002e50 <HAL_DMA_IRQHandler+0x42c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a54      	ldr	r2, [pc, #336]	; (8002e54 <HAL_DMA_IRQHandler+0x430>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x2ee>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a52      	ldr	r2, [pc, #328]	; (8002e58 <HAL_DMA_IRQHandler+0x434>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d10a      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x304>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e003      	b.n	8002d30 <HAL_DMA_IRQHandler+0x30c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	f043 0202 	orr.w	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2204      	movs	r2, #4
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 808f 	beq.w	8002e84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2c      	ldr	r2, [pc, #176]	; (8002e1c <HAL_DMA_IRQHandler+0x3f8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d04a      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_DMA_IRQHandler+0x3fc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d045      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_DMA_IRQHandler+0x400>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d040      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_DMA_IRQHandler+0x404>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d03b      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <HAL_DMA_IRQHandler+0x408>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d036      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <HAL_DMA_IRQHandler+0x40c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d031      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <HAL_DMA_IRQHandler+0x410>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d02c      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a21      	ldr	r2, [pc, #132]	; (8002e38 <HAL_DMA_IRQHandler+0x414>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d027      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <HAL_DMA_IRQHandler+0x418>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	; (8002e40 <HAL_DMA_IRQHandler+0x41c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01d      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_DMA_IRQHandler+0x420>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d018      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_DMA_IRQHandler+0x424>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_DMA_IRQHandler+0x428>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_DMA_IRQHandler+0x42c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <HAL_DMA_IRQHandler+0x430>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x3e2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_DMA_IRQHandler+0x434>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12a      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x438>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e023      	b.n	8002e64 <HAL_DMA_IRQHandler+0x440>
 8002e1c:	40020010 	.word	0x40020010
 8002e20:	40020028 	.word	0x40020028
 8002e24:	40020040 	.word	0x40020040
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	40020070 	.word	0x40020070
 8002e30:	40020088 	.word	0x40020088
 8002e34:	400200a0 	.word	0x400200a0
 8002e38:	400200b8 	.word	0x400200b8
 8002e3c:	40020410 	.word	0x40020410
 8002e40:	40020428 	.word	0x40020428
 8002e44:	40020440 	.word	0x40020440
 8002e48:	40020458 	.word	0x40020458
 8002e4c:	40020470 	.word	0x40020470
 8002e50:	40020488 	.word	0x40020488
 8002e54:	400204a0 	.word	0x400204a0
 8002e58:	400204b8 	.word	0x400204b8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2204      	movs	r2, #4
 8002e72:	409a      	lsls	r2, r3
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80a6 	beq.w	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a85      	ldr	r2, [pc, #532]	; (80030b4 <HAL_DMA_IRQHandler+0x690>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04a      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a83      	ldr	r2, [pc, #524]	; (80030b8 <HAL_DMA_IRQHandler+0x694>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d045      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a82      	ldr	r2, [pc, #520]	; (80030bc <HAL_DMA_IRQHandler+0x698>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d040      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_DMA_IRQHandler+0x69c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d03b      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7f      	ldr	r2, [pc, #508]	; (80030c4 <HAL_DMA_IRQHandler+0x6a0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d036      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7d      	ldr	r2, [pc, #500]	; (80030c8 <HAL_DMA_IRQHandler+0x6a4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d031      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a7c      	ldr	r2, [pc, #496]	; (80030cc <HAL_DMA_IRQHandler+0x6a8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d02c      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7a      	ldr	r2, [pc, #488]	; (80030d0 <HAL_DMA_IRQHandler+0x6ac>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d027      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <HAL_DMA_IRQHandler+0x6b0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d022      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a77      	ldr	r2, [pc, #476]	; (80030d8 <HAL_DMA_IRQHandler+0x6b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01d      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a76      	ldr	r2, [pc, #472]	; (80030dc <HAL_DMA_IRQHandler+0x6b8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d018      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a74      	ldr	r2, [pc, #464]	; (80030e0 <HAL_DMA_IRQHandler+0x6bc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a73      	ldr	r2, [pc, #460]	; (80030e4 <HAL_DMA_IRQHandler+0x6c0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a71      	ldr	r2, [pc, #452]	; (80030e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a70      	ldr	r2, [pc, #448]	; (80030ec <HAL_DMA_IRQHandler+0x6c8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x516>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10a      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x52c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e009      	b.n	8002f64 <HAL_DMA_IRQHandler+0x540>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03e      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2210      	movs	r2, #16
 8002f72:	409a      	lsls	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d108      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d024      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
 8002fa4:	e01f      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01b      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e016      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0208 	bic.w	r2, r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2220      	movs	r2, #32
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8110 	beq.w	800321c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2c      	ldr	r2, [pc, #176]	; (80030b4 <HAL_DMA_IRQHandler+0x690>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d04a      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <HAL_DMA_IRQHandler+0x694>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d045      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <HAL_DMA_IRQHandler+0x698>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d040      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_DMA_IRQHandler+0x69c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d03b      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <HAL_DMA_IRQHandler+0x6a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d036      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <HAL_DMA_IRQHandler+0x6a4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d031      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_DMA_IRQHandler+0x6a8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02c      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_DMA_IRQHandler+0x6ac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d027      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a20      	ldr	r2, [pc, #128]	; (80030d4 <HAL_DMA_IRQHandler+0x6b0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_DMA_IRQHandler+0x6b4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d01d      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_DMA_IRQHandler+0x6b8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_DMA_IRQHandler+0x6bc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d013      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_DMA_IRQHandler+0x6c0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_DMA_IRQHandler+0x6c4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_DMA_IRQHandler+0x6c8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x678>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_DMA_IRQHandler+0x6cc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d12b      	bne.n	80030f4 <HAL_DMA_IRQHandler+0x6d0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e02a      	b.n	8003108 <HAL_DMA_IRQHandler+0x6e4>
 80030b2:	bf00      	nop
 80030b4:	40020010 	.word	0x40020010
 80030b8:	40020028 	.word	0x40020028
 80030bc:	40020040 	.word	0x40020040
 80030c0:	40020058 	.word	0x40020058
 80030c4:	40020070 	.word	0x40020070
 80030c8:	40020088 	.word	0x40020088
 80030cc:	400200a0 	.word	0x400200a0
 80030d0:	400200b8 	.word	0x400200b8
 80030d4:	40020410 	.word	0x40020410
 80030d8:	40020428 	.word	0x40020428
 80030dc:	40020440 	.word	0x40020440
 80030e0:	40020458 	.word	0x40020458
 80030e4:	40020470 	.word	0x40020470
 80030e8:	40020488 	.word	0x40020488
 80030ec:	400204a0 	.word	0x400204a0
 80030f0:	400204b8 	.word	0x400204b8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8087 	beq.w	800321c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2220      	movs	r2, #32
 8003118:	409a      	lsls	r2, r3
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b04      	cmp	r3, #4
 8003128:	d139      	bne.n	800319e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_IRQHandler+0x736>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	223f      	movs	r2, #63	; 0x3f
 8003174:	409a      	lsls	r2, r3
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 834a 	beq.w	8003828 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
          }
          return;
 800319c:	e344      	b.n	8003828 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d108      	bne.n	80031cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d02c      	beq.n	800321c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	4798      	blx	r3
 80031ca:	e027      	b.n	800321c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e01e      	b.n	800321c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0210 	bic.w	r2, r2, #16
 80031fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8306 	beq.w	8003832 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8088 	beq.w	8003344 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2204      	movs	r2, #4
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a7a      	ldr	r2, [pc, #488]	; (800342c <HAL_DMA_IRQHandler+0xa08>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d04a      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a79      	ldr	r2, [pc, #484]	; (8003430 <HAL_DMA_IRQHandler+0xa0c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d045      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a77      	ldr	r2, [pc, #476]	; (8003434 <HAL_DMA_IRQHandler+0xa10>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d040      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a76      	ldr	r2, [pc, #472]	; (8003438 <HAL_DMA_IRQHandler+0xa14>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d03b      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a74      	ldr	r2, [pc, #464]	; (800343c <HAL_DMA_IRQHandler+0xa18>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d036      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a73      	ldr	r2, [pc, #460]	; (8003440 <HAL_DMA_IRQHandler+0xa1c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d031      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a71      	ldr	r2, [pc, #452]	; (8003444 <HAL_DMA_IRQHandler+0xa20>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02c      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a70      	ldr	r2, [pc, #448]	; (8003448 <HAL_DMA_IRQHandler+0xa24>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d027      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_DMA_IRQHandler+0xa28>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d022      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6d      	ldr	r2, [pc, #436]	; (8003450 <HAL_DMA_IRQHandler+0xa2c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d01d      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6b      	ldr	r2, [pc, #428]	; (8003454 <HAL_DMA_IRQHandler+0xa30>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d018      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a6a      	ldr	r2, [pc, #424]	; (8003458 <HAL_DMA_IRQHandler+0xa34>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a68      	ldr	r2, [pc, #416]	; (800345c <HAL_DMA_IRQHandler+0xa38>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_DMA_IRQHandler+0xa3c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_DMA_IRQHandler+0xa40>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_DMA_IRQHandler+0x8b8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a64      	ldr	r2, [pc, #400]	; (8003468 <HAL_DMA_IRQHandler+0xa44>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <HAL_DMA_IRQHandler+0x8ca>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <HAL_DMA_IRQHandler+0x8da>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3301      	adds	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	429a      	cmp	r2, r3
 8003308:	d307      	bcc.n	800331a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f2      	bne.n	80032fe <HAL_DMA_IRQHandler+0x8da>
 8003318:	e000      	b.n	800331c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800331a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2203      	movs	r2, #3
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003332:	e003      	b.n	800333c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8272 	beq.w	8003832 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
 8003356:	e26c      	b.n	8003832 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_DMA_IRQHandler+0xa48>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d022      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a42      	ldr	r2, [pc, #264]	; (8003470 <HAL_DMA_IRQHandler+0xa4c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d01d      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a40      	ldr	r2, [pc, #256]	; (8003474 <HAL_DMA_IRQHandler+0xa50>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3f      	ldr	r2, [pc, #252]	; (8003478 <HAL_DMA_IRQHandler+0xa54>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3d      	ldr	r2, [pc, #244]	; (800347c <HAL_DMA_IRQHandler+0xa58>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <HAL_DMA_IRQHandler+0xa5c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <HAL_DMA_IRQHandler+0xa60>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x984>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a39      	ldr	r2, [pc, #228]	; (8003488 <HAL_DMA_IRQHandler+0xa64>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_IRQHandler+0x988>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_DMA_IRQHandler+0x98a>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 823f 	beq.w	8003832 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80cd 	beq.w	800356c <HAL_DMA_IRQHandler+0xb48>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80c7 	beq.w	800356c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2204      	movs	r2, #4
 80033e8:	409a      	lsls	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d049      	beq.n	800348c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8210 	beq.w	800382c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003414:	e20a      	b.n	800382c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8206 	beq.w	800382c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003428:	e200      	b.n	800382c <HAL_DMA_IRQHandler+0xe08>
 800342a:	bf00      	nop
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
 800346c:	58025408 	.word	0x58025408
 8003470:	5802541c 	.word	0x5802541c
 8003474:	58025430 	.word	0x58025430
 8003478:	58025444 	.word	0x58025444
 800347c:	58025458 	.word	0x58025458
 8003480:	5802546c 	.word	0x5802546c
 8003484:	58025480 	.word	0x58025480
 8003488:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d160      	bne.n	8003558 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7f      	ldr	r2, [pc, #508]	; (8003698 <HAL_DMA_IRQHandler+0xc74>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04a      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a7d      	ldr	r2, [pc, #500]	; (800369c <HAL_DMA_IRQHandler+0xc78>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d045      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <HAL_DMA_IRQHandler+0xc7c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d040      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a7a      	ldr	r2, [pc, #488]	; (80036a4 <HAL_DMA_IRQHandler+0xc80>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a79      	ldr	r2, [pc, #484]	; (80036a8 <HAL_DMA_IRQHandler+0xc84>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a77      	ldr	r2, [pc, #476]	; (80036ac <HAL_DMA_IRQHandler+0xc88>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a76      	ldr	r2, [pc, #472]	; (80036b0 <HAL_DMA_IRQHandler+0xc8c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d02c      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a74      	ldr	r2, [pc, #464]	; (80036b4 <HAL_DMA_IRQHandler+0xc90>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d027      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	; (80036b8 <HAL_DMA_IRQHandler+0xc94>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a71      	ldr	r2, [pc, #452]	; (80036bc <HAL_DMA_IRQHandler+0xc98>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a70      	ldr	r2, [pc, #448]	; (80036c0 <HAL_DMA_IRQHandler+0xc9c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_DMA_IRQHandler+0xca0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6d      	ldr	r2, [pc, #436]	; (80036c8 <HAL_DMA_IRQHandler+0xca4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_DMA_IRQHandler+0xca8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_DMA_IRQHandler+0xcac>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_IRQHandler+0xb12>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_DMA_IRQHandler+0xcb0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <HAL_DMA_IRQHandler+0xb24>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0208 	bic.w	r2, r2, #8
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e007      	b.n	8003558 <HAL_DMA_IRQHandler+0xb34>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8165 	beq.w	800382c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800356a:	e15f      	b.n	800382c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2202      	movs	r2, #2
 8003576:	409a      	lsls	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80c5 	beq.w	800370c <HAL_DMA_IRQHandler+0xce8>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80bf 	beq.w	800370c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2202      	movs	r2, #2
 8003598:	409a      	lsls	r2, r3
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d018      	beq.n	80035da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 813a 	beq.w	8003830 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035c4:	e134      	b.n	8003830 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8130 	beq.w	8003830 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d8:	e12a      	b.n	8003830 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 8089 	bne.w	80036f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <HAL_DMA_IRQHandler+0xc74>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04a      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a29      	ldr	r2, [pc, #164]	; (800369c <HAL_DMA_IRQHandler+0xc78>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d045      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_DMA_IRQHandler+0xc7c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d040      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <HAL_DMA_IRQHandler+0xc80>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <HAL_DMA_IRQHandler+0xc84>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d036      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_DMA_IRQHandler+0xc88>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <HAL_DMA_IRQHandler+0xc8c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d02c      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a20      	ldr	r2, [pc, #128]	; (80036b4 <HAL_DMA_IRQHandler+0xc90>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d027      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_DMA_IRQHandler+0xc94>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_DMA_IRQHandler+0xc98>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <HAL_DMA_IRQHandler+0xc9c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_DMA_IRQHandler+0xca0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_DMA_IRQHandler+0xca4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_DMA_IRQHandler+0xca8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_DMA_IRQHandler+0xcac>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_IRQHandler+0xc62>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a14      	ldr	r2, [pc, #80]	; (80036d4 <HAL_DMA_IRQHandler+0xcb0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d128      	bne.n	80036d8 <HAL_DMA_IRQHandler+0xcb4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0214 	bic.w	r2, r2, #20
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e027      	b.n	80036e8 <HAL_DMA_IRQHandler+0xcc4>
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 020a 	bic.w	r2, r2, #10
 80036e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8097 	beq.w	8003830 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800370a:	e091      	b.n	8003830 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2208      	movs	r2, #8
 8003716:	409a      	lsls	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	4013      	ands	r3, r2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8088 	beq.w	8003832 <HAL_DMA_IRQHandler+0xe0e>
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8082 	beq.w	8003832 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a41      	ldr	r2, [pc, #260]	; (8003838 <HAL_DMA_IRQHandler+0xe14>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d04a      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3f      	ldr	r2, [pc, #252]	; (800383c <HAL_DMA_IRQHandler+0xe18>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d045      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3e      	ldr	r2, [pc, #248]	; (8003840 <HAL_DMA_IRQHandler+0xe1c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d040      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <HAL_DMA_IRQHandler+0xe20>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d03b      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <HAL_DMA_IRQHandler+0xe24>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d036      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a39      	ldr	r2, [pc, #228]	; (800384c <HAL_DMA_IRQHandler+0xe28>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d031      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a38      	ldr	r2, [pc, #224]	; (8003850 <HAL_DMA_IRQHandler+0xe2c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d02c      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a36      	ldr	r2, [pc, #216]	; (8003854 <HAL_DMA_IRQHandler+0xe30>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d027      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a35      	ldr	r2, [pc, #212]	; (8003858 <HAL_DMA_IRQHandler+0xe34>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d022      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a33      	ldr	r2, [pc, #204]	; (800385c <HAL_DMA_IRQHandler+0xe38>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01d      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a32      	ldr	r2, [pc, #200]	; (8003860 <HAL_DMA_IRQHandler+0xe3c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d018      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_DMA_IRQHandler+0xe40>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <HAL_DMA_IRQHandler+0xe44>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2d      	ldr	r2, [pc, #180]	; (800386c <HAL_DMA_IRQHandler+0xe48>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2c      	ldr	r2, [pc, #176]	; (8003870 <HAL_DMA_IRQHandler+0xe4c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_DMA_IRQHandler+0xdaa>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_DMA_IRQHandler+0xe50>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d108      	bne.n	80037e0 <HAL_DMA_IRQHandler+0xdbc>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 021c 	bic.w	r2, r2, #28
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e007      	b.n	80037f0 <HAL_DMA_IRQHandler+0xdcc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020e 	bic.w	r2, r2, #14
 80037ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	2201      	movs	r2, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
 8003826:	e004      	b.n	8003832 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003828:	bf00      	nop
 800382a:	e002      	b.n	8003832 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800382c:	bf00      	nop
 800382e:	e000      	b.n	8003832 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003830:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8

08003878 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a42      	ldr	r2, [pc, #264]	; (8003990 <DMA_CalcBaseAndBitshift+0x118>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <DMA_CalcBaseAndBitshift+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3f      	ldr	r2, [pc, #252]	; (8003998 <DMA_CalcBaseAndBitshift+0x120>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3e      	ldr	r2, [pc, #248]	; (800399c <DMA_CalcBaseAndBitshift+0x124>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3c      	ldr	r2, [pc, #240]	; (80039a0 <DMA_CalcBaseAndBitshift+0x128>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a39      	ldr	r2, [pc, #228]	; (80039a8 <DMA_CalcBaseAndBitshift+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a38      	ldr	r2, [pc, #224]	; (80039ac <DMA_CalcBaseAndBitshift+0x134>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a36      	ldr	r2, [pc, #216]	; (80039b0 <DMA_CalcBaseAndBitshift+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a35      	ldr	r2, [pc, #212]	; (80039b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a33      	ldr	r2, [pc, #204]	; (80039b8 <DMA_CalcBaseAndBitshift+0x140>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a32      	ldr	r2, [pc, #200]	; (80039bc <DMA_CalcBaseAndBitshift+0x144>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a30      	ldr	r2, [pc, #192]	; (80039c0 <DMA_CalcBaseAndBitshift+0x148>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <DMA_CalcBaseAndBitshift+0x150>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <DMA_CalcBaseAndBitshift+0xa8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <DMA_CalcBaseAndBitshift+0x154>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <DMA_CalcBaseAndBitshift+0xac>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <DMA_CalcBaseAndBitshift+0xae>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d024      	beq.n	8003974 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3b10      	subs	r3, #16
 8003932:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <DMA_CalcBaseAndBitshift+0x158>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	4a24      	ldr	r2, [pc, #144]	; (80039d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003944:	5cd3      	ldrb	r3, [r2, r3]
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d908      	bls.n	8003964 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <DMA_CalcBaseAndBitshift+0x160>)
 800395a:	4013      	ands	r3, r2
 800395c:	1d1a      	adds	r2, r3, #4
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	659a      	str	r2, [r3, #88]	; 0x58
 8003962:	e00d      	b.n	8003980 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <DMA_CalcBaseAndBitshift+0x160>)
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6593      	str	r3, [r2, #88]	; 0x58
 8003972:	e005      	b.n	8003980 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40020010 	.word	0x40020010
 8003994:	40020028 	.word	0x40020028
 8003998:	40020040 	.word	0x40020040
 800399c:	40020058 	.word	0x40020058
 80039a0:	40020070 	.word	0x40020070
 80039a4:	40020088 	.word	0x40020088
 80039a8:	400200a0 	.word	0x400200a0
 80039ac:	400200b8 	.word	0x400200b8
 80039b0:	40020410 	.word	0x40020410
 80039b4:	40020428 	.word	0x40020428
 80039b8:	40020440 	.word	0x40020440
 80039bc:	40020458 	.word	0x40020458
 80039c0:	40020470 	.word	0x40020470
 80039c4:	40020488 	.word	0x40020488
 80039c8:	400204a0 	.word	0x400204a0
 80039cc:	400204b8 	.word	0x400204b8
 80039d0:	aaaaaaab 	.word	0xaaaaaaab
 80039d4:	0800d320 	.word	0x0800d320
 80039d8:	fffffc00 	.word	0xfffffc00

080039dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d120      	bne.n	8003a32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d858      	bhi.n	8003aaa <DMA_CheckFifoParam+0xce>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <DMA_CheckFifoParam+0x24>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a23 	.word	0x08003a23
 8003a08:	08003a11 	.word	0x08003a11
 8003a0c:	08003aab 	.word	0x08003aab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d048      	beq.n	8003aae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a20:	e045      	b.n	8003aae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a2a:	d142      	bne.n	8003ab2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a30:	e03f      	b.n	8003ab2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3a:	d123      	bne.n	8003a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d838      	bhi.n	8003ab6 <DMA_CheckFifoParam+0xda>
 8003a44:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <DMA_CheckFifoParam+0x70>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a63 	.word	0x08003a63
 8003a54:	08003a5d 	.word	0x08003a5d
 8003a58:	08003a75 	.word	0x08003a75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003a60:	e030      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d025      	beq.n	8003aba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a72:	e022      	b.n	8003aba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a7c:	d11f      	bne.n	8003abe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003a82:	e01c      	b.n	8003abe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d902      	bls.n	8003a92 <DMA_CheckFifoParam+0xb6>
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d003      	beq.n	8003a98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a90:	e018      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
        break;
 8003a96:	e015      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8003aa8:	e00b      	b.n	8003ac2 <DMA_CheckFifoParam+0xe6>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e00a      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aae:	bf00      	nop
 8003ab0:	e008      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e006      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ac2:	bf00      	nop
    }
  }

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop

08003ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	; (8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	; (8003bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2d      	ldr	r2, [pc, #180]	; (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01a      	beq.n	8003b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	3b08      	subs	r3, #8
 8003b44:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003b60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003b70:	e024      	b.n	8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	3b10      	subs	r3, #16
 8003b7a:	4a1e      	ldr	r2, [pc, #120]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d806      	bhi.n	8003b9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d902      	bls.n	8003b9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3308      	adds	r3, #8
 8003b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a16      	ldr	r2, [pc, #88]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003bac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	58025408 	.word	0x58025408
 8003bcc:	5802541c 	.word	0x5802541c
 8003bd0:	58025430 	.word	0x58025430
 8003bd4:	58025444 	.word	0x58025444
 8003bd8:	58025458 	.word	0x58025458
 8003bdc:	5802546c 	.word	0x5802546c
 8003be0:	58025480 	.word	0x58025480
 8003be4:	58025494 	.word	0x58025494
 8003be8:	cccccccd 	.word	0xcccccccd
 8003bec:	16009600 	.word	0x16009600
 8003bf0:	58025880 	.word	0x58025880
 8003bf4:	aaaaaaab 	.word	0xaaaaaaab
 8003bf8:	400204b8 	.word	0x400204b8
 8003bfc:	4002040f 	.word	0x4002040f
 8003c00:	10008200 	.word	0x10008200
 8003c04:	40020880 	.word	0x40020880

08003c08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04a      	beq.n	8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d847      	bhi.n	8003cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d022      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a24      	ldr	r2, [pc, #144]	; (8003cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d01d      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d018      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a21      	ldr	r2, [pc, #132]	; (8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d009      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1c      	ldr	r2, [pc, #112]	; (8003cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d101      	bne.n	8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	461a      	mov	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a15      	ldr	r2, [pc, #84]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c90:	671a      	str	r2, [r3, #112]	; 0x70
 8003c92:	e009      	b.n	8003ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003ca6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	58025408 	.word	0x58025408
 8003cc4:	5802541c 	.word	0x5802541c
 8003cc8:	58025430 	.word	0x58025430
 8003ccc:	58025444 	.word	0x58025444
 8003cd0:	58025458 	.word	0x58025458
 8003cd4:	5802546c 	.word	0x5802546c
 8003cd8:	58025480 	.word	0x58025480
 8003cdc:	58025494 	.word	0x58025494
 8003ce0:	1600963f 	.word	0x1600963f
 8003ce4:	58025940 	.word	0x58025940
 8003ce8:	1000823f 	.word	0x1000823f
 8003cec:	40020940 	.word	0x40020940

08003cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003cfe:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <HAL_GPIO_Init+0x234>)
 8003d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d02:	e194      	b.n	800402e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8186 	beq.w	8004028 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d005      	beq.n	8003d34 <HAL_GPIO_Init+0x44>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d130      	bne.n	8003d96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0201 	and.w	r2, r3, #1
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d017      	beq.n	8003dd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	2203      	movs	r2, #3
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d123      	bne.n	8003e26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	08da      	lsrs	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3208      	adds	r2, #8
 8003de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	08da      	lsrs	r2, r3, #3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3208      	adds	r2, #8
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	2203      	movs	r2, #3
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0203 	and.w	r2, r3, #3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80e0 	beq.w	8004028 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e68:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_GPIO_Init+0x238>)
 8003e6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <HAL_GPIO_Init+0x238>)
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_GPIO_Init+0x238>)
 8003e7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e86:	4a29      	ldr	r2, [pc, #164]	; (8003f2c <HAL_GPIO_Init+0x23c>)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <HAL_GPIO_Init+0x240>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d052      	beq.n	8003f58 <HAL_GPIO_Init+0x268>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <HAL_GPIO_Init+0x244>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_GPIO_Init+0x22e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <HAL_GPIO_Init+0x248>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02b      	beq.n	8003f1a <HAL_GPIO_Init+0x22a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_GPIO_Init+0x24c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d025      	beq.n	8003f16 <HAL_GPIO_Init+0x226>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_GPIO_Init+0x250>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01f      	beq.n	8003f12 <HAL_GPIO_Init+0x222>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <HAL_GPIO_Init+0x254>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d019      	beq.n	8003f0e <HAL_GPIO_Init+0x21e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <HAL_GPIO_Init+0x258>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_GPIO_Init+0x21a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_GPIO_Init+0x25c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00d      	beq.n	8003f06 <HAL_GPIO_Init+0x216>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_GPIO_Init+0x260>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <HAL_GPIO_Init+0x212>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_GPIO_Init+0x264>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_GPIO_Init+0x20e>
 8003efa:	2309      	movs	r3, #9
 8003efc:	e02d      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003efe:	230a      	movs	r3, #10
 8003f00:	e02b      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e029      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e027      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	e025      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e023      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e021      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e01f      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e01d      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e01b      	b.n	8003f5a <HAL_GPIO_Init+0x26a>
 8003f22:	bf00      	nop
 8003f24:	58000080 	.word	0x58000080
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	58000400 	.word	0x58000400
 8003f30:	58020000 	.word	0x58020000
 8003f34:	58020400 	.word	0x58020400
 8003f38:	58020800 	.word	0x58020800
 8003f3c:	58020c00 	.word	0x58020c00
 8003f40:	58021000 	.word	0x58021000
 8003f44:	58021400 	.word	0x58021400
 8003f48:	58021800 	.word	0x58021800
 8003f4c:	58021c00 	.word	0x58021c00
 8003f50:	58022000 	.word	0x58022000
 8003f54:	58022400 	.word	0x58022400
 8003f58:	2300      	movs	r3, #0
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	f002 0203 	and.w	r2, r2, #3
 8003f60:	0092      	lsls	r2, r2, #2
 8003f62:	4093      	lsls	r3, r2
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f6a:	4938      	ldr	r1, [pc, #224]	; (800404c <HAL_GPIO_Init+0x35c>)
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	3302      	adds	r3, #2
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4013      	ands	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	f47f ae63 	bne.w	8003d04 <HAL_GPIO_Init+0x14>
  }
}
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	3724      	adds	r7, #36	; 0x24
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	58000400 	.word	0x58000400

08004050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
 800405c:	4613      	mov	r3, r2
 800405e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004060:	787b      	ldrb	r3, [r7, #1]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800406c:	e003      	b.n	8004076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800406e:	887b      	ldrh	r3, [r7, #2]
 8004070:	041a      	lsls	r2, r3, #16
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	619a      	str	r2, [r3, #24]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800409c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc ffbd 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00a      	beq.n	80040e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e01f      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e01d      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	490f      	ldr	r1, [pc, #60]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040f2:	f7fd fdcd 	bl	8001c90 <HAL_GetTick>
 80040f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040f8:	e009      	b.n	800410e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040fa:	f7fd fdc9 	bl	8001c90 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004108:	d901      	bls.n	800410e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e007      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d1ee      	bne.n	80040fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	58024800 	.word	0x58024800

0800412c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f000 bc1d 	b.w	800497a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8087 	beq.w	800425c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414e:	4b99      	ldr	r3, [pc, #612]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004158:	4b96      	ldr	r3, [pc, #600]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004160:	2b10      	cmp	r3, #16
 8004162:	d007      	beq.n	8004174 <HAL_RCC_OscConfig+0x48>
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	2b18      	cmp	r3, #24
 8004168:	d110      	bne.n	800418c <HAL_RCC_OscConfig+0x60>
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d10b      	bne.n	800418c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d06c      	beq.n	800425a <HAL_RCC_OscConfig+0x12e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d168      	bne.n	800425a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e3f6      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x78>
 8004196:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a86      	ldr	r2, [pc, #536]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e02e      	b.n	8004202 <HAL_RCC_OscConfig+0xd6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCC_OscConfig+0x9a>
 80041ac:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b7e      	ldr	r3, [pc, #504]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e01d      	b.n	8004202 <HAL_RCC_OscConfig+0xd6>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ce:	d10c      	bne.n	80041ea <HAL_RCC_OscConfig+0xbe>
 80041d0:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a77      	ldr	r2, [pc, #476]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b75      	ldr	r3, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a74      	ldr	r2, [pc, #464]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e00b      	b.n	8004202 <HAL_RCC_OscConfig+0xd6>
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a71      	ldr	r2, [pc, #452]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d013      	beq.n	8004232 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fd fd41 	bl	8001c90 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004212:	f7fd fd3d 	bl	8001c90 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b64      	cmp	r3, #100	; 0x64
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e3aa      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004224:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0xe6>
 8004230:	e014      	b.n	800425c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fd fd2d 	bl	8001c90 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800423a:	f7fd fd29 	bl	8001c90 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e396      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x10e>
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80cb 	beq.w	8004400 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426a:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004272:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004274:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_RCC_OscConfig+0x164>
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b18      	cmp	r3, #24
 8004284:	d156      	bne.n	8004334 <HAL_RCC_OscConfig+0x208>
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d151      	bne.n	8004334 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004290:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x17c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e368      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 0219 	bic.w	r2, r3, #25
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	493f      	ldr	r1, [pc, #252]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ba:	f7fd fce9 	bl	8001c90 <HAL_GetTick>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c2:	f7fd fce5 	bl	8001c90 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e352      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	f7fd fce2 	bl	8001ca8 <HAL_GetREVID>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d817      	bhi.n	800431e <HAL_RCC_OscConfig+0x1f2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d108      	bne.n	8004308 <HAL_RCC_OscConfig+0x1dc>
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004306:	e07b      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	4927      	ldr	r1, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800431c:	e070      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	4921      	ldr	r1, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004332:	e065      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d048      	beq.n	80043ce <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 0219 	bic.w	r2, r3, #25
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	491a      	ldr	r1, [pc, #104]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd fc9f 	bl	8001c90 <HAL_GetTick>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd fc9b 	bl	8001c90 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e308      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	f7fd fc98 	bl	8001ca8 <HAL_GetREVID>
 8004378:	4603      	mov	r3, r0
 800437a:	f241 0203 	movw	r2, #4099	; 0x1003
 800437e:	4293      	cmp	r3, r2
 8004380:	d81a      	bhi.n	80043b8 <HAL_RCC_OscConfig+0x28c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d108      	bne.n	800439c <HAL_RCC_OscConfig+0x270>
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	6053      	str	r3, [r2, #4]
 800439a:	e031      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	4902      	ldr	r1, [pc, #8]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]
 80043b0:	e026      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
 80043b2:	bf00      	nop
 80043b4:	58024400 	.word	0x58024400
 80043b8:	4b9a      	ldr	r3, [pc, #616]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	4997      	ldr	r1, [pc, #604]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	e018      	b.n	8004400 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ce:	4b95      	ldr	r3, [pc, #596]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a94      	ldr	r2, [pc, #592]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fd fc59 	bl	8001c90 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e2:	f7fd fc55 	bl	8001c90 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e2c2      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f4:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a9 	beq.w	8004560 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440e:	4b85      	ldr	r3, [pc, #532]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004416:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004418:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d007      	beq.n	8004434 <HAL_RCC_OscConfig+0x308>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b18      	cmp	r3, #24
 8004428:	d13a      	bne.n	80044a0 <HAL_RCC_OscConfig+0x374>
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d135      	bne.n	80044a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004434:	4b7b      	ldr	r3, [pc, #492]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_OscConfig+0x320>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d001      	beq.n	800444c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e296      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800444c:	f7fd fc2c 	bl	8001ca8 <HAL_GetREVID>
 8004450:	4603      	mov	r3, r0
 8004452:	f241 0203 	movw	r2, #4099	; 0x1003
 8004456:	4293      	cmp	r3, r2
 8004458:	d817      	bhi.n	800448a <HAL_RCC_OscConfig+0x35e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	2b20      	cmp	r3, #32
 8004460:	d108      	bne.n	8004474 <HAL_RCC_OscConfig+0x348>
 8004462:	4b70      	ldr	r3, [pc, #448]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800446a:	4a6e      	ldr	r2, [pc, #440]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800446c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004470:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004472:	e075      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004474:	4b6b      	ldr	r3, [pc, #428]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	069b      	lsls	r3, r3, #26
 8004482:	4968      	ldr	r1, [pc, #416]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004488:	e06a      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800448a:	4b66      	ldr	r3, [pc, #408]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	4962      	ldr	r1, [pc, #392]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800449e:	e05f      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d042      	beq.n	800452e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044a8:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80044ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fbec 	bl	8001c90 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044bc:	f7fd fbe8 	bl	8001c90 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e255      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044ce:	4b55      	ldr	r3, [pc, #340]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044da:	f7fd fbe5 	bl	8001ca8 <HAL_GetREVID>
 80044de:	4603      	mov	r3, r0
 80044e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d817      	bhi.n	8004518 <HAL_RCC_OscConfig+0x3ec>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d108      	bne.n	8004502 <HAL_RCC_OscConfig+0x3d6>
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044f8:	4a4a      	ldr	r2, [pc, #296]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044fe:	6053      	str	r3, [r2, #4]
 8004500:	e02e      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
 8004502:	4b48      	ldr	r3, [pc, #288]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	069b      	lsls	r3, r3, #26
 8004510:	4944      	ldr	r1, [pc, #272]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
 8004516:	e023      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	493f      	ldr	r1, [pc, #252]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	60cb      	str	r3, [r1, #12]
 800452c:	e018      	b.n	8004560 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800452e:	4b3d      	ldr	r3, [pc, #244]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453a:	f7fd fba9 	bl	8001c90 <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004542:	f7fd fba5 	bl	8001c90 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e212      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004554:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1f0      	bne.n	8004542 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d036      	beq.n	80045da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d019      	beq.n	80045a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	4a2a      	ldr	r2, [pc, #168]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004580:	f7fd fb86 	bl	8001c90 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004588:	f7fd fb82 	bl	8001c90 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1ef      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x45c>
 80045a6:	e018      	b.n	80045da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fb6c 	bl	8001c90 <HAL_GetTick>
 80045b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045bc:	f7fd fb68 	bl	8001c90 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1d5      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80045d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d039      	beq.n	800465a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01c      	beq.n	8004628 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045fa:	f7fd fb49 	bl	8001c90 <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004602:	f7fd fb45 	bl	8001c90 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e1b2      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_RCC_OscConfig+0x4f8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x4d6>
 8004620:	e01b      	b.n	800465a <HAL_RCC_OscConfig+0x52e>
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004628:	4b9b      	ldr	r3, [pc, #620]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a9a      	ldr	r2, [pc, #616]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800462e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004632:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004634:	f7fd fb2c 	bl	8001c90 <HAL_GetTick>
 8004638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800463c:	f7fd fb28 	bl	8001c90 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e195      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800464e:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8081 	beq.w	800476a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004668:	4b8c      	ldr	r3, [pc, #560]	; (800489c <HAL_RCC_OscConfig+0x770>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a8b      	ldr	r2, [pc, #556]	; (800489c <HAL_RCC_OscConfig+0x770>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004674:	f7fd fb0c 	bl	8001c90 <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fd fb08 	bl	8001c90 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	; 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e175      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468e:	4b83      	ldr	r3, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x770>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_OscConfig+0x584>
 80046a2:	4b7d      	ldr	r3, [pc, #500]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	e02d      	b.n	800470c <HAL_RCC_OscConfig+0x5e0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCC_OscConfig+0x5a6>
 80046b8:	4b77      	ldr	r3, [pc, #476]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a76      	ldr	r2, [pc, #472]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	4b74      	ldr	r3, [pc, #464]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a73      	ldr	r2, [pc, #460]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	e01c      	b.n	800470c <HAL_RCC_OscConfig+0x5e0>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d10c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c8>
 80046da:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a6e      	ldr	r2, [pc, #440]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	4b6c      	ldr	r3, [pc, #432]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a6b      	ldr	r2, [pc, #428]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e00b      	b.n	800470c <HAL_RCC_OscConfig+0x5e0>
 80046f4:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a67      	ldr	r2, [pc, #412]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a64      	ldr	r2, [pc, #400]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fabc 	bl	8001c90 <HAL_GetTick>
 8004718:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd fab8 	bl	8001c90 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e123      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004732:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ee      	beq.n	800471c <HAL_RCC_OscConfig+0x5f0>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004740:	f7fd faa6 	bl	8001c90 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004746:	e00a      	b.n	800475e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fd faa2 	bl	8001c90 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e10d      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800475e:	4b4e      	ldr	r3, [pc, #312]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1ee      	bne.n	8004748 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8102 	beq.w	8004978 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004774:	4b48      	ldr	r3, [pc, #288]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477c:	2b18      	cmp	r3, #24
 800477e:	f000 80bd 	beq.w	80048fc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b02      	cmp	r3, #2
 8004788:	f040 809e 	bne.w	80048c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a41      	ldr	r2, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd fa7a 	bl	8001c90 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fa76 	bl	8001c90 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0e3      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_RCC_OscConfig+0x774>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	430a      	orrs	r2, r1
 80047d2:	4931      	ldr	r1, [pc, #196]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	628b      	str	r3, [r1, #40]	; 0x28
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	3b01      	subs	r3, #1
 80047de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	3b01      	subs	r3, #1
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	3b01      	subs	r3, #1
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	3b01      	subs	r3, #1
 8004802:	061b      	lsls	r3, r3, #24
 8004804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004808:	4923      	ldr	r1, [pc, #140]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800480e:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	4a21      	ldr	r2, [pc, #132]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800481c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCC_OscConfig+0x778>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004826:	00d2      	lsls	r2, r2, #3
 8004828:	491b      	ldr	r1, [pc, #108]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800482a:	4313      	orrs	r3, r2
 800482c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	f023 020c 	bic.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	4917      	ldr	r1, [pc, #92]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800483c:	4313      	orrs	r3, r2
 800483e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004840:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	f023 0202 	bic.w	r2, r3, #2
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484c:	4912      	ldr	r1, [pc, #72]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004852:	4b11      	ldr	r3, [pc, #68]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004856:	4a10      	ldr	r2, [pc, #64]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	4a07      	ldr	r2, [pc, #28]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004882:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <HAL_RCC_OscConfig+0x76c>)
 8004888:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd f9ff 	bl	8001c90 <HAL_GetTick>
 8004892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004894:	e011      	b.n	80048ba <HAL_RCC_OscConfig+0x78e>
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
 800489c:	58024800 	.word	0x58024800
 80048a0:	fffffc0c 	.word	0xfffffc0c
 80048a4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd f9f2 	bl	8001c90 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e05f      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ba:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f0      	beq.n	80048a8 <HAL_RCC_OscConfig+0x77c>
 80048c6:	e057      	b.n	8004978 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd f9dc 	bl	8001c90 <HAL_GetTick>
 80048d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd f9d8 	bl	8001c90 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e045      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048ee:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x7b0>
 80048fa:	e03d      	b.n	8004978 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <HAL_RCC_OscConfig+0x858>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	2b01      	cmp	r3, #1
 800490e:	d031      	beq.n	8004974 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d12a      	bne.n	8004974 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d122      	bne.n	8004974 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11a      	bne.n	8004974 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	0a5b      	lsrs	r3, r3, #9
 8004942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d111      	bne.n	8004974 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	0c1b      	lsrs	r3, r3, #16
 8004954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d108      	bne.n	8004974 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3730      	adds	r7, #48	; 0x30
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400

08004988 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e19c      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b87      	ldr	r3, [pc, #540]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 020f 	bic.w	r2, r3, #15
 80049b2:	4985      	ldr	r1, [pc, #532]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b83      	ldr	r3, [pc, #524]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e184      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	4b7b      	ldr	r3, [pc, #492]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d908      	bls.n	80049fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049e8:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	4975      	ldr	r1, [pc, #468]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d010      	beq.n	8004a28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	4b70      	ldr	r3, [pc, #448]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d908      	bls.n	8004a28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a16:	4b6d      	ldr	r3, [pc, #436]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	496a      	ldr	r1, [pc, #424]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	4b64      	ldr	r3, [pc, #400]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d908      	bls.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a44:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	495e      	ldr	r1, [pc, #376]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69da      	ldr	r2, [r3, #28]
 8004a66:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d908      	bls.n	8004a84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a72:	4b56      	ldr	r3, [pc, #344]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	4953      	ldr	r1, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d908      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f023 020f 	bic.w	r2, r3, #15
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4947      	ldr	r1, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d055      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004abe:	4b43      	ldr	r3, [pc, #268]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4940      	ldr	r1, [pc, #256]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad8:	4b3c      	ldr	r3, [pc, #240]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d121      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0f6      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d107      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af0:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d115      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0ea      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d107      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b08:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0de      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b18:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d6      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b28:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f023 0207 	bic.w	r2, r3, #7
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4925      	ldr	r1, [pc, #148]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fd f8a9 	bl	8001c90 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b42:	f7fd f8a5 	bl	8001c90 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0be      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d1eb      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d208      	bcs.n	8004b98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b86:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f023 020f 	bic.w	r2, r3, #15
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x244>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d214      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 020f 	bic.w	r2, r3, #15
 8004bae:	4906      	ldr	r1, [pc, #24]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_RCC_ClockConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e086      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x34e>
 8004bc8:	52002000 	.word	0x52002000
 8004bcc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d010      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d208      	bcs.n	8004bfe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bec:	4b3c      	ldr	r3, [pc, #240]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	4939      	ldr	r1, [pc, #228]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	4b34      	ldr	r3, [pc, #208]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d208      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c1a:	4b31      	ldr	r3, [pc, #196]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	492e      	ldr	r1, [pc, #184]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d208      	bcs.n	8004c5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4922      	ldr	r1, [pc, #136]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d010      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d208      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c88:	f000 f844 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	4912      	ldr	r1, [pc, #72]	; (8004ce4 <HAL_RCC_ClockConfig+0x35c>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <HAL_RCC_ClockConfig+0x358>)
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <HAL_RCC_ClockConfig+0x35c>)
 8004cb0:	5cd3      	ldrb	r3, [r2, r3]
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_RCC_ClockConfig+0x360>)
 8004cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x364>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x368>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc ff96 	bl	8001bfc <HAL_InitTick>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	0800d310 	.word	0x0800d310
 8004ce8:	24000004 	.word	0x24000004
 8004cec:	24000000 	.word	0x24000000
 8004cf0:	24000008 	.word	0x24000008

08004cf4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_EnableCSS+0x1c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <HAL_RCC_EnableCSS+0x1c>)
 8004cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d02:	6013      	str	r3, [r2, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	58024400 	.word	0x58024400

08004d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1a:	4bb3      	ldr	r3, [pc, #716]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d22:	2b18      	cmp	r3, #24
 8004d24:	f200 8155 	bhi.w	8004fd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004d95 	.word	0x08004d95
 8004d34:	08004fd3 	.word	0x08004fd3
 8004d38:	08004fd3 	.word	0x08004fd3
 8004d3c:	08004fd3 	.word	0x08004fd3
 8004d40:	08004fd3 	.word	0x08004fd3
 8004d44:	08004fd3 	.word	0x08004fd3
 8004d48:	08004fd3 	.word	0x08004fd3
 8004d4c:	08004fd3 	.word	0x08004fd3
 8004d50:	08004dbb 	.word	0x08004dbb
 8004d54:	08004fd3 	.word	0x08004fd3
 8004d58:	08004fd3 	.word	0x08004fd3
 8004d5c:	08004fd3 	.word	0x08004fd3
 8004d60:	08004fd3 	.word	0x08004fd3
 8004d64:	08004fd3 	.word	0x08004fd3
 8004d68:	08004fd3 	.word	0x08004fd3
 8004d6c:	08004fd3 	.word	0x08004fd3
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004fd3 	.word	0x08004fd3
 8004d78:	08004fd3 	.word	0x08004fd3
 8004d7c:	08004fd3 	.word	0x08004fd3
 8004d80:	08004fd3 	.word	0x08004fd3
 8004d84:	08004fd3 	.word	0x08004fd3
 8004d88:	08004fd3 	.word	0x08004fd3
 8004d8c:	08004fd3 	.word	0x08004fd3
 8004d90:	08004dc7 	.word	0x08004dc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d94:	4b94      	ldr	r3, [pc, #592]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d009      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004da0:	4b91      	ldr	r3, [pc, #580]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	4a90      	ldr	r2, [pc, #576]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004db2:	e111      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004db4:	4b8d      	ldr	r3, [pc, #564]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004db6:	61bb      	str	r3, [r7, #24]
    break;
 8004db8:	e10e      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004dba:	4b8d      	ldr	r3, [pc, #564]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dbc:	61bb      	str	r3, [r7, #24]
    break;
 8004dbe:	e10b      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dc2:	61bb      	str	r3, [r7, #24]
    break;
 8004dc4:	e108      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dc6:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004dd0:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ddc:	4b82      	ldr	r3, [pc, #520]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004de6:	4b80      	ldr	r3, [pc, #512]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	08db      	lsrs	r3, r3, #3
 8004dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80e1 	beq.w	8004fcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	f000 8083 	beq.w	8004f18 <HAL_RCC_GetSysClockFreq+0x204>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f200 80a1 	bhi.w	8004f5c <HAL_RCC_GetSysClockFreq+0x248>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x114>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d056      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e26:	e099      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e28:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02d      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e34:	4b6c      	ldr	r3, [pc, #432]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	4a6b      	ldr	r2, [pc, #428]	; (8004fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e8e:	e087      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ffc <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e065      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b40      	ldr	r3, [pc, #256]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004efa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	e043      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005004 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f5a:	e021      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f9e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fa0:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	0a5b      	lsrs	r3, r3, #9
 8004fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004faa:	3301      	adds	r3, #1
 8004fac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc4:	ee17 3a90 	vmov	r3, s15
 8004fc8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fca:	e005      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61bb      	str	r3, [r7, #24]
    break;
 8004fd0:	e002      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd4:	61bb      	str	r3, [r7, #24]
    break;
 8004fd6:	bf00      	nop
  }

  return sysclockfreq;
 8004fd8:	69bb      	ldr	r3, [r7, #24]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	03d09000 	.word	0x03d09000
 8004ff0:	003d0900 	.word	0x003d0900
 8004ff4:	017d7840 	.word	0x017d7840
 8004ff8:	46000000 	.word	0x46000000
 8004ffc:	4c742400 	.word	0x4c742400
 8005000:	4a742400 	.word	0x4a742400
 8005004:	4bbebc20 	.word	0x4bbebc20

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800500e:	f7ff fe81 	bl	8004d14 <HAL_RCC_GetSysClockFreq>
 8005012:	4602      	mov	r2, r0
 8005014:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCC_GetHCLKFreq+0x50>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	0a1b      	lsrs	r3, r3, #8
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	490f      	ldr	r1, [pc, #60]	; (800505c <HAL_RCC_GetHCLKFreq+0x54>)
 8005020:	5ccb      	ldrb	r3, [r1, r3]
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <HAL_RCC_GetHCLKFreq+0x50>)
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	4a09      	ldr	r2, [pc, #36]	; (800505c <HAL_RCC_GetHCLKFreq+0x54>)
 8005036:	5cd3      	ldrb	r3, [r2, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <HAL_RCC_GetHCLKFreq+0x58>)
 8005044:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005046:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <HAL_RCC_GetHCLKFreq+0x58>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	58024400 	.word	0x58024400
 800505c:	0800d310 	.word	0x0800d310
 8005060:	24000004 	.word	0x24000004
 8005064:	24000000 	.word	0x24000000

08005068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800506c:	f7ff ffcc 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	4904      	ldr	r1, [pc, #16]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	58024400 	.word	0x58024400
 8005090:	0800d310 	.word	0x0800d310

08005094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005098:	f7ff ffb6 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 800509c:	4602      	mov	r2, r0
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	4904      	ldr	r1, [pc, #16]	; (80050bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80050aa:	5ccb      	ldrb	r3, [r1, r3]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	58024400 	.word	0x58024400
 80050bc:	0800d310 	.word	0x0800d310

080050c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050c8:	2300      	movs	r3, #0
 80050ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050cc:	2300      	movs	r3, #0
 80050ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03f      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050e4:	d02a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050ea:	d824      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f0:	d018      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f6:	d81e      	bhi.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005100:	d007      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005102:	e018      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005104:	4ba3      	ldr	r3, [pc, #652]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	4aa2      	ldr	r2, [pc, #648]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800510a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005110:	e015      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	2102      	movs	r1, #2
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f9d5 	bl	80064c8 <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005122:	e00c      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	2102      	movs	r1, #2
 800512a:	4618      	mov	r0, r3
 800512c:	f001 fa7e 	bl	800662c <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005134:	e003      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
      break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005144:	4b93      	ldr	r3, [pc, #588]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005150:	4990      	ldr	r1, [pc, #576]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	650b      	str	r3, [r1, #80]	; 0x50
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d03d      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	2b04      	cmp	r3, #4
 800516e:	d826      	bhi.n	80051be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	0800518d 	.word	0x0800518d
 800517c:	0800519b 	.word	0x0800519b
 8005180:	080051ad 	.word	0x080051ad
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518c:	4b81      	ldr	r3, [pc, #516]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005198:	e015      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 f991 	bl	80064c8 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051aa:	e00c      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fa3a 	bl	800662c <RCCEx_PLL3_Config>
 80051b8:	4603      	mov	r3, r0
 80051ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
      break;
 80051c2:	e000      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80051c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051cc:	4b71      	ldr	r3, [pc, #452]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	f023 0207 	bic.w	r2, r3, #7
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d8:	496e      	ldr	r1, [pc, #440]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	650b      	str	r3, [r1, #80]	; 0x50
 80051de:	e001      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d042      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f8:	d02b      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fe:	d825      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005200:	2bc0      	cmp	r3, #192	; 0xc0
 8005202:	d028      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005204:	2bc0      	cmp	r3, #192	; 0xc0
 8005206:	d821      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	d016      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800520c:	2b80      	cmp	r3, #128	; 0x80
 800520e:	d81d      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d007      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005218:	e018      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800521a:	4b5e      	ldr	r3, [pc, #376]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a5d      	ldr	r2, [pc, #372]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005226:	e017      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f94a 	bl	80064c8 <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005238:	e00e      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3324      	adds	r3, #36	; 0x24
 800523e:	2100      	movs	r1, #0
 8005240:	4618      	mov	r0, r3
 8005242:	f001 f9f3 	bl	800662c <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800524a:	e005      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	e002      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005252:	bf00      	nop
 8005254:	e000      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005258:	7dfb      	ldrb	r3, [r7, #23]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800525e:	4b4d      	ldr	r3, [pc, #308]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	494a      	ldr	r1, [pc, #296]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	650b      	str	r3, [r1, #80]	; 0x50
 8005270:	e001      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800527e:	2b00      	cmp	r3, #0
 8005280:	d049      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005288:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528c:	d030      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800528e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005292:	d82a      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005294:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005298:	d02c      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800529a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800529e:	d824      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a4:	d018      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80052a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052aa:	d81e      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80052b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b4:	d007      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80052b6:	e018      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052b8:	4b36      	ldr	r3, [pc, #216]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a35      	ldr	r2, [pc, #212]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052c4:	e017      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f8fb 	bl	80064c8 <RCCEx_PLL2_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80052d6:	e00e      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 f9a4 	bl	800662c <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052e8:	e005      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80052f0:	bf00      	nop
 80052f2:	e000      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80052f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f6:	7dfb      	ldrb	r3, [r7, #23]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800530a:	4922      	ldr	r1, [pc, #136]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800530c:	4313      	orrs	r3, r2
 800530e:	658b      	str	r3, [r1, #88]	; 0x58
 8005310:	e001      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531e:	2b00      	cmp	r3, #0
 8005320:	d04b      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800532c:	d030      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800532e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005332:	d82a      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005338:	d02e      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800533a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800533e:	d824      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005344:	d018      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800534a:	d81e      	bhi.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005354:	d007      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005356:	e018      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005364:	e019      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f001 f8ab 	bl	80064c8 <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005376:	e010      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3324      	adds	r3, #36	; 0x24
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f001 f954 	bl	800662c <RCCEx_PLL3_Config>
 8005384:	4603      	mov	r3, r0
 8005386:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005388:	e007      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
      break;
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005394:	58024400 	.word	0x58024400
      break;
 8005398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053a0:	4b99      	ldr	r3, [pc, #612]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053ae:	4996      	ldr	r1, [pc, #600]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	658b      	str	r3, [r1, #88]	; 0x58
 80053b4:	e001      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b6:	7dfb      	ldrb	r3, [r7, #23]
 80053b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d032      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ca:	2b30      	cmp	r3, #48	; 0x30
 80053cc:	d01c      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80053ce:	2b30      	cmp	r3, #48	; 0x30
 80053d0:	d817      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d00c      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d813      	bhi.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d10f      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e2:	4b89      	ldr	r3, [pc, #548]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	4a88      	ldr	r2, [pc, #544]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80053ee:	e00e      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 f866 	bl	80064c8 <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005400:	e005      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
      break;
 8005406:	e002      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800540c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005414:	4b7c      	ldr	r3, [pc, #496]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005420:	4979      	ldr	r1, [pc, #484]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005422:	4313      	orrs	r3, r2
 8005424:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005426:	e001      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d047      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005440:	d030      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005446:	d82a      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800544c:	d02c      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800544e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005452:	d824      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005458:	d018      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545e:	d81e      	bhi.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d007      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800546a:	e018      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800546c:	4b66      	ldr	r3, [pc, #408]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	4a65      	ldr	r2, [pc, #404]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005478:	e017      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f821 	bl	80064c8 <RCCEx_PLL2_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800548a:	e00e      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3324      	adds	r3, #36	; 0x24
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f8ca 	bl	800662c <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800549c:	e005      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
      break;
 80054a2:	e002      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80054a4:	bf00      	nop
 80054a6:	e000      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80054a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054b0:	4b55      	ldr	r3, [pc, #340]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054bc:	4952      	ldr	r1, [pc, #328]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	650b      	str	r3, [r1, #80]	; 0x50
 80054c2:	e001      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d049      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054dc:	d02e      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80054de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054e2:	d828      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80054e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e8:	d02a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80054ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054ee:	d822      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80054f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054f4:	d026      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80054f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054fa:	d81c      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80054fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005500:	d010      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005506:	d816      	bhi.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01d      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d111      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 ffd5 	bl	80064c8 <RCCEx_PLL2_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005522:	e012      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3324      	adds	r3, #36	; 0x24
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f87e 	bl	800662c <RCCEx_PLL3_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005534:	e009      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
      break;
 800553a:	e006      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800553c:	bf00      	nop
 800553e:	e004      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005540:	bf00      	nop
 8005542:	e002      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005544:	bf00      	nop
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554a:	7dfb      	ldrb	r3, [r7, #23]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005550:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005554:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555c:	492a      	ldr	r1, [pc, #168]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800555e:	4313      	orrs	r3, r2
 8005560:	650b      	str	r3, [r1, #80]	; 0x50
 8005562:	e001      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d04d      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800557a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800557e:	d02e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005584:	d828      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d02a      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d822      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005596:	d026      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800559c:	d81c      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800559e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a2:	d010      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80055a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a8:	d816      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01d      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80055ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b2:	d111      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 ff84 	bl	80064c8 <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055c4:	e012      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3324      	adds	r3, #36	; 0x24
 80055ca:	2101      	movs	r1, #1
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f82d 	bl	800662c <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055d6:	e009      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	75fb      	strb	r3, [r7, #23]
      break;
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80055de:	bf00      	nop
 80055e0:	e004      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80055ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005602:	4313      	orrs	r3, r2
 8005604:	658b      	str	r3, [r1, #88]	; 0x58
 8005606:	e003      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005624:	d00e      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562a:	d814      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005634:	d10f      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005636:	4baf      	ldr	r3, [pc, #700]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	4aae      	ldr	r2, [pc, #696]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800563c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005640:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005642:	e00c      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	2101      	movs	r1, #1
 800564a:	4618      	mov	r0, r3
 800564c:	f000 ff3c 	bl	80064c8 <RCCEx_PLL2_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
      break;
 800565a:	e000      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800565c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005664:	4ba3      	ldr	r3, [pc, #652]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005670:	49a0      	ldr	r1, [pc, #640]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005672:	4313      	orrs	r3, r2
 8005674:	650b      	str	r3, [r1, #80]	; 0x50
 8005676:	e001      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d032      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	2b03      	cmp	r3, #3
 800568e:	d81b      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005690:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005696:	bf00      	nop
 8005698:	080056cf 	.word	0x080056cf
 800569c:	080056a9 	.word	0x080056a9
 80056a0:	080056b7 	.word	0x080056b7
 80056a4:	080056cf 	.word	0x080056cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a8:	4b92      	ldr	r3, [pc, #584]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4a91      	ldr	r2, [pc, #580]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056b4:	e00c      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 ff03 	bl	80064c8 <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056c6:	e003      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	75fb      	strb	r3, [r7, #23]
      break;
 80056cc:	e000      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80056ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056d6:	4b87      	ldr	r3, [pc, #540]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	f023 0203 	bic.w	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	4984      	ldr	r1, [pc, #528]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056e8:	e001      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8086 	beq.w	8005808 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fc:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7d      	ldr	r2, [pc, #500]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005708:	f7fc fac2 	bl	8001c90 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800570e:	e009      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fc fabe 	bl	8001c90 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	; 0x64
 800571c:	d902      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	75fb      	strb	r3, [r7, #23]
        break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005724:	4b74      	ldr	r3, [pc, #464]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d166      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005736:	4b6f      	ldr	r3, [pc, #444]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005738:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005740:	4053      	eors	r3, r2
 8005742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005746:	2b00      	cmp	r3, #0
 8005748:	d013      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005752:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005754:	4b67      	ldr	r3, [pc, #412]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a66      	ldr	r2, [pc, #408]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005760:	4b64      	ldr	r3, [pc, #400]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	4a63      	ldr	r2, [pc, #396]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800576c:	4a61      	ldr	r2, [pc, #388]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577c:	d115      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fc fa87 	bl	8001c90 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005784:	e00b      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fc fa83 	bl	8001c90 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d902      	bls.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	75fb      	strb	r3, [r7, #23]
            break;
 800579c:	e005      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800579e:	4b55      	ldr	r3, [pc, #340]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0ed      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d126      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057be:	d10d      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80057c0:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ce:	0919      	lsrs	r1, r3, #4
 80057d0:	4b4a      	ldr	r3, [pc, #296]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80057d2:	400b      	ands	r3, r1
 80057d4:	4947      	ldr	r1, [pc, #284]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	610b      	str	r3, [r1, #16]
 80057da:	e005      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80057dc:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	4a44      	ldr	r2, [pc, #272]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057e6:	6113      	str	r3, [r2, #16]
 80057e8:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f6:	493f      	ldr	r1, [pc, #252]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	670b      	str	r3, [r1, #112]	; 0x70
 80057fc:	e004      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	75bb      	strb	r3, [r7, #22]
 8005802:	e001      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8085 	beq.w	8005920 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581a:	2b28      	cmp	r3, #40	; 0x28
 800581c:	d866      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005901 	.word	0x08005901
 8005828:	080058ed 	.word	0x080058ed
 800582c:	080058ed 	.word	0x080058ed
 8005830:	080058ed 	.word	0x080058ed
 8005834:	080058ed 	.word	0x080058ed
 8005838:	080058ed 	.word	0x080058ed
 800583c:	080058ed 	.word	0x080058ed
 8005840:	080058ed 	.word	0x080058ed
 8005844:	080058c9 	.word	0x080058c9
 8005848:	080058ed 	.word	0x080058ed
 800584c:	080058ed 	.word	0x080058ed
 8005850:	080058ed 	.word	0x080058ed
 8005854:	080058ed 	.word	0x080058ed
 8005858:	080058ed 	.word	0x080058ed
 800585c:	080058ed 	.word	0x080058ed
 8005860:	080058ed 	.word	0x080058ed
 8005864:	080058db 	.word	0x080058db
 8005868:	080058ed 	.word	0x080058ed
 800586c:	080058ed 	.word	0x080058ed
 8005870:	080058ed 	.word	0x080058ed
 8005874:	080058ed 	.word	0x080058ed
 8005878:	080058ed 	.word	0x080058ed
 800587c:	080058ed 	.word	0x080058ed
 8005880:	080058ed 	.word	0x080058ed
 8005884:	08005901 	.word	0x08005901
 8005888:	080058ed 	.word	0x080058ed
 800588c:	080058ed 	.word	0x080058ed
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058ed 	.word	0x080058ed
 8005898:	080058ed 	.word	0x080058ed
 800589c:	080058ed 	.word	0x080058ed
 80058a0:	080058ed 	.word	0x080058ed
 80058a4:	08005901 	.word	0x08005901
 80058a8:	080058ed 	.word	0x080058ed
 80058ac:	080058ed 	.word	0x080058ed
 80058b0:	080058ed 	.word	0x080058ed
 80058b4:	080058ed 	.word	0x080058ed
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	080058ed 	.word	0x080058ed
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	08005901 	.word	0x08005901
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fdfa 	bl	80064c8 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80058d8:	e013      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3324      	adds	r3, #36	; 0x24
 80058de:	2101      	movs	r1, #1
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fea3 	bl	800662c <RCCEx_PLL3_Config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80058ea:	e00a      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	e007      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	58024800 	.word	0x58024800
 80058fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8005900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005908:	4b96      	ldr	r3, [pc, #600]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005914:	4993      	ldr	r1, [pc, #588]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	654b      	str	r3, [r1, #84]	; 0x54
 800591a:	e001      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d038      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005930:	2b05      	cmp	r3, #5
 8005932:	d821      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	0800597f 	.word	0x0800597f
 8005940:	08005955 	.word	0x08005955
 8005944:	08005967 	.word	0x08005967
 8005948:	0800597f 	.word	0x0800597f
 800594c:	0800597f 	.word	0x0800597f
 8005950:	0800597f 	.word	0x0800597f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	2101      	movs	r1, #1
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fdb4 	bl	80064c8 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005964:	e00c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	2101      	movs	r1, #1
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fe5d 	bl	800662c <RCCEx_PLL3_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
      break;
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800597e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005986:	4b77      	ldr	r3, [pc, #476]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f023 0207 	bic.w	r2, r3, #7
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005992:	4974      	ldr	r1, [pc, #464]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	654b      	str	r3, [r1, #84]	; 0x54
 8005998:	e001      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d03a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d821      	bhi.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059ff 	.word	0x080059ff
 80059c0:	080059d5 	.word	0x080059d5
 80059c4:	080059e7 	.word	0x080059e7
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ff 	.word	0x080059ff
 80059d0:	080059ff 	.word	0x080059ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fd74 	bl	80064c8 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80059e4:	e00c      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3324      	adds	r3, #36	; 0x24
 80059ea:	2101      	movs	r1, #1
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fe1d 	bl	800662c <RCCEx_PLL3_Config>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80059f6:	e003      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
      break;
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80059fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a06:	4b57      	ldr	r3, [pc, #348]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0a:	f023 0207 	bic.w	r2, r3, #7
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	4953      	ldr	r1, [pc, #332]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	658b      	str	r3, [r1, #88]	; 0x58
 8005a1a:	e001      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d04b      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a36:	d02e      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a3c:	d828      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d02a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d822      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005a4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a4e:	d026      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005a50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a54:	d81c      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5a:	d010      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a60:	d816      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01d      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6a:	d111      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	2100      	movs	r1, #0
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fd28 	bl	80064c8 <RCCEx_PLL2_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a7c:	e012      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3324      	adds	r3, #36	; 0x24
 8005a82:	2102      	movs	r1, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fdd1 	bl	800662c <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a8e:	e009      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	e006      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005a96:	bf00      	nop
 8005a98:	e004      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aaa:	4b2e      	ldr	r3, [pc, #184]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	492a      	ldr	r1, [pc, #168]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	654b      	str	r3, [r1, #84]	; 0x54
 8005abe:	e001      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d04d      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ada:	d02e      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005adc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ae0:	d828      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d02a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aec:	d822      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005aee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005af2:	d026      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005af8:	d81c      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005afe:	d010      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b04:	d816      	bhi.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01d      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0e:	d111      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	2100      	movs	r1, #0
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fcd6 	bl	80064c8 <RCCEx_PLL2_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b20:	e012      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3324      	adds	r3, #36	; 0x24
 8005b26:	2102      	movs	r1, #2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fd7f 	bl	800662c <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005b32:	e009      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	75fb      	strb	r3, [r7, #23]
      break;
 8005b38:	e006      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005b3a:	bf00      	nop
 8005b3c:	e004      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005b3e:	bf00      	nop
 8005b40:	e002      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005b42:	bf00      	nop
 8005b44:	e000      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005b46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b5c:	4901      	ldr	r1, [pc, #4]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	658b      	str	r3, [r1, #88]	; 0x58
 8005b62:	e003      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005b64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	7dfb      	ldrb	r3, [r7, #23]
 8005b6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d04b      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b82:	d02e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005b84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b88:	d828      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8e:	d02a      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b94:	d822      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005b96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b9a:	d026      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005b9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ba0:	d81c      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ba6:	d010      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bac:	d816      	bhi.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01d      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fc82 	bl	80064c8 <RCCEx_PLL2_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005bc8:	e012      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3324      	adds	r3, #36	; 0x24
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd2b 	bl	800662c <RCCEx_PLL3_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005bda:	e009      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]
      break;
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005be2:	bf00      	nop
 8005be4:	e004      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005be6:	bf00      	nop
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005bf6:	4b9d      	ldr	r3, [pc, #628]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c04:	4999      	ldr	r1, [pc, #612]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	658b      	str	r3, [r1, #88]	; 0x58
 8005c0a:	e001      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01a      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c26:	d10a      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3324      	adds	r3, #36	; 0x24
 8005c2c:	2102      	movs	r1, #2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fcfc 	bl	800662c <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005c3e:	4b8b      	ldr	r3, [pc, #556]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4c:	4987      	ldr	r1, [pc, #540]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d01a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c68:	d10a      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3324      	adds	r3, #36	; 0x24
 8005c6e:	2102      	movs	r1, #2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fcdb 	bl	800662c <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c80:	4b7a      	ldr	r3, [pc, #488]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c8e:	4977      	ldr	r1, [pc, #476]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d034      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ca6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005caa:	d01d      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb0:	d817      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cba:	d009      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fbff 	bl	80064c8 <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005cce:	e00c      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fca8 	bl	800662c <RCCEx_PLL3_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005ce0:	e003      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cf0:	4b5e      	ldr	r3, [pc, #376]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cfe:	495b      	ldr	r1, [pc, #364]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	658b      	str	r3, [r1, #88]	; 0x58
 8005d04:	e001      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d033      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d20:	d01c      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005d22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d26:	d816      	bhi.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005d2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d32:	d007      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005d34:	e00f      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d36:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	4a4c      	ldr	r2, [pc, #304]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d42:	e00c      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	2101      	movs	r1, #1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fc6e 	bl	800662c <RCCEx_PLL3_Config>
 8005d50:	4603      	mov	r3, r0
 8005d52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005d54:	e003      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d72:	493e      	ldr	r1, [pc, #248]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	654b      	str	r3, [r1, #84]	; 0x54
 8005d78:	e001      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d029      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d96:	d007      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005d98:	e00f      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d9a:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	4a33      	ldr	r2, [pc, #204]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005da6:	e00b      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	3304      	adds	r3, #4
 8005dac:	2102      	movs	r1, #2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fb8a 	bl	80064c8 <RCCEx_PLL2_Config>
 8005db4:	4603      	mov	r3, r0
 8005db6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005db8:	e002      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	4926      	ldr	r1, [pc, #152]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dd8:	e001      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3324      	adds	r3, #36	; 0x24
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fc1b 	bl	800662c <RCCEx_PLL3_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d033      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e14:	d017      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1a:	d811      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e20:	d013      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e26:	d80b      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d106      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e32:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	4a0d      	ldr	r2, [pc, #52]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005e3e:	e007      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
      break;
 8005e44:	e004      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005e46:	bf00      	nop
 8005e48:	e002      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e62:	4902      	ldr	r1, [pc, #8]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	654b      	str	r3, [r1, #84]	; 0x54
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e80:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	492e      	ldr	r1, [pc, #184]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e9e:	4b2a      	ldr	r3, [pc, #168]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eac:	4926      	ldr	r1, [pc, #152]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eca:	491f      	ldr	r1, [pc, #124]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ee2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ee6:	6113      	str	r3, [r2, #16]
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ef2:	4915      	ldr	r1, [pc, #84]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da08      	bge.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0c:	490e      	ldr	r1, [pc, #56]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005f32:	7dbb      	ldrb	r3, [r7, #22]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	58024400 	.word	0x58024400

08005f4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f50:	f7ff f85a 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	091b      	lsrs	r3, r3, #4
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4904      	ldr	r1, [pc, #16]	; (8005f74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	58024400 	.word	0x58024400
 8005f74:	0800d310 	.word	0x0800d310

08005f78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b089      	sub	sp, #36	; 0x24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f80:	4ba1      	ldr	r3, [pc, #644]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f8a:	4b9f      	ldr	r3, [pc, #636]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	0b1b      	lsrs	r3, r3, #12
 8005f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f96:	4b9c      	ldr	r3, [pc, #624]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005fa2:	4b99      	ldr	r3, [pc, #612]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	08db      	lsrs	r3, r3, #3
 8005fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8111 	beq.w	80061e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	f000 8083 	beq.w	80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f200 80a1 	bhi.w	8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d056      	beq.n	8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005fe2:	e099      	b.n	8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe4:	4b88      	ldr	r3, [pc, #544]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d02d      	beq.n	800604c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ff0:	4b85      	ldr	r3, [pc, #532]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	08db      	lsrs	r3, r3, #3
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	4a84      	ldr	r2, [pc, #528]	; (800620c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8006000:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b7b      	ldr	r3, [pc, #492]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a03 	vldr	s12, [r7, #12]
 800602e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800604a:	e087      	b.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006072:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800608e:	e065      	b.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b59      	ldr	r3, [pc, #356]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d2:	e043      	b.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800621c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b48      	ldr	r3, [pc, #288]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006116:	e021      	b.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b37      	ldr	r3, [pc, #220]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a03 	vldr	s12, [r7, #12]
 800613e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800615c:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	0a5b      	lsrs	r3, r3, #9
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006176:	edd7 6a07 	vldr	s13, [r7, #28]
 800617a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006182:	ee17 2a90 	vmov	r2, s15
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800618a:	4b1f      	ldr	r3, [pc, #124]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b0:	ee17 2a90 	vmov	r2, s15
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061b8:	4b13      	ldr	r3, [pc, #76]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	0e1b      	lsrs	r3, r3, #24
 80061be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061de:	ee17 2a90 	vmov	r2, s15
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061e6:	e008      	b.n	80061fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]
}
 80061fa:	bf00      	nop
 80061fc:	3724      	adds	r7, #36	; 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	58024400 	.word	0x58024400
 800620c:	03d09000 	.word	0x03d09000
 8006210:	46000000 	.word	0x46000000
 8006214:	4c742400 	.word	0x4c742400
 8006218:	4a742400 	.word	0x4a742400
 800621c:	4bbebc20 	.word	0x4bbebc20

08006220 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	; 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006228:	4ba1      	ldr	r3, [pc, #644]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006232:	4b9f      	ldr	r3, [pc, #636]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	0d1b      	lsrs	r3, r3, #20
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800623e:	4b9c      	ldr	r3, [pc, #624]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800624a:	4b99      	ldr	r3, [pc, #612]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8111 	beq.w	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b02      	cmp	r3, #2
 8006272:	f000 8083 	beq.w	800637c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b02      	cmp	r3, #2
 800627a:	f200 80a1 	bhi.w	80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d056      	beq.n	8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800628a:	e099      	b.n	80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800628c:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02d      	beq.n	80062f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006298:	4b85      	ldr	r3, [pc, #532]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	4a84      	ldr	r2, [pc, #528]	; (80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b7b      	ldr	r3, [pc, #492]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062f2:	e087      	b.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006336:	e065      	b.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800637a:	e043      	b.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063be:	e021      	b.n	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006402:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006404:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800641e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642a:	ee17 2a90 	vmov	r2, s15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800644c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006458:	ee17 2a90 	vmov	r2, s15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800647a:	edd7 6a07 	vldr	s13, [r7, #28]
 800647e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006486:	ee17 2a90 	vmov	r2, s15
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800648e:	e008      	b.n	80064a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]
}
 80064a2:	bf00      	nop
 80064a4:	3724      	adds	r7, #36	; 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	58024400 	.word	0x58024400
 80064b4:	03d09000 	.word	0x03d09000
 80064b8:	46000000 	.word	0x46000000
 80064bc:	4c742400 	.word	0x4c742400
 80064c0:	4a742400 	.word	0x4a742400
 80064c4:	4bbebc20 	.word	0x4bbebc20

080064c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064d6:	4b53      	ldr	r3, [pc, #332]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d101      	bne.n	80064e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e099      	b.n	800661a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064e6:	4b4f      	ldr	r3, [pc, #316]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a4e      	ldr	r2, [pc, #312]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f2:	f7fb fbcd 	bl	8001c90 <HAL_GetTick>
 80064f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064f8:	e008      	b.n	800650c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80064fa:	f7fb fbc9 	bl	8001c90 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e086      	b.n	800661a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800650c:	4b45      	ldr	r3, [pc, #276]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1f0      	bne.n	80064fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006518:	4b42      	ldr	r3, [pc, #264]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	031b      	lsls	r3, r3, #12
 8006526:	493f      	ldr	r1, [pc, #252]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006528:	4313      	orrs	r3, r2
 800652a:	628b      	str	r3, [r1, #40]	; 0x28
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	3b01      	subs	r3, #1
 8006532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	3b01      	subs	r3, #1
 800653c:	025b      	lsls	r3, r3, #9
 800653e:	b29b      	uxth	r3, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	3b01      	subs	r3, #1
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	3b01      	subs	r3, #1
 8006556:	061b      	lsls	r3, r3, #24
 8006558:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800655c:	4931      	ldr	r1, [pc, #196]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006562:	4b30      	ldr	r3, [pc, #192]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	492d      	ldr	r1, [pc, #180]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006570:	4313      	orrs	r3, r2
 8006572:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006574:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	f023 0220 	bic.w	r2, r3, #32
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4928      	ldr	r1, [pc, #160]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006586:	4b27      	ldr	r3, [pc, #156]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	4a26      	ldr	r2, [pc, #152]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 800658c:	f023 0310 	bic.w	r3, r3, #16
 8006590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 8006594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <RCCEx_PLL2_Config+0x160>)
 8006598:	4013      	ands	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	69d2      	ldr	r2, [r2, #28]
 800659e:	00d2      	lsls	r2, r2, #3
 80065a0:	4920      	ldr	r1, [pc, #128]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	4a1e      	ldr	r2, [pc, #120]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065ac:	f043 0310 	orr.w	r3, r3, #16
 80065b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d106      	bne.n	80065c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065b8:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	4a19      	ldr	r2, [pc, #100]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065c4:	e00f      	b.n	80065e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d106      	bne.n	80065da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065d8:	e005      	b.n	80065e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065da:	4b12      	ldr	r3, [pc, #72]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	4a11      	ldr	r2, [pc, #68]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f2:	f7fb fb4d 	bl	8001c90 <HAL_GetTick>
 80065f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065f8:	e008      	b.n	800660c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80065fa:	f7fb fb49 	bl	8001c90 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <RCCEx_PLL2_Config+0x15c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	58024400 	.word	0x58024400
 8006628:	ffff0007 	.word	0xffff0007

0800662c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800663a:	4b53      	ldr	r3, [pc, #332]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b03      	cmp	r3, #3
 8006644:	d101      	bne.n	800664a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e099      	b.n	800677e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800664a:	4b4f      	ldr	r3, [pc, #316]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a4e      	ldr	r2, [pc, #312]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006656:	f7fb fb1b 	bl	8001c90 <HAL_GetTick>
 800665a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800665c:	e008      	b.n	8006670 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800665e:	f7fb fb17 	bl	8001c90 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e086      	b.n	800677e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006670:	4b45      	ldr	r3, [pc, #276]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1f0      	bne.n	800665e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800667c:	4b42      	ldr	r3, [pc, #264]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	051b      	lsls	r3, r3, #20
 800668a:	493f      	ldr	r1, [pc, #252]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800668c:	4313      	orrs	r3, r2
 800668e:	628b      	str	r3, [r1, #40]	; 0x28
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	3b01      	subs	r3, #1
 8006696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	3b01      	subs	r3, #1
 80066a0:	025b      	lsls	r3, r3, #9
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	061b      	lsls	r3, r3, #24
 80066bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066c0:	4931      	ldr	r1, [pc, #196]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066c6:	4b30      	ldr	r3, [pc, #192]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	492d      	ldr	r1, [pc, #180]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066d8:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4928      	ldr	r1, [pc, #160]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	4a26      	ldr	r2, [pc, #152]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <RCCEx_PLL3_Config+0x160>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	69d2      	ldr	r2, [r2, #28]
 8006702:	00d2      	lsls	r2, r2, #3
 8006704:	4920      	ldr	r1, [pc, #128]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d106      	bne.n	800672a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	4a19      	ldr	r2, [pc, #100]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006722:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006728:	e00f      	b.n	800674a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d106      	bne.n	800673e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006730:	4b15      	ldr	r3, [pc, #84]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	4a14      	ldr	r2, [pc, #80]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800673a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800673c:	e005      	b.n	800674a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a11      	ldr	r2, [pc, #68]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006756:	f7fb fa9b 	bl	8001c90 <HAL_GetTick>
 800675a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800675c:	e008      	b.n	8006770 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800675e:	f7fb fa97 	bl	8001c90 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e006      	b.n	800677e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <RCCEx_PLL3_Config+0x15c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	ffff0007 	.word	0xffff0007

08006790 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e0f1      	b.n	8006986 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a78      	ldr	r2, [pc, #480]	; (8006990 <HAL_SPI_Init+0x200>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <HAL_SPI_Init+0x42>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a77      	ldr	r2, [pc, #476]	; (8006994 <HAL_SPI_Init+0x204>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00a      	beq.n	80067d2 <HAL_SPI_Init+0x42>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a75      	ldr	r2, [pc, #468]	; (8006998 <HAL_SPI_Init+0x208>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d005      	beq.n	80067d2 <HAL_SPI_Init+0x42>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d901      	bls.n	80067d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0d9      	b.n	8006986 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 ff82 	bl	80076dc <SPI_GetPacketSize>
 80067d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6c      	ldr	r2, [pc, #432]	; (8006990 <HAL_SPI_Init+0x200>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00c      	beq.n	80067fe <HAL_SPI_Init+0x6e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a6a      	ldr	r2, [pc, #424]	; (8006994 <HAL_SPI_Init+0x204>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <HAL_SPI_Init+0x6e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a69      	ldr	r2, [pc, #420]	; (8006998 <HAL_SPI_Init+0x208>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d002      	beq.n	80067fe <HAL_SPI_Init+0x6e>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d811      	bhi.n	8006822 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006802:	4a63      	ldr	r2, [pc, #396]	; (8006990 <HAL_SPI_Init+0x200>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a61      	ldr	r2, [pc, #388]	; (8006994 <HAL_SPI_Init+0x204>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_SPI_Init+0x8c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a60      	ldr	r2, [pc, #384]	; (8006998 <HAL_SPI_Init+0x208>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d104      	bne.n	8006826 <HAL_SPI_Init+0x96>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b10      	cmp	r3, #16
 8006820:	d901      	bls.n	8006826 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e0af      	b.n	8006986 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fa fe2e 	bl	800149c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006862:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800686c:	d119      	bne.n	80068a2 <HAL_SPI_Init+0x112>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006876:	d103      	bne.n	8006880 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10c      	bne.n	80068a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800688c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006890:	d107      	bne.n	80068a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	431a      	orrs	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	ea42 0103 	orr.w	r1, r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006902:	ea42 0103 	orr.w	r1, r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d113      	bne.n	8006942 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800692c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006940:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0201 	bic.w	r2, r2, #1
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40013000 	.word	0x40013000
 8006994:	40003800 	.word	0x40003800
 8006998:	40003c00 	.word	0x40003c00

0800699c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3330      	adds	r3, #48	; 0x30
 80069b6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c0:	d112      	bne.n	80069e8 <HAL_SPI_Receive+0x4c>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10e      	bne.n	80069e8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2204      	movs	r2, #4
 80069ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069d2:	88fa      	ldrh	r2, [r7, #6]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f978 	bl	8006cd4 <HAL_SPI_TransmitReceive>
 80069e4:	4603      	mov	r3, r0
 80069e6:	e16f      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d101      	bne.n	80069f6 <HAL_SPI_Receive+0x5a>
 80069f2:	2302      	movs	r3, #2
 80069f4:	e168      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069fe:	f7fb f947 	bl	8001c90 <HAL_GetTick>
 8006a02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d007      	beq.n	8006a20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8006a10:	2302      	movs	r3, #2
 8006a12:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a1c:	7ffb      	ldrb	r3, [r7, #31]
 8006a1e:	e153      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_SPI_Receive+0x90>
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a38:	7ffb      	ldrb	r3, [r7, #31]
 8006a3a:	e145      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	88fa      	ldrh	r2, [r7, #6]
 8006a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006a8c:	d107      	bne.n	8006a9e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4b8a      	ldr	r3, [pc, #552]	; (8006cd0 <HAL_SPI_Receive+0x334>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	88f9      	ldrh	r1, [r7, #6]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0201 	orr.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aca:	d107      	bne.n	8006adc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ada:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d948      	bls.n	8006b76 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006ae4:	e040      	b.n	8006b68 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	f248 0308 	movw	r3, #32776	; 0x8008
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d014      	beq.n	8006b20 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b00:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006b1e:	e023      	b.n	8006b68 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b20:	f7fb f8b6 	bl	8001c90 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d803      	bhi.n	8006b38 <HAL_SPI_Receive+0x19c>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Receive+0x1a2>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d114      	bne.n	8006b68 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fcfe 	bl	8007540 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e0af      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1b8      	bne.n	8006ae6 <HAL_SPI_Receive+0x14a>
 8006b74:	e095      	b.n	8006ca2 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b07      	cmp	r3, #7
 8006b7c:	f240 808b 	bls.w	8006c96 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006b80:	e03f      	b.n	8006c02 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d114      	bne.n	8006bba <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	8812      	ldrh	r2, [r2, #0]
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba0:	1c9a      	adds	r2, r3, #2
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006bb8:	e023      	b.n	8006c02 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bba:	f7fb f869 	bl	8001c90 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d803      	bhi.n	8006bd2 <HAL_SPI_Receive+0x236>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d102      	bne.n	8006bd8 <HAL_SPI_Receive+0x23c>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d114      	bne.n	8006c02 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 fcb1 	bl	8007540 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e062      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1b9      	bne.n	8006b82 <HAL_SPI_Receive+0x1e6>
 8006c0e:	e048      	b.n	8006ca2 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d117      	bne.n	8006c4e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2a:	7812      	ldrb	r2, [r2, #0]
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006c4c:	e023      	b.n	8006c96 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4e:	f7fb f81f 	bl	8001c90 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d803      	bhi.n	8006c66 <HAL_SPI_Receive+0x2ca>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Receive+0x2d0>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d114      	bne.n	8006c96 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc67 	bl	8007540 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e018      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1b6      	bne.n	8006c10 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fc4c 	bl	8007540 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006cc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	ffff0000 	.word	0xffff0000

08006cd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	; 0x38
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3320      	adds	r3, #32
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3330      	adds	r3, #48	; 0x30
 8006cf6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_SPI_TransmitReceive+0x32>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e209      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d0e:	f7fa ffbf 	bl	8001c90 <HAL_GetTick>
 8006d12:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006d14:	887b      	ldrh	r3, [r7, #2]
 8006d16:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006d18:	887b      	ldrh	r3, [r7, #2]
 8006d1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d22:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d2a:	7efb      	ldrb	r3, [r7, #27]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d014      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x86>
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d36:	d106      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006d40:	7efb      	ldrb	r3, [r7, #27]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d009      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
 8006d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d58:	e1df      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x98>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x98>
 8006d66:	887b      	ldrh	r3, [r7, #2]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d7e:	e1cc      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d003      	beq.n	8006d94 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2205      	movs	r2, #5
 8006d90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	887a      	ldrh	r2, [r7, #2]
 8006da6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	887a      	ldrh	r2, [r7, #2]
 8006dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	887a      	ldrh	r2, [r7, #2]
 8006dbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	887a      	ldrh	r2, [r7, #2]
 8006dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4b82      	ldr	r3, [pc, #520]	; (8006fe4 <HAL_SPI_TransmitReceive+0x310>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	8879      	ldrh	r1, [r7, #2]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e00:	d107      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d970      	bls.n	8006efc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e1a:	e068      	b.n	8006eee <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d11a      	bne.n	8006e60 <HAL_SPI_TransmitReceive+0x18c>
 8006e2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	1d1a      	adds	r2, r3, #4
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	f248 0308 	movw	r3, #32776	; 0x8008
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01a      	beq.n	8006ea6 <HAL_SPI_TransmitReceive+0x1d2>
 8006e70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d017      	beq.n	8006ea6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e80:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ea4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea6:	f7fa fef3 	bl	8001c90 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_TransmitReceive+0x1ea>
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x1f0>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d114      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fb3b 	bl	8007540 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e115      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006eee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d193      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x148>
 8006ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d190      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x148>
 8006efa:	e0e7      	b.n	80070cc <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	f240 80dd 	bls.w	80070c0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f06:	e066      	b.n	8006fd6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d119      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x276>
 8006f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d016      	beq.n	8006f4a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f20:	881a      	ldrh	r2, [r3, #0]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11a      	bne.n	8006f8e <HAL_SPI_TransmitReceive+0x2ba>
 8006f58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d017      	beq.n	8006f8e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f62:	6a3a      	ldr	r2, [r7, #32]
 8006f64:	8812      	ldrh	r2, [r2, #0]
 8006f66:	b292      	uxth	r2, r2
 8006f68:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f8e:	f7fa fe7f 	bl	8001c90 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d803      	bhi.n	8006fa6 <HAL_SPI_TransmitReceive+0x2d2>
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d102      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x2d8>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d114      	bne.n	8006fd6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fac7 	bl	8007540 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e0a1      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006fd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d195      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x234>
 8006fdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d192      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x234>
 8006fe2:	e073      	b.n	80070cc <HAL_SPI_TransmitReceive+0x3f8>
 8006fe4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d11b      	bne.n	800702e <HAL_SPI_TransmitReceive+0x35a>
 8006ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d018      	beq.n	800702e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3320      	adds	r3, #32
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800702c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b01      	cmp	r3, #1
 800703a:	d11d      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x3a4>
 800703c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01a      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007076:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007078:	f7fa fe0a 	bl	8001c90 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007084:	429a      	cmp	r2, r3
 8007086:	d803      	bhi.n	8007090 <HAL_SPI_TransmitReceive+0x3bc>
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x3c2>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	2b00      	cmp	r3, #0
 8007094:	d114      	bne.n	80070c0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fa52 	bl	8007540 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e02c      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80070c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d190      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x314>
 80070c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d18d      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2200      	movs	r2, #0
 80070d4:	2108      	movs	r1, #8
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fad2 	bl	8007680 <SPI_WaitOnFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e8:	f043 0220 	orr.w	r2, r3, #32
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa24 	bl	8007540 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e001      	b.n	800711a <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800714c:	2300      	movs	r3, #0
 800714e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007156:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3330      	adds	r3, #48	; 0x30
 800715e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d113      	bne.n	8007192 <HAL_SPI_IRQHandler+0x6e>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10e      	bne.n	8007192 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
    handled = 1UL;
 800718e:	2301      	movs	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10f      	bne.n	80071bc <HAL_SPI_IRQHandler+0x98>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d105      	bne.n	80071bc <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
    handled = 1UL;
 80071b8:	2301      	movs	r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <HAL_SPI_IRQHandler+0xc2>
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
    handled = 1UL;
 80071e2:	2301      	movs	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 815a 	bne.w	80074a2 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 808b 	beq.w	8007310 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0208 	orr.w	r2, r2, #8
 8007208:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0210 	orr.w	r2, r2, #16
 8007218:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007228:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0208 	bic.w	r2, r2, #8
 8007238:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d13d      	bne.n	80072c4 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007248:	e036      	b.n	80072b8 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	2b0f      	cmp	r3, #15
 8007250:	d90b      	bls.n	800726a <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800725c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	665a      	str	r2, [r3, #100]	; 0x64
 8007268:	e01d      	b.n	80072a6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	2b07      	cmp	r3, #7
 8007270:	d90b      	bls.n	800728a <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	8812      	ldrh	r2, [r2, #0]
 800727a:	b292      	uxth	r2, r2
 800727c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007282:	1c9a      	adds	r2, r3, #2
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	665a      	str	r2, [r3, #100]	; 0x64
 8007288:	e00d      	b.n	80072a6 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007296:	7812      	ldrb	r2, [r2, #0]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1c2      	bne.n	800724a <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f93b 	bl	8007540 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f90b 	bl	80074f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80072e2:	e0e3      	b.n	80074ac <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d103      	bne.n	80072f2 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f8fa 	bl	80074e4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80072f0:	e0d9      	b.n	80074a6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d103      	bne.n	8007300 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8e9 	bl	80074d0 <HAL_SPI_RxCpltCallback>
    return;
 80072fe:	e0d2      	b.n	80074a6 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007300:	7cfb      	ldrb	r3, [r7, #19]
 8007302:	2b03      	cmp	r3, #3
 8007304:	f040 80cf 	bne.w	80074a6 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8d7 	bl	80074bc <HAL_SPI_TxCpltCallback>
    return;
 800730e:	e0ca      	b.n	80074a6 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <HAL_SPI_IRQHandler+0x212>
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007332:	619a      	str	r2, [r3, #24]

    return;
 8007334:	e0ba      	b.n	80074ac <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 80b5 	beq.w	80074ac <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00f      	beq.n	800736c <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800736a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00f      	beq.n	8007396 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	f043 0201 	orr.w	r2, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007394:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00f      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a6:	f043 0208 	orr.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699a      	ldr	r2, [r3, #24]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073be:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00f      	beq.n	80073ea <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0220 	orr.w	r2, r2, #32
 80073e8:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d05a      	beq.n	80074aa <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6919      	ldr	r1, [r3, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <HAL_SPI_IRQHandler+0x390>)
 8007410:	400b      	ands	r3, r1
 8007412:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800741a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800741e:	d138      	bne.n	8007492 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800742e:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d013      	beq.n	8007460 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	4a1e      	ldr	r2, [pc, #120]	; (80074b8 <HAL_SPI_IRQHandler+0x394>)
 800743e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007444:	4618      	mov	r0, r3
 8007446:	f7fb f8a7 	bl	8002598 <HAL_DMA_Abort_IT>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007464:	2b00      	cmp	r3, #0
 8007466:	d020      	beq.n	80074aa <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746c:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <HAL_SPI_IRQHandler+0x394>)
 800746e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007474:	4618      	mov	r0, r3
 8007476:	f7fb f88f 	bl	8002598 <HAL_DMA_Abort_IT>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d014      	beq.n	80074aa <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007490:	e00b      	b.n	80074aa <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f82c 	bl	80074f8 <HAL_SPI_ErrorCallback>
    return;
 80074a0:	e003      	b.n	80074aa <HAL_SPI_IRQHandler+0x386>
    return;
 80074a2:	bf00      	nop
 80074a4:	e002      	b.n	80074ac <HAL_SPI_IRQHandler+0x388>
    return;
 80074a6:	bf00      	nop
 80074a8:	e000      	b.n	80074ac <HAL_SPI_IRQHandler+0x388>
    return;
 80074aa:	bf00      	nop
  }
}
 80074ac:	3728      	adds	r7, #40	; 0x28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	fffffc94 	.word	0xfffffc94
 80074b8:	0800750d 	.word	0x0800750d

080074bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ffe0 	bl	80074f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007538:	bf00      	nop
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0208 	orr.w	r2, r2, #8
 800755e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0210 	orr.w	r2, r2, #16
 800756e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6919      	ldr	r1, [r3, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b3c      	ldr	r3, [pc, #240]	; (800767c <SPI_CloseTransfer+0x13c>)
 800758c:	400b      	ands	r3, r1
 800758e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800759e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d014      	beq.n	80075d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00f      	beq.n	80075d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	699a      	ldr	r2, [r3, #24]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0220 	orr.w	r2, r2, #32
 80075d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d014      	beq.n	800760c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00f      	beq.n	800760c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f2:	f043 0204 	orr.w	r2, r3, #4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800760a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00f      	beq.n	8007636 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800761c:	f043 0201 	orr.w	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007634:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007646:	f043 0208 	orr.w	r2, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800765e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	fffffc90 	.word	0xfffffc90

08007680 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007690:	e010      	b.n	80076b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007692:	f7fa fafd 	bl	8001c90 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d803      	bhi.n	80076aa <SPI_WaitOnFlagUntilTimeout+0x2a>
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d102      	bne.n	80076b0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e00f      	b.n	80076d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4013      	ands	r3, r2
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	bf0c      	ite	eq
 80076c4:	2301      	moveq	r3, #1
 80076c6:	2300      	movne	r3, #0
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d0df      	beq.n	8007692 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3307      	adds	r3, #7
 80076fa:	08db      	lsrs	r3, r3, #3
 80076fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	fb02 f303 	mul.w	r3, r2, r3
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e042      	b.n	80077aa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7f9 ff80 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2224      	movs	r2, #36	; 0x24
 8007740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f8c3 	bl	80078e0 <UART_SetConfig>
 800775a:	4603      	mov	r3, r0
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e022      	b.n	80077aa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe1f 	bl	80083b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007780:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007790:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fea6 	bl	80084f4 <UART_CheckIdleState>
 80077a8:	4603      	mov	r3, r0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b08a      	sub	sp, #40	; 0x28
 80077b6:	af02      	add	r7, sp, #8
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	f040 8083 	bne.w	80078d4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <HAL_UART_Transmit+0x28>
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e07b      	b.n	80078d6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_UART_Transmit+0x3a>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e074      	b.n	80078d6 <HAL_UART_Transmit+0x124>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2221      	movs	r2, #33	; 0x21
 8007800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007804:	f7fa fa44 	bl	8001c90 <HAL_GetTick>
 8007808:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	88fa      	ldrh	r2, [r7, #6]
 800780e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d108      	bne.n	8007836 <HAL_UART_Transmit+0x84>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d104      	bne.n	8007836 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	e003      	b.n	800783e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007846:	e02c      	b.n	80078a2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2200      	movs	r2, #0
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fe99 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e039      	b.n	80078d6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10b      	bne.n	8007880 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007876:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	3302      	adds	r3, #2
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e007      	b.n	8007890 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	3301      	adds	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1cc      	bne.n	8007848 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	2140      	movs	r1, #64	; 0x40
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fe66 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e006      	b.n	80078d6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e000      	b.n	80078d6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80078d4:	2302      	movs	r3, #2
  }
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078e4:	b092      	sub	sp, #72	; 0x48
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	431a      	orrs	r2, r3
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	431a      	orrs	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	4313      	orrs	r3, r2
 8007906:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4bbe      	ldr	r3, [pc, #760]	; (8007c08 <UART_SetConfig+0x328>)
 8007910:	4013      	ands	r3, r2
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007918:	430b      	orrs	r3, r1
 800791a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4ab3      	ldr	r2, [pc, #716]	; (8007c0c <UART_SetConfig+0x32c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d004      	beq.n	800794c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007948:	4313      	orrs	r3, r2
 800794a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689a      	ldr	r2, [r3, #8]
 8007952:	4baf      	ldr	r3, [pc, #700]	; (8007c10 <UART_SetConfig+0x330>)
 8007954:	4013      	ands	r3, r2
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	6812      	ldr	r2, [r2, #0]
 800795a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795c:	430b      	orrs	r3, r1
 800795e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007966:	f023 010f 	bic.w	r1, r3, #15
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4aa6      	ldr	r2, [pc, #664]	; (8007c14 <UART_SetConfig+0x334>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d177      	bne.n	8007a70 <UART_SetConfig+0x190>
 8007980:	4ba5      	ldr	r3, [pc, #660]	; (8007c18 <UART_SetConfig+0x338>)
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007988:	2b28      	cmp	r3, #40	; 0x28
 800798a:	d86d      	bhi.n	8007a68 <UART_SetConfig+0x188>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <UART_SetConfig+0xb4>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	08007a39 	.word	0x08007a39
 8007998:	08007a69 	.word	0x08007a69
 800799c:	08007a69 	.word	0x08007a69
 80079a0:	08007a69 	.word	0x08007a69
 80079a4:	08007a69 	.word	0x08007a69
 80079a8:	08007a69 	.word	0x08007a69
 80079ac:	08007a69 	.word	0x08007a69
 80079b0:	08007a69 	.word	0x08007a69
 80079b4:	08007a41 	.word	0x08007a41
 80079b8:	08007a69 	.word	0x08007a69
 80079bc:	08007a69 	.word	0x08007a69
 80079c0:	08007a69 	.word	0x08007a69
 80079c4:	08007a69 	.word	0x08007a69
 80079c8:	08007a69 	.word	0x08007a69
 80079cc:	08007a69 	.word	0x08007a69
 80079d0:	08007a69 	.word	0x08007a69
 80079d4:	08007a49 	.word	0x08007a49
 80079d8:	08007a69 	.word	0x08007a69
 80079dc:	08007a69 	.word	0x08007a69
 80079e0:	08007a69 	.word	0x08007a69
 80079e4:	08007a69 	.word	0x08007a69
 80079e8:	08007a69 	.word	0x08007a69
 80079ec:	08007a69 	.word	0x08007a69
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a51 	.word	0x08007a51
 80079f8:	08007a69 	.word	0x08007a69
 80079fc:	08007a69 	.word	0x08007a69
 8007a00:	08007a69 	.word	0x08007a69
 8007a04:	08007a69 	.word	0x08007a69
 8007a08:	08007a69 	.word	0x08007a69
 8007a0c:	08007a69 	.word	0x08007a69
 8007a10:	08007a69 	.word	0x08007a69
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a69 	.word	0x08007a69
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a69 	.word	0x08007a69
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a69 	.word	0x08007a69
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a69 	.word	0x08007a69
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e222      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a40:	2304      	movs	r3, #4
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e21e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a48:	2308      	movs	r3, #8
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e21a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a50:	2310      	movs	r3, #16
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e216      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e212      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e20e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a68:	2380      	movs	r3, #128	; 0x80
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e20a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a69      	ldr	r2, [pc, #420]	; (8007c1c <UART_SetConfig+0x33c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d130      	bne.n	8007adc <UART_SetConfig+0x1fc>
 8007a7a:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <UART_SetConfig+0x338>)
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d826      	bhi.n	8007ad4 <UART_SetConfig+0x1f4>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <UART_SetConfig+0x1ac>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007ac5 	.word	0x08007ac5
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e1ec      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007aac:	2304      	movs	r3, #4
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e1e8      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e1e4      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e1e0      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e1dc      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad2:	e1d8      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007ad4:	2380      	movs	r3, #128	; 0x80
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ada:	e1d4      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a4f      	ldr	r2, [pc, #316]	; (8007c20 <UART_SetConfig+0x340>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d130      	bne.n	8007b48 <UART_SetConfig+0x268>
 8007ae6:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <UART_SetConfig+0x338>)
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d826      	bhi.n	8007b40 <UART_SetConfig+0x260>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <UART_SetConfig+0x218>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e1b6      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e1b2      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e1ae      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e1aa      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b30:	2320      	movs	r3, #32
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e1a6      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b38:	2340      	movs	r3, #64	; 0x40
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e1a2      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e19e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a35      	ldr	r2, [pc, #212]	; (8007c24 <UART_SetConfig+0x344>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d130      	bne.n	8007bb4 <UART_SetConfig+0x2d4>
 8007b52:	4b31      	ldr	r3, [pc, #196]	; (8007c18 <UART_SetConfig+0x338>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d826      	bhi.n	8007bac <UART_SetConfig+0x2cc>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <UART_SetConfig+0x284>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b7d 	.word	0x08007b7d
 8007b68:	08007b85 	.word	0x08007b85
 8007b6c:	08007b8d 	.word	0x08007b8d
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b9d 	.word	0x08007b9d
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b82:	e180      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e17c      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e178      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e174      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e170      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007ba4:	2340      	movs	r3, #64	; 0x40
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e16c      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007bac:	2380      	movs	r3, #128	; 0x80
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e168      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <UART_SetConfig+0x348>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d142      	bne.n	8007c44 <UART_SetConfig+0x364>
 8007bbe:	4b16      	ldr	r3, [pc, #88]	; (8007c18 <UART_SetConfig+0x338>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d838      	bhi.n	8007c3c <UART_SetConfig+0x35c>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x2f0>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be9 	.word	0x08007be9
 8007bd4:	08007bf1 	.word	0x08007bf1
 8007bd8:	08007bf9 	.word	0x08007bf9
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bee:	e14a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bf6:	e146      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e142      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c06:	e13e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007c08:	cfff69f3 	.word	0xcfff69f3
 8007c0c:	58000c00 	.word	0x58000c00
 8007c10:	11fff4ff 	.word	0x11fff4ff
 8007c14:	40011000 	.word	0x40011000
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	40004400 	.word	0x40004400
 8007c20:	40004800 	.word	0x40004800
 8007c24:	40004c00 	.word	0x40004c00
 8007c28:	40005000 	.word	0x40005000
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e128      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007c34:	2340      	movs	r3, #64	; 0x40
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e124      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007c3c:	2380      	movs	r3, #128	; 0x80
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c42:	e120      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4acb      	ldr	r2, [pc, #812]	; (8007f78 <UART_SetConfig+0x698>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d176      	bne.n	8007d3c <UART_SetConfig+0x45c>
 8007c4e:	4bcb      	ldr	r3, [pc, #812]	; (8007f7c <UART_SetConfig+0x69c>)
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c56:	2b28      	cmp	r3, #40	; 0x28
 8007c58:	d86c      	bhi.n	8007d34 <UART_SetConfig+0x454>
 8007c5a:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x380>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d35 	.word	0x08007d35
 8007c68:	08007d35 	.word	0x08007d35
 8007c6c:	08007d35 	.word	0x08007d35
 8007c70:	08007d35 	.word	0x08007d35
 8007c74:	08007d35 	.word	0x08007d35
 8007c78:	08007d35 	.word	0x08007d35
 8007c7c:	08007d35 	.word	0x08007d35
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d35 	.word	0x08007d35
 8007c88:	08007d35 	.word	0x08007d35
 8007c8c:	08007d35 	.word	0x08007d35
 8007c90:	08007d35 	.word	0x08007d35
 8007c94:	08007d35 	.word	0x08007d35
 8007c98:	08007d35 	.word	0x08007d35
 8007c9c:	08007d35 	.word	0x08007d35
 8007ca0:	08007d15 	.word	0x08007d15
 8007ca4:	08007d35 	.word	0x08007d35
 8007ca8:	08007d35 	.word	0x08007d35
 8007cac:	08007d35 	.word	0x08007d35
 8007cb0:	08007d35 	.word	0x08007d35
 8007cb4:	08007d35 	.word	0x08007d35
 8007cb8:	08007d35 	.word	0x08007d35
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d1d 	.word	0x08007d1d
 8007cc4:	08007d35 	.word	0x08007d35
 8007cc8:	08007d35 	.word	0x08007d35
 8007ccc:	08007d35 	.word	0x08007d35
 8007cd0:	08007d35 	.word	0x08007d35
 8007cd4:	08007d35 	.word	0x08007d35
 8007cd8:	08007d35 	.word	0x08007d35
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d35 	.word	0x08007d35
 8007ce8:	08007d35 	.word	0x08007d35
 8007cec:	08007d35 	.word	0x08007d35
 8007cf0:	08007d35 	.word	0x08007d35
 8007cf4:	08007d35 	.word	0x08007d35
 8007cf8:	08007d35 	.word	0x08007d35
 8007cfc:	08007d35 	.word	0x08007d35
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e0bc      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e0b8      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e0b4      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e0b0      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d24:	2320      	movs	r3, #32
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e0ac      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d2c:	2340      	movs	r3, #64	; 0x40
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d32:	e0a8      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d34:	2380      	movs	r3, #128	; 0x80
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3a:	e0a4      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a8f      	ldr	r2, [pc, #572]	; (8007f80 <UART_SetConfig+0x6a0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d130      	bne.n	8007da8 <UART_SetConfig+0x4c8>
 8007d46:	4b8d      	ldr	r3, [pc, #564]	; (8007f7c <UART_SetConfig+0x69c>)
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d826      	bhi.n	8007da0 <UART_SetConfig+0x4c0>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0x478>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d81 	.word	0x08007d81
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e086      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e082      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d86:	e07e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8e:	e07a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d90:	2320      	movs	r3, #32
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d96:	e076      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9e:	e072      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da6:	e06e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a75      	ldr	r2, [pc, #468]	; (8007f84 <UART_SetConfig+0x6a4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d130      	bne.n	8007e14 <UART_SetConfig+0x534>
 8007db2:	4b72      	ldr	r3, [pc, #456]	; (8007f7c <UART_SetConfig+0x69c>)
 8007db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d826      	bhi.n	8007e0c <UART_SetConfig+0x52c>
 8007dbe:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <UART_SetConfig+0x4e4>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007ddd 	.word	0x08007ddd
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	08007ded 	.word	0x08007ded
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e050      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007de4:	2304      	movs	r3, #4
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e04c      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007dec:	2308      	movs	r3, #8
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df2:	e048      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfa:	e044      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e02:	e040      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e04:	2340      	movs	r3, #64	; 0x40
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0a:	e03c      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e0c:	2380      	movs	r3, #128	; 0x80
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e12:	e038      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a5b      	ldr	r2, [pc, #364]	; (8007f88 <UART_SetConfig+0x6a8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d130      	bne.n	8007e80 <UART_SetConfig+0x5a0>
 8007e1e:	4b57      	ldr	r3, [pc, #348]	; (8007f7c <UART_SetConfig+0x69c>)
 8007e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b05      	cmp	r3, #5
 8007e28:	d826      	bhi.n	8007e78 <UART_SetConfig+0x598>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x550>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e59 	.word	0x08007e59
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	2302      	movs	r3, #2
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4e:	e01a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e56:	e016      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e5e:	e012      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e66:	e00e      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6e:	e00a      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e76:	e006      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e78:	2380      	movs	r3, #128	; 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7e:	e002      	b.n	8007e86 <UART_SetConfig+0x5a6>
 8007e80:	2380      	movs	r3, #128	; 0x80
 8007e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a3f      	ldr	r2, [pc, #252]	; (8007f88 <UART_SetConfig+0x6a8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	f040 80f8 	bne.w	8008082 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	dc46      	bgt.n	8007f28 <UART_SetConfig+0x648>
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f2c0 8082 	blt.w	8007fa4 <UART_SetConfig+0x6c4>
 8007ea0:	3b02      	subs	r3, #2
 8007ea2:	2b1e      	cmp	r3, #30
 8007ea4:	d87e      	bhi.n	8007fa4 <UART_SetConfig+0x6c4>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x5cc>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007f2f 	.word	0x08007f2f
 8007eb0:	08007fa5 	.word	0x08007fa5
 8007eb4:	08007f37 	.word	0x08007f37
 8007eb8:	08007fa5 	.word	0x08007fa5
 8007ebc:	08007fa5 	.word	0x08007fa5
 8007ec0:	08007fa5 	.word	0x08007fa5
 8007ec4:	08007f47 	.word	0x08007f47
 8007ec8:	08007fa5 	.word	0x08007fa5
 8007ecc:	08007fa5 	.word	0x08007fa5
 8007ed0:	08007fa5 	.word	0x08007fa5
 8007ed4:	08007fa5 	.word	0x08007fa5
 8007ed8:	08007fa5 	.word	0x08007fa5
 8007edc:	08007fa5 	.word	0x08007fa5
 8007ee0:	08007fa5 	.word	0x08007fa5
 8007ee4:	08007f57 	.word	0x08007f57
 8007ee8:	08007fa5 	.word	0x08007fa5
 8007eec:	08007fa5 	.word	0x08007fa5
 8007ef0:	08007fa5 	.word	0x08007fa5
 8007ef4:	08007fa5 	.word	0x08007fa5
 8007ef8:	08007fa5 	.word	0x08007fa5
 8007efc:	08007fa5 	.word	0x08007fa5
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fa5 	.word	0x08007fa5
 8007f08:	08007fa5 	.word	0x08007fa5
 8007f0c:	08007fa5 	.word	0x08007fa5
 8007f10:	08007fa5 	.word	0x08007fa5
 8007f14:	08007fa5 	.word	0x08007fa5
 8007f18:	08007fa5 	.word	0x08007fa5
 8007f1c:	08007fa5 	.word	0x08007fa5
 8007f20:	08007fa5 	.word	0x08007fa5
 8007f24:	08007f97 	.word	0x08007f97
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	d037      	beq.n	8007f9c <UART_SetConfig+0x6bc>
 8007f2c:	e03a      	b.n	8007fa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f2e:	f7fe f80d 	bl	8005f4c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f34:	e03c      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe f81c 	bl	8005f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f44:	e034      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe f968 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f54:	e02c      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <UART_SetConfig+0x69c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d016      	beq.n	8007f90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <UART_SetConfig+0x69c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	4a07      	ldr	r2, [pc, #28]	; (8007f8c <UART_SetConfig+0x6ac>)
 8007f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f74:	e01c      	b.n	8007fb0 <UART_SetConfig+0x6d0>
 8007f76:	bf00      	nop
 8007f78:	40011400 	.word	0x40011400
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	40007800 	.word	0x40007800
 8007f84:	40007c00 	.word	0x40007c00
 8007f88:	58000c00 	.word	0x58000c00
 8007f8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f90:	4b9d      	ldr	r3, [pc, #628]	; (8008208 <UART_SetConfig+0x928>)
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f94:	e00c      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f96:	4b9d      	ldr	r3, [pc, #628]	; (800820c <UART_SetConfig+0x92c>)
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9a:	e009      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa2:	e005      	b.n	8007fb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 81de 	beq.w	8008374 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	4a94      	ldr	r2, [pc, #592]	; (8008210 <UART_SetConfig+0x930>)
 8007fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	4413      	add	r3, r2
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d305      	bcc.n	8007fe8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d903      	bls.n	8007ff0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007fee:	e1c1      	b.n	8008374 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
 8007ff6:	60fa      	str	r2, [r7, #12]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	4a84      	ldr	r2, [pc, #528]	; (8008210 <UART_SetConfig+0x930>)
 8007ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008002:	b29b      	uxth	r3, r3
 8008004:	2200      	movs	r2, #0
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800800e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008012:	f7f8 fb79 	bl	8000708 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	f04f 0200 	mov.w	r2, #0
 8008022:	f04f 0300 	mov.w	r3, #0
 8008026:	020b      	lsls	r3, r1, #8
 8008028:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800802c:	0202      	lsls	r2, r0, #8
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	6849      	ldr	r1, [r1, #4]
 8008032:	0849      	lsrs	r1, r1, #1
 8008034:	2000      	movs	r0, #0
 8008036:	460c      	mov	r4, r1
 8008038:	4605      	mov	r5, r0
 800803a:	eb12 0804 	adds.w	r8, r2, r4
 800803e:	eb43 0905 	adc.w	r9, r3, r5
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	469a      	mov	sl, r3
 800804a:	4693      	mov	fp, r2
 800804c:	4652      	mov	r2, sl
 800804e:	465b      	mov	r3, fp
 8008050:	4640      	mov	r0, r8
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 fb58 	bl	8000708 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4613      	mov	r3, r2
 800805e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008066:	d308      	bcc.n	800807a <UART_SetConfig+0x79a>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800806e:	d204      	bcs.n	800807a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	e17c      	b.n	8008374 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008080:	e178      	b.n	8008374 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808a:	f040 80c5 	bne.w	8008218 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800808e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008092:	2b20      	cmp	r3, #32
 8008094:	dc48      	bgt.n	8008128 <UART_SetConfig+0x848>
 8008096:	2b00      	cmp	r3, #0
 8008098:	db7b      	blt.n	8008192 <UART_SetConfig+0x8b2>
 800809a:	2b20      	cmp	r3, #32
 800809c:	d879      	bhi.n	8008192 <UART_SetConfig+0x8b2>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x7c4>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	0800812f 	.word	0x0800812f
 80080a8:	08008137 	.word	0x08008137
 80080ac:	08008193 	.word	0x08008193
 80080b0:	08008193 	.word	0x08008193
 80080b4:	0800813f 	.word	0x0800813f
 80080b8:	08008193 	.word	0x08008193
 80080bc:	08008193 	.word	0x08008193
 80080c0:	08008193 	.word	0x08008193
 80080c4:	0800814f 	.word	0x0800814f
 80080c8:	08008193 	.word	0x08008193
 80080cc:	08008193 	.word	0x08008193
 80080d0:	08008193 	.word	0x08008193
 80080d4:	08008193 	.word	0x08008193
 80080d8:	08008193 	.word	0x08008193
 80080dc:	08008193 	.word	0x08008193
 80080e0:	08008193 	.word	0x08008193
 80080e4:	0800815f 	.word	0x0800815f
 80080e8:	08008193 	.word	0x08008193
 80080ec:	08008193 	.word	0x08008193
 80080f0:	08008193 	.word	0x08008193
 80080f4:	08008193 	.word	0x08008193
 80080f8:	08008193 	.word	0x08008193
 80080fc:	08008193 	.word	0x08008193
 8008100:	08008193 	.word	0x08008193
 8008104:	08008193 	.word	0x08008193
 8008108:	08008193 	.word	0x08008193
 800810c:	08008193 	.word	0x08008193
 8008110:	08008193 	.word	0x08008193
 8008114:	08008193 	.word	0x08008193
 8008118:	08008193 	.word	0x08008193
 800811c:	08008193 	.word	0x08008193
 8008120:	08008193 	.word	0x08008193
 8008124:	08008185 	.word	0x08008185
 8008128:	2b40      	cmp	r3, #64	; 0x40
 800812a:	d02e      	beq.n	800818a <UART_SetConfig+0x8aa>
 800812c:	e031      	b.n	8008192 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800812e:	f7fc ff9b 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 8008132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008134:	e033      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008136:	f7fc ffad 	bl	8005094 <HAL_RCC_GetPCLK2Freq>
 800813a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800813c:	e02f      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd ff18 	bl	8005f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814c:	e027      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe f864 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815c:	e01f      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b2d      	ldr	r3, [pc, #180]	; (8008214 <UART_SetConfig+0x934>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800816a:	4b2a      	ldr	r3, [pc, #168]	; (8008214 <UART_SetConfig+0x934>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a24      	ldr	r2, [pc, #144]	; (8008208 <UART_SetConfig+0x928>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800817c:	e00f      	b.n	800819e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800817e:	4b22      	ldr	r3, [pc, #136]	; (8008208 <UART_SetConfig+0x928>)
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008182:	e00c      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008184:	4b21      	ldr	r3, [pc, #132]	; (800820c <UART_SetConfig+0x92c>)
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800819c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800819e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 80e7 	beq.w	8008374 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	4a19      	ldr	r2, [pc, #100]	; (8008210 <UART_SetConfig+0x930>)
 80081ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b8:	005a      	lsls	r2, r3, #1
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	441a      	add	r2, r3
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	2b0f      	cmp	r3, #15
 80081d0:	d916      	bls.n	8008200 <UART_SetConfig+0x920>
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d212      	bcs.n	8008200 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f023 030f 	bic.w	r3, r3, #15
 80081e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	085b      	lsrs	r3, r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081f2:	4313      	orrs	r3, r2
 80081f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80081fc:	60da      	str	r2, [r3, #12]
 80081fe:	e0b9      	b.n	8008374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008206:	e0b5      	b.n	8008374 <UART_SetConfig+0xa94>
 8008208:	03d09000 	.word	0x03d09000
 800820c:	003d0900 	.word	0x003d0900
 8008210:	0800d328 	.word	0x0800d328
 8008214:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008218:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800821c:	2b20      	cmp	r3, #32
 800821e:	dc49      	bgt.n	80082b4 <UART_SetConfig+0x9d4>
 8008220:	2b00      	cmp	r3, #0
 8008222:	db7c      	blt.n	800831e <UART_SetConfig+0xa3e>
 8008224:	2b20      	cmp	r3, #32
 8008226:	d87a      	bhi.n	800831e <UART_SetConfig+0xa3e>
 8008228:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0x950>)
 800822a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822e:	bf00      	nop
 8008230:	080082bb 	.word	0x080082bb
 8008234:	080082c3 	.word	0x080082c3
 8008238:	0800831f 	.word	0x0800831f
 800823c:	0800831f 	.word	0x0800831f
 8008240:	080082cb 	.word	0x080082cb
 8008244:	0800831f 	.word	0x0800831f
 8008248:	0800831f 	.word	0x0800831f
 800824c:	0800831f 	.word	0x0800831f
 8008250:	080082db 	.word	0x080082db
 8008254:	0800831f 	.word	0x0800831f
 8008258:	0800831f 	.word	0x0800831f
 800825c:	0800831f 	.word	0x0800831f
 8008260:	0800831f 	.word	0x0800831f
 8008264:	0800831f 	.word	0x0800831f
 8008268:	0800831f 	.word	0x0800831f
 800826c:	0800831f 	.word	0x0800831f
 8008270:	080082eb 	.word	0x080082eb
 8008274:	0800831f 	.word	0x0800831f
 8008278:	0800831f 	.word	0x0800831f
 800827c:	0800831f 	.word	0x0800831f
 8008280:	0800831f 	.word	0x0800831f
 8008284:	0800831f 	.word	0x0800831f
 8008288:	0800831f 	.word	0x0800831f
 800828c:	0800831f 	.word	0x0800831f
 8008290:	0800831f 	.word	0x0800831f
 8008294:	0800831f 	.word	0x0800831f
 8008298:	0800831f 	.word	0x0800831f
 800829c:	0800831f 	.word	0x0800831f
 80082a0:	0800831f 	.word	0x0800831f
 80082a4:	0800831f 	.word	0x0800831f
 80082a8:	0800831f 	.word	0x0800831f
 80082ac:	0800831f 	.word	0x0800831f
 80082b0:	08008311 	.word	0x08008311
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d02e      	beq.n	8008316 <UART_SetConfig+0xa36>
 80082b8:	e031      	b.n	800831e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ba:	f7fc fed5 	bl	8005068 <HAL_RCC_GetPCLK1Freq>
 80082be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082c0:	e033      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c2:	f7fc fee7 	bl	8005094 <HAL_RCC_GetPCLK2Freq>
 80082c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082c8:	e02f      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd fe52 	bl	8005f78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d8:	e027      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082da:	f107 0318 	add.w	r3, r7, #24
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fd ff9e 	bl	8006220 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e8:	e01f      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ea:	4b2d      	ldr	r3, [pc, #180]	; (80083a0 <UART_SetConfig+0xac0>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0320 	and.w	r3, r3, #32
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082f6:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <UART_SetConfig+0xac0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <UART_SetConfig+0xac4>)
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008308:	e00f      	b.n	800832a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800830a:	4b26      	ldr	r3, [pc, #152]	; (80083a4 <UART_SetConfig+0xac4>)
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800830e:	e00c      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008310:	4b25      	ldr	r3, [pc, #148]	; (80083a8 <UART_SetConfig+0xac8>)
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008314:	e009      	b.n	800832a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800831a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831c:	e005      	b.n	800832a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008328:	bf00      	nop
    }

    if (pclk != 0U)
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d021      	beq.n	8008374 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	4a1d      	ldr	r2, [pc, #116]	; (80083ac <UART_SetConfig+0xacc>)
 8008336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800833a:	461a      	mov	r2, r3
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	441a      	add	r2, r3
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008352:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d909      	bls.n	800836e <UART_SetConfig+0xa8e>
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008360:	d205      	bcs.n	800836e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	b29a      	uxth	r2, r3
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60da      	str	r2, [r3, #12]
 800836c:	e002      	b.n	8008374 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2201      	movs	r2, #1
 8008378:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	2201      	movs	r2, #1
 8008380:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2200      	movs	r2, #0
 8008388:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2200      	movs	r2, #0
 800838e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008390:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008394:	4618      	mov	r0, r3
 8008396:	3748      	adds	r7, #72	; 0x48
 8008398:	46bd      	mov	sp, r7
 800839a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800839e:	bf00      	nop
 80083a0:	58024400 	.word	0x58024400
 80083a4:	03d09000 	.word	0x03d09000
 80083a8:	003d0900 	.word	0x003d0900
 80083ac:	0800d328 	.word	0x0800d328

080083b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01a      	beq.n	80084c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ae:	d10a      	bne.n	80084c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	605a      	str	r2, [r3, #4]
  }
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af02      	add	r7, sp, #8
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008504:	f7f9 fbc4 	bl	8001c90 <HAL_GetTick>
 8008508:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b08      	cmp	r3, #8
 8008516:	d10e      	bne.n	8008536 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f82f 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e025      	b.n	8008582 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b04      	cmp	r3, #4
 8008542:	d10e      	bne.n	8008562 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f819 	bl	800858a <UART_WaitOnFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e00f      	b.n	8008582 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b09c      	sub	sp, #112	; 0x70
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859a:	e0a9      	b.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800859c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a2:	f000 80a5 	beq.w	80086f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a6:	f7f9 fb73 	bl	8001c90 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d302      	bcc.n	80085bc <UART_WaitOnFlagUntilTimeout+0x32>
 80085b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d140      	bne.n	800863e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085d0:	667b      	str	r3, [r7, #100]	; 0x64
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e6      	bne.n	80085bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3308      	adds	r3, #8
 80085f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	f023 0301 	bic.w	r3, r3, #1
 8008604:	663b      	str	r3, [r7, #96]	; 0x60
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800860e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008610:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800861c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e5      	bne.n	80085ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e069      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	d051      	beq.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865a:	d149      	bne.n	80086f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008664:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800867a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
 8008686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800868a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e6      	bne.n	8008666 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3308      	adds	r3, #8
 800869e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086b8:	623a      	str	r2, [r7, #32]
 80086ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	69f9      	ldr	r1, [r7, #28]
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e010      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69da      	ldr	r2, [r3, #28]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	4013      	ands	r3, r2
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	429a      	cmp	r2, r3
 800870c:	f43f af46 	beq.w	800859c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3770      	adds	r7, #112	; 0x70
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_UARTEx_DisableFifoMode+0x16>
 800872c:	2302      	movs	r3, #2
 800872e:	e027      	b.n	8008780 <HAL_UARTEx_DisableFifoMode+0x66>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2224      	movs	r2, #36	; 0x24
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0201 	bic.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800875e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e02d      	b.n	8008800 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2224      	movs	r2, #36	; 0x24
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0201 	bic.w	r2, r2, #1
 80087ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f84f 	bl	8008884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800881c:	2302      	movs	r3, #2
 800881e:	e02d      	b.n	800887c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2224      	movs	r2, #36	; 0x24
 800882c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f811 	bl	8008884 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2220      	movs	r2, #32
 800886e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008890:	2b00      	cmp	r3, #0
 8008892:	d108      	bne.n	80088a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80088a4:	e031      	b.n	800890a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80088a6:	2310      	movs	r3, #16
 80088a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80088aa:	2310      	movs	r3, #16
 80088ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	0e5b      	lsrs	r3, r3, #25
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	0f5b      	lsrs	r3, r3, #29
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	7b3a      	ldrb	r2, [r7, #12]
 80088d2:	4911      	ldr	r1, [pc, #68]	; (8008918 <UARTEx_SetNbDataToProcess+0x94>)
 80088d4:	5c8a      	ldrb	r2, [r1, r2]
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088da:	7b3a      	ldrb	r2, [r7, #12]
 80088dc:	490f      	ldr	r1, [pc, #60]	; (800891c <UARTEx_SetNbDataToProcess+0x98>)
 80088de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	7b7a      	ldrb	r2, [r7, #13]
 80088f0:	4909      	ldr	r1, [pc, #36]	; (8008918 <UARTEx_SetNbDataToProcess+0x94>)
 80088f2:	5c8a      	ldrb	r2, [r1, r2]
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088f8:	7b7a      	ldrb	r2, [r7, #13]
 80088fa:	4908      	ldr	r1, [pc, #32]	; (800891c <UARTEx_SetNbDataToProcess+0x98>)
 80088fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008902:	b29a      	uxth	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	0800d340 	.word	0x0800d340
 800891c:	0800d348 	.word	0x0800d348

08008920 <__errno>:
 8008920:	4b01      	ldr	r3, [pc, #4]	; (8008928 <__errno+0x8>)
 8008922:	6818      	ldr	r0, [r3, #0]
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	24000010 	.word	0x24000010

0800892c <__libc_init_array>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	4d0d      	ldr	r5, [pc, #52]	; (8008964 <__libc_init_array+0x38>)
 8008930:	4c0d      	ldr	r4, [pc, #52]	; (8008968 <__libc_init_array+0x3c>)
 8008932:	1b64      	subs	r4, r4, r5
 8008934:	10a4      	asrs	r4, r4, #2
 8008936:	2600      	movs	r6, #0
 8008938:	42a6      	cmp	r6, r4
 800893a:	d109      	bne.n	8008950 <__libc_init_array+0x24>
 800893c:	4d0b      	ldr	r5, [pc, #44]	; (800896c <__libc_init_array+0x40>)
 800893e:	4c0c      	ldr	r4, [pc, #48]	; (8008970 <__libc_init_array+0x44>)
 8008940:	f004 fbe2 	bl	800d108 <_init>
 8008944:	1b64      	subs	r4, r4, r5
 8008946:	10a4      	asrs	r4, r4, #2
 8008948:	2600      	movs	r6, #0
 800894a:	42a6      	cmp	r6, r4
 800894c:	d105      	bne.n	800895a <__libc_init_array+0x2e>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	f855 3b04 	ldr.w	r3, [r5], #4
 8008954:	4798      	blx	r3
 8008956:	3601      	adds	r6, #1
 8008958:	e7ee      	b.n	8008938 <__libc_init_array+0xc>
 800895a:	f855 3b04 	ldr.w	r3, [r5], #4
 800895e:	4798      	blx	r3
 8008960:	3601      	adds	r6, #1
 8008962:	e7f2      	b.n	800894a <__libc_init_array+0x1e>
 8008964:	0800d7fc 	.word	0x0800d7fc
 8008968:	0800d7fc 	.word	0x0800d7fc
 800896c:	0800d7fc 	.word	0x0800d7fc
 8008970:	0800d800 	.word	0x0800d800

08008974 <memcpy>:
 8008974:	440a      	add	r2, r1
 8008976:	4291      	cmp	r1, r2
 8008978:	f100 33ff 	add.w	r3, r0, #4294967295
 800897c:	d100      	bne.n	8008980 <memcpy+0xc>
 800897e:	4770      	bx	lr
 8008980:	b510      	push	{r4, lr}
 8008982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800898a:	4291      	cmp	r1, r2
 800898c:	d1f9      	bne.n	8008982 <memcpy+0xe>
 800898e:	bd10      	pop	{r4, pc}

08008990 <memset>:
 8008990:	4402      	add	r2, r0
 8008992:	4603      	mov	r3, r0
 8008994:	4293      	cmp	r3, r2
 8008996:	d100      	bne.n	800899a <memset+0xa>
 8008998:	4770      	bx	lr
 800899a:	f803 1b01 	strb.w	r1, [r3], #1
 800899e:	e7f9      	b.n	8008994 <memset+0x4>

080089a0 <__cvt>:
 80089a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089a2:	ed2d 8b02 	vpush	{d8}
 80089a6:	eeb0 8b40 	vmov.f64	d8, d0
 80089aa:	b085      	sub	sp, #20
 80089ac:	4617      	mov	r7, r2
 80089ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80089b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80089b2:	ee18 2a90 	vmov	r2, s17
 80089b6:	f025 0520 	bic.w	r5, r5, #32
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	bfb6      	itet	lt
 80089be:	222d      	movlt	r2, #45	; 0x2d
 80089c0:	2200      	movge	r2, #0
 80089c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80089c6:	2d46      	cmp	r5, #70	; 0x46
 80089c8:	460c      	mov	r4, r1
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	d004      	beq.n	80089d8 <__cvt+0x38>
 80089ce:	2d45      	cmp	r5, #69	; 0x45
 80089d0:	d100      	bne.n	80089d4 <__cvt+0x34>
 80089d2:	3401      	adds	r4, #1
 80089d4:	2102      	movs	r1, #2
 80089d6:	e000      	b.n	80089da <__cvt+0x3a>
 80089d8:	2103      	movs	r1, #3
 80089da:	ab03      	add	r3, sp, #12
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	ab02      	add	r3, sp, #8
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	4622      	mov	r2, r4
 80089e4:	4633      	mov	r3, r6
 80089e6:	eeb0 0b48 	vmov.f64	d0, d8
 80089ea:	f001 fd7d 	bl	800a4e8 <_dtoa_r>
 80089ee:	2d47      	cmp	r5, #71	; 0x47
 80089f0:	d101      	bne.n	80089f6 <__cvt+0x56>
 80089f2:	07fb      	lsls	r3, r7, #31
 80089f4:	d51a      	bpl.n	8008a2c <__cvt+0x8c>
 80089f6:	2d46      	cmp	r5, #70	; 0x46
 80089f8:	eb00 0204 	add.w	r2, r0, r4
 80089fc:	d10c      	bne.n	8008a18 <__cvt+0x78>
 80089fe:	7803      	ldrb	r3, [r0, #0]
 8008a00:	2b30      	cmp	r3, #48	; 0x30
 8008a02:	d107      	bne.n	8008a14 <__cvt+0x74>
 8008a04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0c:	bf1c      	itt	ne
 8008a0e:	f1c4 0401 	rsbne	r4, r4, #1
 8008a12:	6034      	strne	r4, [r6, #0]
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	441a      	add	r2, r3
 8008a18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a20:	bf08      	it	eq
 8008a22:	9203      	streq	r2, [sp, #12]
 8008a24:	2130      	movs	r1, #48	; 0x30
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d307      	bcc.n	8008a3c <__cvt+0x9c>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a30:	1a1b      	subs	r3, r3, r0
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	b005      	add	sp, #20
 8008a36:	ecbd 8b02 	vpop	{d8}
 8008a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3c:	1c5c      	adds	r4, r3, #1
 8008a3e:	9403      	str	r4, [sp, #12]
 8008a40:	7019      	strb	r1, [r3, #0]
 8008a42:	e7f0      	b.n	8008a26 <__cvt+0x86>

08008a44 <__exponent>:
 8008a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a46:	4603      	mov	r3, r0
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	bfb8      	it	lt
 8008a4c:	4249      	neglt	r1, r1
 8008a4e:	f803 2b02 	strb.w	r2, [r3], #2
 8008a52:	bfb4      	ite	lt
 8008a54:	222d      	movlt	r2, #45	; 0x2d
 8008a56:	222b      	movge	r2, #43	; 0x2b
 8008a58:	2909      	cmp	r1, #9
 8008a5a:	7042      	strb	r2, [r0, #1]
 8008a5c:	dd2a      	ble.n	8008ab4 <__exponent+0x70>
 8008a5e:	f10d 0407 	add.w	r4, sp, #7
 8008a62:	46a4      	mov	ip, r4
 8008a64:	270a      	movs	r7, #10
 8008a66:	46a6      	mov	lr, r4
 8008a68:	460a      	mov	r2, r1
 8008a6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a6e:	fb07 1516 	mls	r5, r7, r6, r1
 8008a72:	3530      	adds	r5, #48	; 0x30
 8008a74:	2a63      	cmp	r2, #99	; 0x63
 8008a76:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a7e:	4631      	mov	r1, r6
 8008a80:	dcf1      	bgt.n	8008a66 <__exponent+0x22>
 8008a82:	3130      	adds	r1, #48	; 0x30
 8008a84:	f1ae 0502 	sub.w	r5, lr, #2
 8008a88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a8c:	1c44      	adds	r4, r0, #1
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4561      	cmp	r1, ip
 8008a92:	d30a      	bcc.n	8008aaa <__exponent+0x66>
 8008a94:	f10d 0209 	add.w	r2, sp, #9
 8008a98:	eba2 020e 	sub.w	r2, r2, lr
 8008a9c:	4565      	cmp	r5, ip
 8008a9e:	bf88      	it	hi
 8008aa0:	2200      	movhi	r2, #0
 8008aa2:	4413      	add	r3, r2
 8008aa4:	1a18      	subs	r0, r3, r0
 8008aa6:	b003      	add	sp, #12
 8008aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ab2:	e7ed      	b.n	8008a90 <__exponent+0x4c>
 8008ab4:	2330      	movs	r3, #48	; 0x30
 8008ab6:	3130      	adds	r1, #48	; 0x30
 8008ab8:	7083      	strb	r3, [r0, #2]
 8008aba:	70c1      	strb	r1, [r0, #3]
 8008abc:	1d03      	adds	r3, r0, #4
 8008abe:	e7f1      	b.n	8008aa4 <__exponent+0x60>

08008ac0 <_printf_float>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	b08b      	sub	sp, #44	; 0x2c
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008acc:	4616      	mov	r6, r2
 8008ace:	461f      	mov	r7, r3
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	f002 fde7 	bl	800b6a4 <_localeconv_r>
 8008ad6:	f8d0 b000 	ldr.w	fp, [r0]
 8008ada:	4658      	mov	r0, fp
 8008adc:	f7f7 fc00 	bl	80002e0 <strlen>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9308      	str	r3, [sp, #32]
 8008ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008aec:	6822      	ldr	r2, [r4, #0]
 8008aee:	3307      	adds	r3, #7
 8008af0:	f023 0307 	bic.w	r3, r3, #7
 8008af4:	f103 0108 	add.w	r1, r3, #8
 8008af8:	f8c8 1000 	str.w	r1, [r8]
 8008afc:	4682      	mov	sl, r0
 8008afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008b06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008d68 <_printf_float+0x2a8>
 8008b0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008b0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8008b12:	eeb4 6b47 	vcmp.f64	d6, d7
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	dd24      	ble.n	8008b66 <_printf_float+0xa6>
 8008b1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b24:	d502      	bpl.n	8008b2c <_printf_float+0x6c>
 8008b26:	232d      	movs	r3, #45	; 0x2d
 8008b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2c:	4b90      	ldr	r3, [pc, #576]	; (8008d70 <_printf_float+0x2b0>)
 8008b2e:	4891      	ldr	r0, [pc, #580]	; (8008d74 <_printf_float+0x2b4>)
 8008b30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008b34:	bf94      	ite	ls
 8008b36:	4698      	movls	r8, r3
 8008b38:	4680      	movhi	r8, r0
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	6123      	str	r3, [r4, #16]
 8008b3e:	f022 0204 	bic.w	r2, r2, #4
 8008b42:	2300      	movs	r3, #0
 8008b44:	6022      	str	r2, [r4, #0]
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	9700      	str	r7, [sp, #0]
 8008b4a:	4633      	mov	r3, r6
 8008b4c:	aa09      	add	r2, sp, #36	; 0x24
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 f9d3 	bl	8008efc <_printf_common>
 8008b56:	3001      	adds	r0, #1
 8008b58:	f040 808a 	bne.w	8008c70 <_printf_float+0x1b0>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	b00b      	add	sp, #44	; 0x2c
 8008b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b66:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6e:	d709      	bvc.n	8008b84 <_printf_float+0xc4>
 8008b70:	ee10 3a90 	vmov	r3, s1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfbc      	itt	lt
 8008b78:	232d      	movlt	r3, #45	; 0x2d
 8008b7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008b7e:	487e      	ldr	r0, [pc, #504]	; (8008d78 <_printf_float+0x2b8>)
 8008b80:	4b7e      	ldr	r3, [pc, #504]	; (8008d7c <_printf_float+0x2bc>)
 8008b82:	e7d5      	b.n	8008b30 <_printf_float+0x70>
 8008b84:	6863      	ldr	r3, [r4, #4]
 8008b86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008b8a:	9104      	str	r1, [sp, #16]
 8008b8c:	1c59      	adds	r1, r3, #1
 8008b8e:	d13c      	bne.n	8008c0a <_printf_float+0x14a>
 8008b90:	2306      	movs	r3, #6
 8008b92:	6063      	str	r3, [r4, #4]
 8008b94:	2300      	movs	r3, #0
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	ab08      	add	r3, sp, #32
 8008b9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008b9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ba2:	ab07      	add	r3, sp, #28
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	f10d 031b 	add.w	r3, sp, #27
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f7ff fef6 	bl	80089a0 <__cvt>
 8008bb4:	9b04      	ldr	r3, [sp, #16]
 8008bb6:	9907      	ldr	r1, [sp, #28]
 8008bb8:	2b47      	cmp	r3, #71	; 0x47
 8008bba:	4680      	mov	r8, r0
 8008bbc:	d108      	bne.n	8008bd0 <_printf_float+0x110>
 8008bbe:	1cc8      	adds	r0, r1, #3
 8008bc0:	db02      	blt.n	8008bc8 <_printf_float+0x108>
 8008bc2:	6863      	ldr	r3, [r4, #4]
 8008bc4:	4299      	cmp	r1, r3
 8008bc6:	dd41      	ble.n	8008c4c <_printf_float+0x18c>
 8008bc8:	f1a9 0902 	sub.w	r9, r9, #2
 8008bcc:	fa5f f989 	uxtb.w	r9, r9
 8008bd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008bd4:	d820      	bhi.n	8008c18 <_printf_float+0x158>
 8008bd6:	3901      	subs	r1, #1
 8008bd8:	464a      	mov	r2, r9
 8008bda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008bde:	9107      	str	r1, [sp, #28]
 8008be0:	f7ff ff30 	bl	8008a44 <__exponent>
 8008be4:	9a08      	ldr	r2, [sp, #32]
 8008be6:	9004      	str	r0, [sp, #16]
 8008be8:	1813      	adds	r3, r2, r0
 8008bea:	2a01      	cmp	r2, #1
 8008bec:	6123      	str	r3, [r4, #16]
 8008bee:	dc02      	bgt.n	8008bf6 <_printf_float+0x136>
 8008bf0:	6822      	ldr	r2, [r4, #0]
 8008bf2:	07d2      	lsls	r2, r2, #31
 8008bf4:	d501      	bpl.n	8008bfa <_printf_float+0x13a>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	6123      	str	r3, [r4, #16]
 8008bfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0a2      	beq.n	8008b48 <_printf_float+0x88>
 8008c02:	232d      	movs	r3, #45	; 0x2d
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c08:	e79e      	b.n	8008b48 <_printf_float+0x88>
 8008c0a:	9904      	ldr	r1, [sp, #16]
 8008c0c:	2947      	cmp	r1, #71	; 0x47
 8008c0e:	d1c1      	bne.n	8008b94 <_printf_float+0xd4>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1bf      	bne.n	8008b94 <_printf_float+0xd4>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e7bc      	b.n	8008b92 <_printf_float+0xd2>
 8008c18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008c1c:	d118      	bne.n	8008c50 <_printf_float+0x190>
 8008c1e:	2900      	cmp	r1, #0
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	dd0b      	ble.n	8008c3c <_printf_float+0x17c>
 8008c24:	6121      	str	r1, [r4, #16]
 8008c26:	b913      	cbnz	r3, 8008c2e <_printf_float+0x16e>
 8008c28:	6822      	ldr	r2, [r4, #0]
 8008c2a:	07d0      	lsls	r0, r2, #31
 8008c2c:	d502      	bpl.n	8008c34 <_printf_float+0x174>
 8008c2e:	3301      	adds	r3, #1
 8008c30:	440b      	add	r3, r1
 8008c32:	6123      	str	r3, [r4, #16]
 8008c34:	2300      	movs	r3, #0
 8008c36:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	e7de      	b.n	8008bfa <_printf_float+0x13a>
 8008c3c:	b913      	cbnz	r3, 8008c44 <_printf_float+0x184>
 8008c3e:	6822      	ldr	r2, [r4, #0]
 8008c40:	07d2      	lsls	r2, r2, #31
 8008c42:	d501      	bpl.n	8008c48 <_printf_float+0x188>
 8008c44:	3302      	adds	r3, #2
 8008c46:	e7f4      	b.n	8008c32 <_printf_float+0x172>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7f2      	b.n	8008c32 <_printf_float+0x172>
 8008c4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008c50:	9b08      	ldr	r3, [sp, #32]
 8008c52:	4299      	cmp	r1, r3
 8008c54:	db05      	blt.n	8008c62 <_printf_float+0x1a2>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	6121      	str	r1, [r4, #16]
 8008c5a:	07d8      	lsls	r0, r3, #31
 8008c5c:	d5ea      	bpl.n	8008c34 <_printf_float+0x174>
 8008c5e:	1c4b      	adds	r3, r1, #1
 8008c60:	e7e7      	b.n	8008c32 <_printf_float+0x172>
 8008c62:	2900      	cmp	r1, #0
 8008c64:	bfd4      	ite	le
 8008c66:	f1c1 0202 	rsble	r2, r1, #2
 8008c6a:	2201      	movgt	r2, #1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	e7e0      	b.n	8008c32 <_printf_float+0x172>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	055a      	lsls	r2, r3, #21
 8008c74:	d407      	bmi.n	8008c86 <_printf_float+0x1c6>
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	4642      	mov	r2, r8
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	d12a      	bne.n	8008cda <_printf_float+0x21a>
 8008c84:	e76a      	b.n	8008b5c <_printf_float+0x9c>
 8008c86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c8a:	f240 80e2 	bls.w	8008e52 <_printf_float+0x392>
 8008c8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008c92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9a:	d133      	bne.n	8008d04 <_printf_float+0x244>
 8008c9c:	4a38      	ldr	r2, [pc, #224]	; (8008d80 <_printf_float+0x2c0>)
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	47b8      	blx	r7
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	f43f af58 	beq.w	8008b5c <_printf_float+0x9c>
 8008cac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	db02      	blt.n	8008cba <_printf_float+0x1fa>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	07d8      	lsls	r0, r3, #31
 8008cb8:	d50f      	bpl.n	8008cda <_printf_float+0x21a>
 8008cba:	4653      	mov	r3, sl
 8008cbc:	465a      	mov	r2, fp
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	47b8      	blx	r7
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f43f af49 	beq.w	8008b5c <_printf_float+0x9c>
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	f104 091a 	add.w	r9, r4, #26
 8008cd2:	9b08      	ldr	r3, [sp, #32]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	4543      	cmp	r3, r8
 8008cd8:	dc09      	bgt.n	8008cee <_printf_float+0x22e>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	079b      	lsls	r3, r3, #30
 8008cde:	f100 8108 	bmi.w	8008ef2 <_printf_float+0x432>
 8008ce2:	68e0      	ldr	r0, [r4, #12]
 8008ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce6:	4298      	cmp	r0, r3
 8008ce8:	bfb8      	it	lt
 8008cea:	4618      	movlt	r0, r3
 8008cec:	e738      	b.n	8008b60 <_printf_float+0xa0>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	464a      	mov	r2, r9
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f43f af2f 	beq.w	8008b5c <_printf_float+0x9c>
 8008cfe:	f108 0801 	add.w	r8, r8, #1
 8008d02:	e7e6      	b.n	8008cd2 <_printf_float+0x212>
 8008d04:	9b07      	ldr	r3, [sp, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dc3c      	bgt.n	8008d84 <_printf_float+0x2c4>
 8008d0a:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <_printf_float+0x2c0>)
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f af21 	beq.w	8008b5c <_printf_float+0x9c>
 8008d1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	d102      	bne.n	8008d28 <_printf_float+0x268>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	07d9      	lsls	r1, r3, #31
 8008d26:	d5d8      	bpl.n	8008cda <_printf_float+0x21a>
 8008d28:	4653      	mov	r3, sl
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	f43f af12 	beq.w	8008b5c <_printf_float+0x9c>
 8008d38:	f04f 0900 	mov.w	r9, #0
 8008d3c:	f104 0a1a 	add.w	sl, r4, #26
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	425b      	negs	r3, r3
 8008d44:	454b      	cmp	r3, r9
 8008d46:	dc01      	bgt.n	8008d4c <_printf_float+0x28c>
 8008d48:	9b08      	ldr	r3, [sp, #32]
 8008d4a:	e795      	b.n	8008c78 <_printf_float+0x1b8>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4652      	mov	r2, sl
 8008d50:	4631      	mov	r1, r6
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b8      	blx	r7
 8008d56:	3001      	adds	r0, #1
 8008d58:	f43f af00 	beq.w	8008b5c <_printf_float+0x9c>
 8008d5c:	f109 0901 	add.w	r9, r9, #1
 8008d60:	e7ee      	b.n	8008d40 <_printf_float+0x280>
 8008d62:	bf00      	nop
 8008d64:	f3af 8000 	nop.w
 8008d68:	ffffffff 	.word	0xffffffff
 8008d6c:	7fefffff 	.word	0x7fefffff
 8008d70:	0800d354 	.word	0x0800d354
 8008d74:	0800d358 	.word	0x0800d358
 8008d78:	0800d360 	.word	0x0800d360
 8008d7c:	0800d35c 	.word	0x0800d35c
 8008d80:	0800d364 	.word	0x0800d364
 8008d84:	9a08      	ldr	r2, [sp, #32]
 8008d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	bfa8      	it	ge
 8008d8c:	461a      	movge	r2, r3
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	4691      	mov	r9, r2
 8008d92:	dc38      	bgt.n	8008e06 <_printf_float+0x346>
 8008d94:	2300      	movs	r3, #0
 8008d96:	9305      	str	r3, [sp, #20]
 8008d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d9c:	f104 021a 	add.w	r2, r4, #26
 8008da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008da2:	9905      	ldr	r1, [sp, #20]
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	eba3 0309 	sub.w	r3, r3, r9
 8008daa:	428b      	cmp	r3, r1
 8008dac:	dc33      	bgt.n	8008e16 <_printf_float+0x356>
 8008dae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	db3c      	blt.n	8008e30 <_printf_float+0x370>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	07da      	lsls	r2, r3, #31
 8008dba:	d439      	bmi.n	8008e30 <_printf_float+0x370>
 8008dbc:	9b08      	ldr	r3, [sp, #32]
 8008dbe:	9a04      	ldr	r2, [sp, #16]
 8008dc0:	9907      	ldr	r1, [sp, #28]
 8008dc2:	1a9a      	subs	r2, r3, r2
 8008dc4:	eba3 0901 	sub.w	r9, r3, r1
 8008dc8:	4591      	cmp	r9, r2
 8008dca:	bfa8      	it	ge
 8008dcc:	4691      	movge	r9, r2
 8008dce:	f1b9 0f00 	cmp.w	r9, #0
 8008dd2:	dc35      	bgt.n	8008e40 <_printf_float+0x380>
 8008dd4:	f04f 0800 	mov.w	r8, #0
 8008dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ddc:	f104 0a1a 	add.w	sl, r4, #26
 8008de0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	eba3 0309 	sub.w	r3, r3, r9
 8008dea:	4543      	cmp	r3, r8
 8008dec:	f77f af75 	ble.w	8008cda <_printf_float+0x21a>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4652      	mov	r2, sl
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f aeae 	beq.w	8008b5c <_printf_float+0x9c>
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	e7ec      	b.n	8008de0 <_printf_float+0x320>
 8008e06:	4613      	mov	r3, r2
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	47b8      	blx	r7
 8008e10:	3001      	adds	r0, #1
 8008e12:	d1bf      	bne.n	8008d94 <_printf_float+0x2d4>
 8008e14:	e6a2      	b.n	8008b5c <_printf_float+0x9c>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	9204      	str	r2, [sp, #16]
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f ae9b 	beq.w	8008b5c <_printf_float+0x9c>
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	9305      	str	r3, [sp, #20]
 8008e2e:	e7b7      	b.n	8008da0 <_printf_float+0x2e0>
 8008e30:	4653      	mov	r3, sl
 8008e32:	465a      	mov	r2, fp
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d1be      	bne.n	8008dbc <_printf_float+0x2fc>
 8008e3e:	e68d      	b.n	8008b5c <_printf_float+0x9c>
 8008e40:	9a04      	ldr	r2, [sp, #16]
 8008e42:	464b      	mov	r3, r9
 8008e44:	4442      	add	r2, r8
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b8      	blx	r7
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d1c1      	bne.n	8008dd4 <_printf_float+0x314>
 8008e50:	e684      	b.n	8008b5c <_printf_float+0x9c>
 8008e52:	9a08      	ldr	r2, [sp, #32]
 8008e54:	2a01      	cmp	r2, #1
 8008e56:	dc01      	bgt.n	8008e5c <_printf_float+0x39c>
 8008e58:	07db      	lsls	r3, r3, #31
 8008e5a:	d537      	bpl.n	8008ecc <_printf_float+0x40c>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	4642      	mov	r2, r8
 8008e60:	4631      	mov	r1, r6
 8008e62:	4628      	mov	r0, r5
 8008e64:	47b8      	blx	r7
 8008e66:	3001      	adds	r0, #1
 8008e68:	f43f ae78 	beq.w	8008b5c <_printf_float+0x9c>
 8008e6c:	4653      	mov	r3, sl
 8008e6e:	465a      	mov	r2, fp
 8008e70:	4631      	mov	r1, r6
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	f43f ae70 	beq.w	8008b5c <_printf_float+0x9c>
 8008e7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008e80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	d01b      	beq.n	8008ec2 <_printf_float+0x402>
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	f108 0201 	add.w	r2, r8, #1
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b8      	blx	r7
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d10e      	bne.n	8008eba <_printf_float+0x3fa>
 8008e9c:	e65e      	b.n	8008b5c <_printf_float+0x9c>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	464a      	mov	r2, r9
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	47b8      	blx	r7
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	f43f ae57 	beq.w	8008b5c <_printf_float+0x9c>
 8008eae:	f108 0801 	add.w	r8, r8, #1
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	4543      	cmp	r3, r8
 8008eb8:	dcf1      	bgt.n	8008e9e <_printf_float+0x3de>
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ec0:	e6db      	b.n	8008c7a <_printf_float+0x1ba>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	f104 091a 	add.w	r9, r4, #26
 8008eca:	e7f2      	b.n	8008eb2 <_printf_float+0x3f2>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4642      	mov	r2, r8
 8008ed0:	e7df      	b.n	8008e92 <_printf_float+0x3d2>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae3d 	beq.w	8008b5c <_printf_float+0x9c>
 8008ee2:	f108 0801 	add.w	r8, r8, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	4543      	cmp	r3, r8
 8008eee:	dcf0      	bgt.n	8008ed2 <_printf_float+0x412>
 8008ef0:	e6f7      	b.n	8008ce2 <_printf_float+0x222>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0919 	add.w	r9, r4, #25
 8008efa:	e7f4      	b.n	8008ee6 <_printf_float+0x426>

08008efc <_printf_common>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	4616      	mov	r6, r2
 8008f02:	4699      	mov	r9, r3
 8008f04:	688a      	ldr	r2, [r1, #8]
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bfb8      	it	lt
 8008f10:	4613      	movlt	r3, r2
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_printf_common+0x26>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	0699      	lsls	r1, r3, #26
 8008f26:	bf42      	ittt	mi
 8008f28:	6833      	ldrmi	r3, [r6, #0]
 8008f2a:	3302      	addmi	r3, #2
 8008f2c:	6033      	strmi	r3, [r6, #0]
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	f015 0506 	ands.w	r5, r5, #6
 8008f34:	d106      	bne.n	8008f44 <_printf_common+0x48>
 8008f36:	f104 0a19 	add.w	sl, r4, #25
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	6832      	ldr	r2, [r6, #0]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dc26      	bgt.n	8008f92 <_printf_common+0x96>
 8008f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f48:	1e13      	subs	r3, r2, #0
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	0692      	lsls	r2, r2, #26
 8008f52:	d42b      	bmi.n	8008fac <_printf_common+0xb0>
 8008f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d01e      	beq.n	8008fa0 <_printf_common+0xa4>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	68e5      	ldr	r5, [r4, #12]
 8008f66:	6832      	ldr	r2, [r6, #0]
 8008f68:	f003 0306 	and.w	r3, r3, #6
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	bf08      	it	eq
 8008f70:	1aad      	subeq	r5, r5, r2
 8008f72:	68a3      	ldr	r3, [r4, #8]
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	bf0c      	ite	eq
 8008f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f7c:	2500      	movne	r5, #0
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	bfc4      	itt	gt
 8008f82:	1a9b      	subgt	r3, r3, r2
 8008f84:	18ed      	addgt	r5, r5, r3
 8008f86:	2600      	movs	r6, #0
 8008f88:	341a      	adds	r4, #26
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	d11a      	bne.n	8008fc4 <_printf_common+0xc8>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e008      	b.n	8008fa4 <_printf_common+0xa8>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4649      	mov	r1, r9
 8008f98:	4638      	mov	r0, r7
 8008f9a:	47c0      	blx	r8
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d103      	bne.n	8008fa8 <_printf_common+0xac>
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7c6      	b.n	8008f3a <_printf_common+0x3e>
 8008fac:	18e1      	adds	r1, r4, r3
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	2030      	movs	r0, #48	; 0x30
 8008fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fb6:	4422      	add	r2, r4
 8008fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	e7c7      	b.n	8008f54 <_printf_common+0x58>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4649      	mov	r1, r9
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c0      	blx	r8
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0e6      	beq.n	8008fa0 <_printf_common+0xa4>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7d9      	b.n	8008f8a <_printf_common+0x8e>
	...

08008fd8 <_printf_i>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	7e0f      	ldrb	r7, [r1, #24]
 8008fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008fe0:	2f78      	cmp	r7, #120	; 0x78
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fee:	d807      	bhi.n	8009000 <_printf_i+0x28>
 8008ff0:	2f62      	cmp	r7, #98	; 0x62
 8008ff2:	d80a      	bhi.n	800900a <_printf_i+0x32>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	f000 80d8 	beq.w	80091aa <_printf_i+0x1d2>
 8008ffa:	2f58      	cmp	r7, #88	; 0x58
 8008ffc:	f000 80a3 	beq.w	8009146 <_printf_i+0x16e>
 8009000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009008:	e03a      	b.n	8009080 <_printf_i+0xa8>
 800900a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800900e:	2b15      	cmp	r3, #21
 8009010:	d8f6      	bhi.n	8009000 <_printf_i+0x28>
 8009012:	a101      	add	r1, pc, #4	; (adr r1, 8009018 <_printf_i+0x40>)
 8009014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009018:	08009071 	.word	0x08009071
 800901c:	08009085 	.word	0x08009085
 8009020:	08009001 	.word	0x08009001
 8009024:	08009001 	.word	0x08009001
 8009028:	08009001 	.word	0x08009001
 800902c:	08009001 	.word	0x08009001
 8009030:	08009085 	.word	0x08009085
 8009034:	08009001 	.word	0x08009001
 8009038:	08009001 	.word	0x08009001
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009191 	.word	0x08009191
 8009048:	080090b5 	.word	0x080090b5
 800904c:	08009173 	.word	0x08009173
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	080091b3 	.word	0x080091b3
 800905c:	08009001 	.word	0x08009001
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	0800917b 	.word	0x0800917b
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	602a      	str	r2, [r5, #0]
 8009078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009080:	2301      	movs	r3, #1
 8009082:	e0a3      	b.n	80091cc <_printf_i+0x1f4>
 8009084:	6820      	ldr	r0, [r4, #0]
 8009086:	6829      	ldr	r1, [r5, #0]
 8009088:	0606      	lsls	r6, r0, #24
 800908a:	f101 0304 	add.w	r3, r1, #4
 800908e:	d50a      	bpl.n	80090a6 <_printf_i+0xce>
 8009090:	680e      	ldr	r6, [r1, #0]
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	2e00      	cmp	r6, #0
 8009096:	da03      	bge.n	80090a0 <_printf_i+0xc8>
 8009098:	232d      	movs	r3, #45	; 0x2d
 800909a:	4276      	negs	r6, r6
 800909c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a0:	485e      	ldr	r0, [pc, #376]	; (800921c <_printf_i+0x244>)
 80090a2:	230a      	movs	r3, #10
 80090a4:	e019      	b.n	80090da <_printf_i+0x102>
 80090a6:	680e      	ldr	r6, [r1, #0]
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090ae:	bf18      	it	ne
 80090b0:	b236      	sxthne	r6, r6
 80090b2:	e7ef      	b.n	8009094 <_printf_i+0xbc>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	1d19      	adds	r1, r3, #4
 80090ba:	6029      	str	r1, [r5, #0]
 80090bc:	0601      	lsls	r1, r0, #24
 80090be:	d501      	bpl.n	80090c4 <_printf_i+0xec>
 80090c0:	681e      	ldr	r6, [r3, #0]
 80090c2:	e002      	b.n	80090ca <_printf_i+0xf2>
 80090c4:	0646      	lsls	r6, r0, #25
 80090c6:	d5fb      	bpl.n	80090c0 <_printf_i+0xe8>
 80090c8:	881e      	ldrh	r6, [r3, #0]
 80090ca:	4854      	ldr	r0, [pc, #336]	; (800921c <_printf_i+0x244>)
 80090cc:	2f6f      	cmp	r7, #111	; 0x6f
 80090ce:	bf0c      	ite	eq
 80090d0:	2308      	moveq	r3, #8
 80090d2:	230a      	movne	r3, #10
 80090d4:	2100      	movs	r1, #0
 80090d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090da:	6865      	ldr	r5, [r4, #4]
 80090dc:	60a5      	str	r5, [r4, #8]
 80090de:	2d00      	cmp	r5, #0
 80090e0:	bfa2      	ittt	ge
 80090e2:	6821      	ldrge	r1, [r4, #0]
 80090e4:	f021 0104 	bicge.w	r1, r1, #4
 80090e8:	6021      	strge	r1, [r4, #0]
 80090ea:	b90e      	cbnz	r6, 80090f0 <_printf_i+0x118>
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d04d      	beq.n	800918c <_printf_i+0x1b4>
 80090f0:	4615      	mov	r5, r2
 80090f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80090f6:	fb03 6711 	mls	r7, r3, r1, r6
 80090fa:	5dc7      	ldrb	r7, [r0, r7]
 80090fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009100:	4637      	mov	r7, r6
 8009102:	42bb      	cmp	r3, r7
 8009104:	460e      	mov	r6, r1
 8009106:	d9f4      	bls.n	80090f2 <_printf_i+0x11a>
 8009108:	2b08      	cmp	r3, #8
 800910a:	d10b      	bne.n	8009124 <_printf_i+0x14c>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	07de      	lsls	r6, r3, #31
 8009110:	d508      	bpl.n	8009124 <_printf_i+0x14c>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6861      	ldr	r1, [r4, #4]
 8009116:	4299      	cmp	r1, r3
 8009118:	bfde      	ittt	le
 800911a:	2330      	movle	r3, #48	; 0x30
 800911c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009120:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009124:	1b52      	subs	r2, r2, r5
 8009126:	6122      	str	r2, [r4, #16]
 8009128:	f8cd a000 	str.w	sl, [sp]
 800912c:	464b      	mov	r3, r9
 800912e:	aa03      	add	r2, sp, #12
 8009130:	4621      	mov	r1, r4
 8009132:	4640      	mov	r0, r8
 8009134:	f7ff fee2 	bl	8008efc <_printf_common>
 8009138:	3001      	adds	r0, #1
 800913a:	d14c      	bne.n	80091d6 <_printf_i+0x1fe>
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	b004      	add	sp, #16
 8009142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009146:	4835      	ldr	r0, [pc, #212]	; (800921c <_printf_i+0x244>)
 8009148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800914c:	6829      	ldr	r1, [r5, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f851 6b04 	ldr.w	r6, [r1], #4
 8009154:	6029      	str	r1, [r5, #0]
 8009156:	061d      	lsls	r5, r3, #24
 8009158:	d514      	bpl.n	8009184 <_printf_i+0x1ac>
 800915a:	07df      	lsls	r7, r3, #31
 800915c:	bf44      	itt	mi
 800915e:	f043 0320 	orrmi.w	r3, r3, #32
 8009162:	6023      	strmi	r3, [r4, #0]
 8009164:	b91e      	cbnz	r6, 800916e <_printf_i+0x196>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	f023 0320 	bic.w	r3, r3, #32
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	2310      	movs	r3, #16
 8009170:	e7b0      	b.n	80090d4 <_printf_i+0xfc>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	2378      	movs	r3, #120	; 0x78
 800917c:	4828      	ldr	r0, [pc, #160]	; (8009220 <_printf_i+0x248>)
 800917e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009182:	e7e3      	b.n	800914c <_printf_i+0x174>
 8009184:	0659      	lsls	r1, r3, #25
 8009186:	bf48      	it	mi
 8009188:	b2b6      	uxthmi	r6, r6
 800918a:	e7e6      	b.n	800915a <_printf_i+0x182>
 800918c:	4615      	mov	r5, r2
 800918e:	e7bb      	b.n	8009108 <_printf_i+0x130>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	6826      	ldr	r6, [r4, #0]
 8009194:	6961      	ldr	r1, [r4, #20]
 8009196:	1d18      	adds	r0, r3, #4
 8009198:	6028      	str	r0, [r5, #0]
 800919a:	0635      	lsls	r5, r6, #24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	d501      	bpl.n	80091a4 <_printf_i+0x1cc>
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	e002      	b.n	80091aa <_printf_i+0x1d2>
 80091a4:	0670      	lsls	r0, r6, #25
 80091a6:	d5fb      	bpl.n	80091a0 <_printf_i+0x1c8>
 80091a8:	8019      	strh	r1, [r3, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	4615      	mov	r5, r2
 80091b0:	e7ba      	b.n	8009128 <_printf_i+0x150>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	602a      	str	r2, [r5, #0]
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	6862      	ldr	r2, [r4, #4]
 80091bc:	2100      	movs	r1, #0
 80091be:	4628      	mov	r0, r5
 80091c0:	f7f7 f896 	bl	80002f0 <memchr>
 80091c4:	b108      	cbz	r0, 80091ca <_printf_i+0x1f2>
 80091c6:	1b40      	subs	r0, r0, r5
 80091c8:	6060      	str	r0, [r4, #4]
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	2300      	movs	r3, #0
 80091d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091d4:	e7a8      	b.n	8009128 <_printf_i+0x150>
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	462a      	mov	r2, r5
 80091da:	4649      	mov	r1, r9
 80091dc:	4640      	mov	r0, r8
 80091de:	47d0      	blx	sl
 80091e0:	3001      	adds	r0, #1
 80091e2:	d0ab      	beq.n	800913c <_printf_i+0x164>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	079b      	lsls	r3, r3, #30
 80091e8:	d413      	bmi.n	8009212 <_printf_i+0x23a>
 80091ea:	68e0      	ldr	r0, [r4, #12]
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	4298      	cmp	r0, r3
 80091f0:	bfb8      	it	lt
 80091f2:	4618      	movlt	r0, r3
 80091f4:	e7a4      	b.n	8009140 <_printf_i+0x168>
 80091f6:	2301      	movs	r3, #1
 80091f8:	4632      	mov	r2, r6
 80091fa:	4649      	mov	r1, r9
 80091fc:	4640      	mov	r0, r8
 80091fe:	47d0      	blx	sl
 8009200:	3001      	adds	r0, #1
 8009202:	d09b      	beq.n	800913c <_printf_i+0x164>
 8009204:	3501      	adds	r5, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	9903      	ldr	r1, [sp, #12]
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	42ab      	cmp	r3, r5
 800920e:	dcf2      	bgt.n	80091f6 <_printf_i+0x21e>
 8009210:	e7eb      	b.n	80091ea <_printf_i+0x212>
 8009212:	2500      	movs	r5, #0
 8009214:	f104 0619 	add.w	r6, r4, #25
 8009218:	e7f5      	b.n	8009206 <_printf_i+0x22e>
 800921a:	bf00      	nop
 800921c:	0800d366 	.word	0x0800d366
 8009220:	0800d377 	.word	0x0800d377

08009224 <_scanf_float>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	b087      	sub	sp, #28
 800922a:	4617      	mov	r7, r2
 800922c:	9303      	str	r3, [sp, #12]
 800922e:	688b      	ldr	r3, [r1, #8]
 8009230:	1e5a      	subs	r2, r3, #1
 8009232:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009236:	bf83      	ittte	hi
 8009238:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800923c:	195b      	addhi	r3, r3, r5
 800923e:	9302      	strhi	r3, [sp, #8]
 8009240:	2300      	movls	r3, #0
 8009242:	bf86      	itte	hi
 8009244:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009248:	608b      	strhi	r3, [r1, #8]
 800924a:	9302      	strls	r3, [sp, #8]
 800924c:	680b      	ldr	r3, [r1, #0]
 800924e:	468b      	mov	fp, r1
 8009250:	2500      	movs	r5, #0
 8009252:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009256:	f84b 3b1c 	str.w	r3, [fp], #28
 800925a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800925e:	4680      	mov	r8, r0
 8009260:	460c      	mov	r4, r1
 8009262:	465e      	mov	r6, fp
 8009264:	46aa      	mov	sl, r5
 8009266:	46a9      	mov	r9, r5
 8009268:	9501      	str	r5, [sp, #4]
 800926a:	68a2      	ldr	r2, [r4, #8]
 800926c:	b152      	cbz	r2, 8009284 <_scanf_float+0x60>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b4e      	cmp	r3, #78	; 0x4e
 8009274:	d864      	bhi.n	8009340 <_scanf_float+0x11c>
 8009276:	2b40      	cmp	r3, #64	; 0x40
 8009278:	d83c      	bhi.n	80092f4 <_scanf_float+0xd0>
 800927a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800927e:	b2c8      	uxtb	r0, r1
 8009280:	280e      	cmp	r0, #14
 8009282:	d93a      	bls.n	80092fa <_scanf_float+0xd6>
 8009284:	f1b9 0f00 	cmp.w	r9, #0
 8009288:	d003      	beq.n	8009292 <_scanf_float+0x6e>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009296:	f1ba 0f01 	cmp.w	sl, #1
 800929a:	f200 8113 	bhi.w	80094c4 <_scanf_float+0x2a0>
 800929e:	455e      	cmp	r6, fp
 80092a0:	f200 8105 	bhi.w	80094ae <_scanf_float+0x28a>
 80092a4:	2501      	movs	r5, #1
 80092a6:	4628      	mov	r0, r5
 80092a8:	b007      	add	sp, #28
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80092b2:	2a0d      	cmp	r2, #13
 80092b4:	d8e6      	bhi.n	8009284 <_scanf_float+0x60>
 80092b6:	a101      	add	r1, pc, #4	; (adr r1, 80092bc <_scanf_float+0x98>)
 80092b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80092bc:	080093fb 	.word	0x080093fb
 80092c0:	08009285 	.word	0x08009285
 80092c4:	08009285 	.word	0x08009285
 80092c8:	08009285 	.word	0x08009285
 80092cc:	0800945b 	.word	0x0800945b
 80092d0:	08009433 	.word	0x08009433
 80092d4:	08009285 	.word	0x08009285
 80092d8:	08009285 	.word	0x08009285
 80092dc:	08009409 	.word	0x08009409
 80092e0:	08009285 	.word	0x08009285
 80092e4:	08009285 	.word	0x08009285
 80092e8:	08009285 	.word	0x08009285
 80092ec:	08009285 	.word	0x08009285
 80092f0:	080093c1 	.word	0x080093c1
 80092f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80092f8:	e7db      	b.n	80092b2 <_scanf_float+0x8e>
 80092fa:	290e      	cmp	r1, #14
 80092fc:	d8c2      	bhi.n	8009284 <_scanf_float+0x60>
 80092fe:	a001      	add	r0, pc, #4	; (adr r0, 8009304 <_scanf_float+0xe0>)
 8009300:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009304:	080093b3 	.word	0x080093b3
 8009308:	08009285 	.word	0x08009285
 800930c:	080093b3 	.word	0x080093b3
 8009310:	08009447 	.word	0x08009447
 8009314:	08009285 	.word	0x08009285
 8009318:	08009361 	.word	0x08009361
 800931c:	0800939d 	.word	0x0800939d
 8009320:	0800939d 	.word	0x0800939d
 8009324:	0800939d 	.word	0x0800939d
 8009328:	0800939d 	.word	0x0800939d
 800932c:	0800939d 	.word	0x0800939d
 8009330:	0800939d 	.word	0x0800939d
 8009334:	0800939d 	.word	0x0800939d
 8009338:	0800939d 	.word	0x0800939d
 800933c:	0800939d 	.word	0x0800939d
 8009340:	2b6e      	cmp	r3, #110	; 0x6e
 8009342:	d809      	bhi.n	8009358 <_scanf_float+0x134>
 8009344:	2b60      	cmp	r3, #96	; 0x60
 8009346:	d8b2      	bhi.n	80092ae <_scanf_float+0x8a>
 8009348:	2b54      	cmp	r3, #84	; 0x54
 800934a:	d077      	beq.n	800943c <_scanf_float+0x218>
 800934c:	2b59      	cmp	r3, #89	; 0x59
 800934e:	d199      	bne.n	8009284 <_scanf_float+0x60>
 8009350:	2d07      	cmp	r5, #7
 8009352:	d197      	bne.n	8009284 <_scanf_float+0x60>
 8009354:	2508      	movs	r5, #8
 8009356:	e029      	b.n	80093ac <_scanf_float+0x188>
 8009358:	2b74      	cmp	r3, #116	; 0x74
 800935a:	d06f      	beq.n	800943c <_scanf_float+0x218>
 800935c:	2b79      	cmp	r3, #121	; 0x79
 800935e:	e7f6      	b.n	800934e <_scanf_float+0x12a>
 8009360:	6821      	ldr	r1, [r4, #0]
 8009362:	05c8      	lsls	r0, r1, #23
 8009364:	d51a      	bpl.n	800939c <_scanf_float+0x178>
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800936c:	6021      	str	r1, [r4, #0]
 800936e:	f109 0901 	add.w	r9, r9, #1
 8009372:	b11b      	cbz	r3, 800937c <_scanf_float+0x158>
 8009374:	3b01      	subs	r3, #1
 8009376:	3201      	adds	r2, #1
 8009378:	9302      	str	r3, [sp, #8]
 800937a:	60a2      	str	r2, [r4, #8]
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	3b01      	subs	r3, #1
 8009380:	60a3      	str	r3, [r4, #8]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	3301      	adds	r3, #1
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3b01      	subs	r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	f340 8084 	ble.w	800949c <_scanf_float+0x278>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	603b      	str	r3, [r7, #0]
 800939a:	e766      	b.n	800926a <_scanf_float+0x46>
 800939c:	eb1a 0f05 	cmn.w	sl, r5
 80093a0:	f47f af70 	bne.w	8009284 <_scanf_float+0x60>
 80093a4:	6822      	ldr	r2, [r4, #0]
 80093a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80093aa:	6022      	str	r2, [r4, #0]
 80093ac:	f806 3b01 	strb.w	r3, [r6], #1
 80093b0:	e7e4      	b.n	800937c <_scanf_float+0x158>
 80093b2:	6822      	ldr	r2, [r4, #0]
 80093b4:	0610      	lsls	r0, r2, #24
 80093b6:	f57f af65 	bpl.w	8009284 <_scanf_float+0x60>
 80093ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093be:	e7f4      	b.n	80093aa <_scanf_float+0x186>
 80093c0:	f1ba 0f00 	cmp.w	sl, #0
 80093c4:	d10e      	bne.n	80093e4 <_scanf_float+0x1c0>
 80093c6:	f1b9 0f00 	cmp.w	r9, #0
 80093ca:	d10e      	bne.n	80093ea <_scanf_float+0x1c6>
 80093cc:	6822      	ldr	r2, [r4, #0]
 80093ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80093d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80093d6:	d108      	bne.n	80093ea <_scanf_float+0x1c6>
 80093d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093dc:	6022      	str	r2, [r4, #0]
 80093de:	f04f 0a01 	mov.w	sl, #1
 80093e2:	e7e3      	b.n	80093ac <_scanf_float+0x188>
 80093e4:	f1ba 0f02 	cmp.w	sl, #2
 80093e8:	d055      	beq.n	8009496 <_scanf_float+0x272>
 80093ea:	2d01      	cmp	r5, #1
 80093ec:	d002      	beq.n	80093f4 <_scanf_float+0x1d0>
 80093ee:	2d04      	cmp	r5, #4
 80093f0:	f47f af48 	bne.w	8009284 <_scanf_float+0x60>
 80093f4:	3501      	adds	r5, #1
 80093f6:	b2ed      	uxtb	r5, r5
 80093f8:	e7d8      	b.n	80093ac <_scanf_float+0x188>
 80093fa:	f1ba 0f01 	cmp.w	sl, #1
 80093fe:	f47f af41 	bne.w	8009284 <_scanf_float+0x60>
 8009402:	f04f 0a02 	mov.w	sl, #2
 8009406:	e7d1      	b.n	80093ac <_scanf_float+0x188>
 8009408:	b97d      	cbnz	r5, 800942a <_scanf_float+0x206>
 800940a:	f1b9 0f00 	cmp.w	r9, #0
 800940e:	f47f af3c 	bne.w	800928a <_scanf_float+0x66>
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009418:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800941c:	f47f af39 	bne.w	8009292 <_scanf_float+0x6e>
 8009420:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	2501      	movs	r5, #1
 8009428:	e7c0      	b.n	80093ac <_scanf_float+0x188>
 800942a:	2d03      	cmp	r5, #3
 800942c:	d0e2      	beq.n	80093f4 <_scanf_float+0x1d0>
 800942e:	2d05      	cmp	r5, #5
 8009430:	e7de      	b.n	80093f0 <_scanf_float+0x1cc>
 8009432:	2d02      	cmp	r5, #2
 8009434:	f47f af26 	bne.w	8009284 <_scanf_float+0x60>
 8009438:	2503      	movs	r5, #3
 800943a:	e7b7      	b.n	80093ac <_scanf_float+0x188>
 800943c:	2d06      	cmp	r5, #6
 800943e:	f47f af21 	bne.w	8009284 <_scanf_float+0x60>
 8009442:	2507      	movs	r5, #7
 8009444:	e7b2      	b.n	80093ac <_scanf_float+0x188>
 8009446:	6822      	ldr	r2, [r4, #0]
 8009448:	0591      	lsls	r1, r2, #22
 800944a:	f57f af1b 	bpl.w	8009284 <_scanf_float+0x60>
 800944e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009452:	6022      	str	r2, [r4, #0]
 8009454:	f8cd 9004 	str.w	r9, [sp, #4]
 8009458:	e7a8      	b.n	80093ac <_scanf_float+0x188>
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009460:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009464:	d006      	beq.n	8009474 <_scanf_float+0x250>
 8009466:	0550      	lsls	r0, r2, #21
 8009468:	f57f af0c 	bpl.w	8009284 <_scanf_float+0x60>
 800946c:	f1b9 0f00 	cmp.w	r9, #0
 8009470:	f43f af0f 	beq.w	8009292 <_scanf_float+0x6e>
 8009474:	0591      	lsls	r1, r2, #22
 8009476:	bf58      	it	pl
 8009478:	9901      	ldrpl	r1, [sp, #4]
 800947a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800947e:	bf58      	it	pl
 8009480:	eba9 0101 	subpl.w	r1, r9, r1
 8009484:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009488:	bf58      	it	pl
 800948a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800948e:	6022      	str	r2, [r4, #0]
 8009490:	f04f 0900 	mov.w	r9, #0
 8009494:	e78a      	b.n	80093ac <_scanf_float+0x188>
 8009496:	f04f 0a03 	mov.w	sl, #3
 800949a:	e787      	b.n	80093ac <_scanf_float+0x188>
 800949c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094a0:	4639      	mov	r1, r7
 80094a2:	4640      	mov	r0, r8
 80094a4:	4798      	blx	r3
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f43f aedf 	beq.w	800926a <_scanf_float+0x46>
 80094ac:	e6ea      	b.n	8009284 <_scanf_float+0x60>
 80094ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094b6:	463a      	mov	r2, r7
 80094b8:	4640      	mov	r0, r8
 80094ba:	4798      	blx	r3
 80094bc:	6923      	ldr	r3, [r4, #16]
 80094be:	3b01      	subs	r3, #1
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	e6ec      	b.n	800929e <_scanf_float+0x7a>
 80094c4:	1e6b      	subs	r3, r5, #1
 80094c6:	2b06      	cmp	r3, #6
 80094c8:	d825      	bhi.n	8009516 <_scanf_float+0x2f2>
 80094ca:	2d02      	cmp	r5, #2
 80094cc:	d836      	bhi.n	800953c <_scanf_float+0x318>
 80094ce:	455e      	cmp	r6, fp
 80094d0:	f67f aee8 	bls.w	80092a4 <_scanf_float+0x80>
 80094d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094dc:	463a      	mov	r2, r7
 80094de:	4640      	mov	r0, r8
 80094e0:	4798      	blx	r3
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	6123      	str	r3, [r4, #16]
 80094e8:	e7f1      	b.n	80094ce <_scanf_float+0x2aa>
 80094ea:	9802      	ldr	r0, [sp, #8]
 80094ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80094f4:	9002      	str	r0, [sp, #8]
 80094f6:	463a      	mov	r2, r7
 80094f8:	4640      	mov	r0, r8
 80094fa:	4798      	blx	r3
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	3b01      	subs	r3, #1
 8009500:	6123      	str	r3, [r4, #16]
 8009502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009506:	fa5f fa8a 	uxtb.w	sl, sl
 800950a:	f1ba 0f02 	cmp.w	sl, #2
 800950e:	d1ec      	bne.n	80094ea <_scanf_float+0x2c6>
 8009510:	3d03      	subs	r5, #3
 8009512:	b2ed      	uxtb	r5, r5
 8009514:	1b76      	subs	r6, r6, r5
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	05da      	lsls	r2, r3, #23
 800951a:	d52f      	bpl.n	800957c <_scanf_float+0x358>
 800951c:	055b      	lsls	r3, r3, #21
 800951e:	d510      	bpl.n	8009542 <_scanf_float+0x31e>
 8009520:	455e      	cmp	r6, fp
 8009522:	f67f aebf 	bls.w	80092a4 <_scanf_float+0x80>
 8009526:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800952a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800952e:	463a      	mov	r2, r7
 8009530:	4640      	mov	r0, r8
 8009532:	4798      	blx	r3
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	3b01      	subs	r3, #1
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	e7f1      	b.n	8009520 <_scanf_float+0x2fc>
 800953c:	46aa      	mov	sl, r5
 800953e:	9602      	str	r6, [sp, #8]
 8009540:	e7df      	b.n	8009502 <_scanf_float+0x2de>
 8009542:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009546:	6923      	ldr	r3, [r4, #16]
 8009548:	2965      	cmp	r1, #101	; 0x65
 800954a:	f103 33ff 	add.w	r3, r3, #4294967295
 800954e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	d00c      	beq.n	8009570 <_scanf_float+0x34c>
 8009556:	2945      	cmp	r1, #69	; 0x45
 8009558:	d00a      	beq.n	8009570 <_scanf_float+0x34c>
 800955a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800955e:	463a      	mov	r2, r7
 8009560:	4640      	mov	r0, r8
 8009562:	4798      	blx	r3
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800956a:	3b01      	subs	r3, #1
 800956c:	1eb5      	subs	r5, r6, #2
 800956e:	6123      	str	r3, [r4, #16]
 8009570:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009574:	463a      	mov	r2, r7
 8009576:	4640      	mov	r0, r8
 8009578:	4798      	blx	r3
 800957a:	462e      	mov	r6, r5
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	f015 0510 	ands.w	r5, r5, #16
 8009582:	d14e      	bne.n	8009622 <_scanf_float+0x3fe>
 8009584:	7035      	strb	r5, [r6, #0]
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800958c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009590:	d119      	bne.n	80095c6 <_scanf_float+0x3a2>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	454b      	cmp	r3, r9
 8009596:	eba3 0209 	sub.w	r2, r3, r9
 800959a:	d121      	bne.n	80095e0 <_scanf_float+0x3bc>
 800959c:	2200      	movs	r2, #0
 800959e:	4659      	mov	r1, fp
 80095a0:	4640      	mov	r0, r8
 80095a2:	f000 fe4f 	bl	800a244 <_strtod_r>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	f012 0f02 	tst.w	r2, #2
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	d021      	beq.n	80095f6 <_scanf_float+0x3d2>
 80095b2:	9903      	ldr	r1, [sp, #12]
 80095b4:	1d1a      	adds	r2, r3, #4
 80095b6:	600a      	str	r2, [r1, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	ed83 0b00 	vstr	d0, [r3]
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	60e3      	str	r3, [r4, #12]
 80095c4:	e66f      	b.n	80092a6 <_scanf_float+0x82>
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d0e7      	beq.n	800959c <_scanf_float+0x378>
 80095cc:	9905      	ldr	r1, [sp, #20]
 80095ce:	230a      	movs	r3, #10
 80095d0:	462a      	mov	r2, r5
 80095d2:	3101      	adds	r1, #1
 80095d4:	4640      	mov	r0, r8
 80095d6:	f000 febd 	bl	800a354 <_strtol_r>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	9e05      	ldr	r6, [sp, #20]
 80095de:	1ac2      	subs	r2, r0, r3
 80095e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80095e4:	429e      	cmp	r6, r3
 80095e6:	bf28      	it	cs
 80095e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80095ec:	490e      	ldr	r1, [pc, #56]	; (8009628 <_scanf_float+0x404>)
 80095ee:	4630      	mov	r0, r6
 80095f0:	f000 f824 	bl	800963c <siprintf>
 80095f4:	e7d2      	b.n	800959c <_scanf_float+0x378>
 80095f6:	9903      	ldr	r1, [sp, #12]
 80095f8:	f012 0f04 	tst.w	r2, #4
 80095fc:	f103 0204 	add.w	r2, r3, #4
 8009600:	600a      	str	r2, [r1, #0]
 8009602:	d1d9      	bne.n	80095b8 <_scanf_float+0x394>
 8009604:	eeb4 0b40 	vcmp.f64	d0, d0
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	681e      	ldr	r6, [r3, #0]
 800960e:	d705      	bvc.n	800961c <_scanf_float+0x3f8>
 8009610:	4806      	ldr	r0, [pc, #24]	; (800962c <_scanf_float+0x408>)
 8009612:	f000 f80d 	bl	8009630 <nanf>
 8009616:	ed86 0a00 	vstr	s0, [r6]
 800961a:	e7d0      	b.n	80095be <_scanf_float+0x39a>
 800961c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009620:	e7f9      	b.n	8009616 <_scanf_float+0x3f2>
 8009622:	2500      	movs	r5, #0
 8009624:	e63f      	b.n	80092a6 <_scanf_float+0x82>
 8009626:	bf00      	nop
 8009628:	0800d388 	.word	0x0800d388
 800962c:	0800d790 	.word	0x0800d790

08009630 <nanf>:
 8009630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009638 <nanf+0x8>
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	7fc00000 	.word	0x7fc00000

0800963c <siprintf>:
 800963c:	b40e      	push	{r1, r2, r3}
 800963e:	b500      	push	{lr}
 8009640:	b09c      	sub	sp, #112	; 0x70
 8009642:	ab1d      	add	r3, sp, #116	; 0x74
 8009644:	9002      	str	r0, [sp, #8]
 8009646:	9006      	str	r0, [sp, #24]
 8009648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800964c:	4809      	ldr	r0, [pc, #36]	; (8009674 <siprintf+0x38>)
 800964e:	9107      	str	r1, [sp, #28]
 8009650:	9104      	str	r1, [sp, #16]
 8009652:	4909      	ldr	r1, [pc, #36]	; (8009678 <siprintf+0x3c>)
 8009654:	f853 2b04 	ldr.w	r2, [r3], #4
 8009658:	9105      	str	r1, [sp, #20]
 800965a:	6800      	ldr	r0, [r0, #0]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	a902      	add	r1, sp, #8
 8009660:	f002 fe4e 	bl	800c300 <_svfiprintf_r>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
 800966a:	b01c      	add	sp, #112	; 0x70
 800966c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009670:	b003      	add	sp, #12
 8009672:	4770      	bx	lr
 8009674:	24000010 	.word	0x24000010
 8009678:	ffff0208 	.word	0xffff0208

0800967c <strrchr>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4603      	mov	r3, r0
 8009680:	460c      	mov	r4, r1
 8009682:	b969      	cbnz	r1, 80096a0 <strrchr+0x24>
 8009684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009688:	f002 bf52 	b.w	800c530 <strchr>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	4605      	mov	r5, r0
 8009690:	4621      	mov	r1, r4
 8009692:	4618      	mov	r0, r3
 8009694:	f002 ff4c 	bl	800c530 <strchr>
 8009698:	2800      	cmp	r0, #0
 800969a:	d1f7      	bne.n	800968c <strrchr+0x10>
 800969c:	4628      	mov	r0, r5
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	2500      	movs	r5, #0
 80096a2:	e7f5      	b.n	8009690 <strrchr+0x14>

080096a4 <sulp>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	4604      	mov	r4, r0
 80096a8:	460d      	mov	r5, r1
 80096aa:	4616      	mov	r6, r2
 80096ac:	ec45 4b10 	vmov	d0, r4, r5
 80096b0:	f002 fb88 	bl	800bdc4 <__ulp>
 80096b4:	b17e      	cbz	r6, 80096d6 <sulp+0x32>
 80096b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096be:	2b00      	cmp	r3, #0
 80096c0:	dd09      	ble.n	80096d6 <sulp+0x32>
 80096c2:	051b      	lsls	r3, r3, #20
 80096c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80096c8:	2000      	movs	r0, #0
 80096ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80096ce:	ec41 0b17 	vmov	d7, r0, r1
 80096d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80096d6:	bd70      	pop	{r4, r5, r6, pc}

080096d8 <_strtod_l>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	ed2d 8b0e 	vpush	{d8-d14}
 80096e0:	b097      	sub	sp, #92	; 0x5c
 80096e2:	461f      	mov	r7, r3
 80096e4:	2300      	movs	r3, #0
 80096e6:	9312      	str	r3, [sp, #72]	; 0x48
 80096e8:	4ba1      	ldr	r3, [pc, #644]	; (8009970 <_strtod_l+0x298>)
 80096ea:	920d      	str	r2, [sp, #52]	; 0x34
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	9307      	str	r3, [sp, #28]
 80096f0:	4604      	mov	r4, r0
 80096f2:	4618      	mov	r0, r3
 80096f4:	468b      	mov	fp, r1
 80096f6:	f7f6 fdf3 	bl	80002e0 <strlen>
 80096fa:	f04f 0800 	mov.w	r8, #0
 80096fe:	4605      	mov	r5, r0
 8009700:	f04f 0900 	mov.w	r9, #0
 8009704:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009708:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800970a:	7813      	ldrb	r3, [r2, #0]
 800970c:	2b2b      	cmp	r3, #43	; 0x2b
 800970e:	d04d      	beq.n	80097ac <_strtod_l+0xd4>
 8009710:	d83a      	bhi.n	8009788 <_strtod_l+0xb0>
 8009712:	2b0d      	cmp	r3, #13
 8009714:	d833      	bhi.n	800977e <_strtod_l+0xa6>
 8009716:	2b08      	cmp	r3, #8
 8009718:	d833      	bhi.n	8009782 <_strtod_l+0xaa>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d03d      	beq.n	800979a <_strtod_l+0xc2>
 800971e:	2300      	movs	r3, #0
 8009720:	9308      	str	r3, [sp, #32]
 8009722:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009724:	7833      	ldrb	r3, [r6, #0]
 8009726:	2b30      	cmp	r3, #48	; 0x30
 8009728:	f040 80b0 	bne.w	800988c <_strtod_l+0x1b4>
 800972c:	7873      	ldrb	r3, [r6, #1]
 800972e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009732:	2b58      	cmp	r3, #88	; 0x58
 8009734:	d167      	bne.n	8009806 <_strtod_l+0x12e>
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	ab12      	add	r3, sp, #72	; 0x48
 800973c:	9702      	str	r7, [sp, #8]
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	4a8c      	ldr	r2, [pc, #560]	; (8009974 <_strtod_l+0x29c>)
 8009742:	ab13      	add	r3, sp, #76	; 0x4c
 8009744:	a911      	add	r1, sp, #68	; 0x44
 8009746:	4620      	mov	r0, r4
 8009748:	f001 fca4 	bl	800b094 <__gethex>
 800974c:	f010 0507 	ands.w	r5, r0, #7
 8009750:	4607      	mov	r7, r0
 8009752:	d005      	beq.n	8009760 <_strtod_l+0x88>
 8009754:	2d06      	cmp	r5, #6
 8009756:	d12b      	bne.n	80097b0 <_strtod_l+0xd8>
 8009758:	3601      	adds	r6, #1
 800975a:	2300      	movs	r3, #0
 800975c:	9611      	str	r6, [sp, #68]	; 0x44
 800975e:	9308      	str	r3, [sp, #32]
 8009760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 854e 	bne.w	800a204 <_strtod_l+0xb2c>
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	b1e3      	cbz	r3, 80097a6 <_strtod_l+0xce>
 800976c:	ec49 8b17 	vmov	d7, r8, r9
 8009770:	eeb1 0b47 	vneg.f64	d0, d7
 8009774:	b017      	add	sp, #92	; 0x5c
 8009776:	ecbd 8b0e 	vpop	{d8-d14}
 800977a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	2b20      	cmp	r3, #32
 8009780:	d1cd      	bne.n	800971e <_strtod_l+0x46>
 8009782:	3201      	adds	r2, #1
 8009784:	9211      	str	r2, [sp, #68]	; 0x44
 8009786:	e7bf      	b.n	8009708 <_strtod_l+0x30>
 8009788:	2b2d      	cmp	r3, #45	; 0x2d
 800978a:	d1c8      	bne.n	800971e <_strtod_l+0x46>
 800978c:	2301      	movs	r3, #1
 800978e:	9308      	str	r3, [sp, #32]
 8009790:	1c53      	adds	r3, r2, #1
 8009792:	9311      	str	r3, [sp, #68]	; 0x44
 8009794:	7853      	ldrb	r3, [r2, #1]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1c3      	bne.n	8009722 <_strtod_l+0x4a>
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f040 852d 	bne.w	800a200 <_strtod_l+0xb28>
 80097a6:	ec49 8b10 	vmov	d0, r8, r9
 80097aa:	e7e3      	b.n	8009774 <_strtod_l+0x9c>
 80097ac:	2300      	movs	r3, #0
 80097ae:	e7ee      	b.n	800978e <_strtod_l+0xb6>
 80097b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097b2:	b13a      	cbz	r2, 80097c4 <_strtod_l+0xec>
 80097b4:	2135      	movs	r1, #53	; 0x35
 80097b6:	a814      	add	r0, sp, #80	; 0x50
 80097b8:	f002 fc0c 	bl	800bfd4 <__copybits>
 80097bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80097be:	4620      	mov	r0, r4
 80097c0:	f001 ffce 	bl	800b760 <_Bfree>
 80097c4:	3d01      	subs	r5, #1
 80097c6:	2d04      	cmp	r5, #4
 80097c8:	d806      	bhi.n	80097d8 <_strtod_l+0x100>
 80097ca:	e8df f005 	tbb	[pc, r5]
 80097ce:	030a      	.short	0x030a
 80097d0:	1714      	.short	0x1714
 80097d2:	0a          	.byte	0x0a
 80097d3:	00          	.byte	0x00
 80097d4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80097d8:	073f      	lsls	r7, r7, #28
 80097da:	d5c1      	bpl.n	8009760 <_strtod_l+0x88>
 80097dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80097e0:	e7be      	b.n	8009760 <_strtod_l+0x88>
 80097e2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80097e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80097e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80097f4:	e7f0      	b.n	80097d8 <_strtod_l+0x100>
 80097f6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009978 <_strtod_l+0x2a0>
 80097fa:	e7ed      	b.n	80097d8 <_strtod_l+0x100>
 80097fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009800:	f04f 38ff 	mov.w	r8, #4294967295
 8009804:	e7e8      	b.n	80097d8 <_strtod_l+0x100>
 8009806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	9211      	str	r2, [sp, #68]	; 0x44
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	2b30      	cmp	r3, #48	; 0x30
 8009810:	d0f9      	beq.n	8009806 <_strtod_l+0x12e>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0a4      	beq.n	8009760 <_strtod_l+0x88>
 8009816:	2301      	movs	r3, #1
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009820:	930a      	str	r3, [sp, #40]	; 0x28
 8009822:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009826:	f8cd a018 	str.w	sl, [sp, #24]
 800982a:	220a      	movs	r2, #10
 800982c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800982e:	7807      	ldrb	r7, [r0, #0]
 8009830:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009834:	b2d9      	uxtb	r1, r3
 8009836:	2909      	cmp	r1, #9
 8009838:	d92a      	bls.n	8009890 <_strtod_l+0x1b8>
 800983a:	9907      	ldr	r1, [sp, #28]
 800983c:	462a      	mov	r2, r5
 800983e:	f002 fe84 	bl	800c54a <strncmp>
 8009842:	2800      	cmp	r0, #0
 8009844:	d033      	beq.n	80098ae <_strtod_l+0x1d6>
 8009846:	2000      	movs	r0, #0
 8009848:	9b06      	ldr	r3, [sp, #24]
 800984a:	463a      	mov	r2, r7
 800984c:	4601      	mov	r1, r0
 800984e:	4607      	mov	r7, r0
 8009850:	2a65      	cmp	r2, #101	; 0x65
 8009852:	d001      	beq.n	8009858 <_strtod_l+0x180>
 8009854:	2a45      	cmp	r2, #69	; 0x45
 8009856:	d117      	bne.n	8009888 <_strtod_l+0x1b0>
 8009858:	b91b      	cbnz	r3, 8009862 <_strtod_l+0x18a>
 800985a:	9b04      	ldr	r3, [sp, #16]
 800985c:	4303      	orrs	r3, r0
 800985e:	d09c      	beq.n	800979a <_strtod_l+0xc2>
 8009860:	2300      	movs	r3, #0
 8009862:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8009866:	f10b 0201 	add.w	r2, fp, #1
 800986a:	9211      	str	r2, [sp, #68]	; 0x44
 800986c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8009870:	2a2b      	cmp	r2, #43	; 0x2b
 8009872:	d071      	beq.n	8009958 <_strtod_l+0x280>
 8009874:	2a2d      	cmp	r2, #45	; 0x2d
 8009876:	d077      	beq.n	8009968 <_strtod_l+0x290>
 8009878:	f04f 0e00 	mov.w	lr, #0
 800987c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009880:	2d09      	cmp	r5, #9
 8009882:	d97f      	bls.n	8009984 <_strtod_l+0x2ac>
 8009884:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8009888:	2500      	movs	r5, #0
 800988a:	e09b      	b.n	80099c4 <_strtod_l+0x2ec>
 800988c:	2300      	movs	r3, #0
 800988e:	e7c3      	b.n	8009818 <_strtod_l+0x140>
 8009890:	9906      	ldr	r1, [sp, #24]
 8009892:	2908      	cmp	r1, #8
 8009894:	bfdd      	ittte	le
 8009896:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009898:	fb02 3301 	mlale	r3, r2, r1, r3
 800989c:	9309      	strle	r3, [sp, #36]	; 0x24
 800989e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80098a2:	9b06      	ldr	r3, [sp, #24]
 80098a4:	3001      	adds	r0, #1
 80098a6:	3301      	adds	r3, #1
 80098a8:	9306      	str	r3, [sp, #24]
 80098aa:	9011      	str	r0, [sp, #68]	; 0x44
 80098ac:	e7be      	b.n	800982c <_strtod_l+0x154>
 80098ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098b0:	195a      	adds	r2, r3, r5
 80098b2:	9211      	str	r2, [sp, #68]	; 0x44
 80098b4:	5d5a      	ldrb	r2, [r3, r5]
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	b3a3      	cbz	r3, 8009924 <_strtod_l+0x24c>
 80098ba:	4607      	mov	r7, r0
 80098bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098c0:	2909      	cmp	r1, #9
 80098c2:	d912      	bls.n	80098ea <_strtod_l+0x212>
 80098c4:	2101      	movs	r1, #1
 80098c6:	e7c3      	b.n	8009850 <_strtod_l+0x178>
 80098c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	9211      	str	r2, [sp, #68]	; 0x44
 80098ce:	785a      	ldrb	r2, [r3, #1]
 80098d0:	3001      	adds	r0, #1
 80098d2:	2a30      	cmp	r2, #48	; 0x30
 80098d4:	d0f8      	beq.n	80098c8 <_strtod_l+0x1f0>
 80098d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80098da:	2b08      	cmp	r3, #8
 80098dc:	f200 8497 	bhi.w	800a20e <_strtod_l+0xb36>
 80098e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098e2:	930a      	str	r3, [sp, #40]	; 0x28
 80098e4:	4607      	mov	r7, r0
 80098e6:	2000      	movs	r0, #0
 80098e8:	4603      	mov	r3, r0
 80098ea:	3a30      	subs	r2, #48	; 0x30
 80098ec:	f100 0101 	add.w	r1, r0, #1
 80098f0:	d012      	beq.n	8009918 <_strtod_l+0x240>
 80098f2:	440f      	add	r7, r1
 80098f4:	eb00 0c03 	add.w	ip, r0, r3
 80098f8:	4619      	mov	r1, r3
 80098fa:	250a      	movs	r5, #10
 80098fc:	4561      	cmp	r1, ip
 80098fe:	d113      	bne.n	8009928 <_strtod_l+0x250>
 8009900:	1819      	adds	r1, r3, r0
 8009902:	2908      	cmp	r1, #8
 8009904:	f103 0301 	add.w	r3, r3, #1
 8009908:	4403      	add	r3, r0
 800990a:	dc1c      	bgt.n	8009946 <_strtod_l+0x26e>
 800990c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800990e:	210a      	movs	r1, #10
 8009910:	fb01 2200 	mla	r2, r1, r0, r2
 8009914:	9209      	str	r2, [sp, #36]	; 0x24
 8009916:	2100      	movs	r1, #0
 8009918:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800991a:	1c50      	adds	r0, r2, #1
 800991c:	9011      	str	r0, [sp, #68]	; 0x44
 800991e:	7852      	ldrb	r2, [r2, #1]
 8009920:	4608      	mov	r0, r1
 8009922:	e7cb      	b.n	80098bc <_strtod_l+0x1e4>
 8009924:	9806      	ldr	r0, [sp, #24]
 8009926:	e7d4      	b.n	80098d2 <_strtod_l+0x1fa>
 8009928:	2908      	cmp	r1, #8
 800992a:	dc04      	bgt.n	8009936 <_strtod_l+0x25e>
 800992c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800992e:	436e      	muls	r6, r5
 8009930:	9609      	str	r6, [sp, #36]	; 0x24
 8009932:	3101      	adds	r1, #1
 8009934:	e7e2      	b.n	80098fc <_strtod_l+0x224>
 8009936:	f101 0e01 	add.w	lr, r1, #1
 800993a:	f1be 0f10 	cmp.w	lr, #16
 800993e:	bfd8      	it	le
 8009940:	fb05 fa0a 	mulle.w	sl, r5, sl
 8009944:	e7f5      	b.n	8009932 <_strtod_l+0x25a>
 8009946:	2b10      	cmp	r3, #16
 8009948:	bfdc      	itt	le
 800994a:	210a      	movle	r1, #10
 800994c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009950:	e7e1      	b.n	8009916 <_strtod_l+0x23e>
 8009952:	2700      	movs	r7, #0
 8009954:	2101      	movs	r1, #1
 8009956:	e780      	b.n	800985a <_strtod_l+0x182>
 8009958:	f04f 0e00 	mov.w	lr, #0
 800995c:	f10b 0202 	add.w	r2, fp, #2
 8009960:	9211      	str	r2, [sp, #68]	; 0x44
 8009962:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8009966:	e789      	b.n	800987c <_strtod_l+0x1a4>
 8009968:	f04f 0e01 	mov.w	lr, #1
 800996c:	e7f6      	b.n	800995c <_strtod_l+0x284>
 800996e:	bf00      	nop
 8009970:	0800d5d8 	.word	0x0800d5d8
 8009974:	0800d390 	.word	0x0800d390
 8009978:	7ff00000 	.word	0x7ff00000
 800997c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800997e:	1c55      	adds	r5, r2, #1
 8009980:	9511      	str	r5, [sp, #68]	; 0x44
 8009982:	7852      	ldrb	r2, [r2, #1]
 8009984:	2a30      	cmp	r2, #48	; 0x30
 8009986:	d0f9      	beq.n	800997c <_strtod_l+0x2a4>
 8009988:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800998c:	2d08      	cmp	r5, #8
 800998e:	f63f af7b 	bhi.w	8009888 <_strtod_l+0x1b0>
 8009992:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009998:	9207      	str	r2, [sp, #28]
 800999a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800999c:	1c55      	adds	r5, r2, #1
 800999e:	9511      	str	r5, [sp, #68]	; 0x44
 80099a0:	7852      	ldrb	r2, [r2, #1]
 80099a2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80099a6:	2e09      	cmp	r6, #9
 80099a8:	d937      	bls.n	8009a1a <_strtod_l+0x342>
 80099aa:	9e07      	ldr	r6, [sp, #28]
 80099ac:	1bad      	subs	r5, r5, r6
 80099ae:	2d08      	cmp	r5, #8
 80099b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80099b4:	dc02      	bgt.n	80099bc <_strtod_l+0x2e4>
 80099b6:	4565      	cmp	r5, ip
 80099b8:	bfa8      	it	ge
 80099ba:	4665      	movge	r5, ip
 80099bc:	f1be 0f00 	cmp.w	lr, #0
 80099c0:	d000      	beq.n	80099c4 <_strtod_l+0x2ec>
 80099c2:	426d      	negs	r5, r5
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d14d      	bne.n	8009a64 <_strtod_l+0x38c>
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	4303      	orrs	r3, r0
 80099cc:	f47f aec8 	bne.w	8009760 <_strtod_l+0x88>
 80099d0:	2900      	cmp	r1, #0
 80099d2:	f47f aee2 	bne.w	800979a <_strtod_l+0xc2>
 80099d6:	2a69      	cmp	r2, #105	; 0x69
 80099d8:	d027      	beq.n	8009a2a <_strtod_l+0x352>
 80099da:	dc24      	bgt.n	8009a26 <_strtod_l+0x34e>
 80099dc:	2a49      	cmp	r2, #73	; 0x49
 80099de:	d024      	beq.n	8009a2a <_strtod_l+0x352>
 80099e0:	2a4e      	cmp	r2, #78	; 0x4e
 80099e2:	f47f aeda 	bne.w	800979a <_strtod_l+0xc2>
 80099e6:	4996      	ldr	r1, [pc, #600]	; (8009c40 <_strtod_l+0x568>)
 80099e8:	a811      	add	r0, sp, #68	; 0x44
 80099ea:	f001 fdab 	bl	800b544 <__match>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f aed3 	beq.w	800979a <_strtod_l+0xc2>
 80099f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b28      	cmp	r3, #40	; 0x28
 80099fa:	d12d      	bne.n	8009a58 <_strtod_l+0x380>
 80099fc:	4991      	ldr	r1, [pc, #580]	; (8009c44 <_strtod_l+0x56c>)
 80099fe:	aa14      	add	r2, sp, #80	; 0x50
 8009a00:	a811      	add	r0, sp, #68	; 0x44
 8009a02:	f001 fdb3 	bl	800b56c <__hexnan>
 8009a06:	2805      	cmp	r0, #5
 8009a08:	d126      	bne.n	8009a58 <_strtod_l+0x380>
 8009a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a0c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009a10:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009a14:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009a18:	e6a2      	b.n	8009760 <_strtod_l+0x88>
 8009a1a:	250a      	movs	r5, #10
 8009a1c:	fb05 250c 	mla	r5, r5, ip, r2
 8009a20:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8009a24:	e7b9      	b.n	800999a <_strtod_l+0x2c2>
 8009a26:	2a6e      	cmp	r2, #110	; 0x6e
 8009a28:	e7db      	b.n	80099e2 <_strtod_l+0x30a>
 8009a2a:	4987      	ldr	r1, [pc, #540]	; (8009c48 <_strtod_l+0x570>)
 8009a2c:	a811      	add	r0, sp, #68	; 0x44
 8009a2e:	f001 fd89 	bl	800b544 <__match>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	f43f aeb1 	beq.w	800979a <_strtod_l+0xc2>
 8009a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a3a:	4984      	ldr	r1, [pc, #528]	; (8009c4c <_strtod_l+0x574>)
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	a811      	add	r0, sp, #68	; 0x44
 8009a40:	9311      	str	r3, [sp, #68]	; 0x44
 8009a42:	f001 fd7f 	bl	800b544 <__match>
 8009a46:	b910      	cbnz	r0, 8009a4e <_strtod_l+0x376>
 8009a48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	9311      	str	r3, [sp, #68]	; 0x44
 8009a4e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009c60 <_strtod_l+0x588>
 8009a52:	f04f 0800 	mov.w	r8, #0
 8009a56:	e683      	b.n	8009760 <_strtod_l+0x88>
 8009a58:	487d      	ldr	r0, [pc, #500]	; (8009c50 <_strtod_l+0x578>)
 8009a5a:	f002 fd51 	bl	800c500 <nan>
 8009a5e:	ec59 8b10 	vmov	r8, r9, d0
 8009a62:	e67d      	b.n	8009760 <_strtod_l+0x88>
 8009a64:	1bea      	subs	r2, r5, r7
 8009a66:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009a6a:	9207      	str	r2, [sp, #28]
 8009a6c:	9a06      	ldr	r2, [sp, #24]
 8009a6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	bf08      	it	eq
 8009a76:	461a      	moveq	r2, r3
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	9206      	str	r2, [sp, #24]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	bfa8      	it	ge
 8009a80:	2210      	movge	r2, #16
 8009a82:	2b09      	cmp	r3, #9
 8009a84:	ec59 8b17 	vmov	r8, r9, d7
 8009a88:	dd0c      	ble.n	8009aa4 <_strtod_l+0x3cc>
 8009a8a:	4972      	ldr	r1, [pc, #456]	; (8009c54 <_strtod_l+0x57c>)
 8009a8c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009a90:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009a94:	ee06 aa90 	vmov	s13, sl
 8009a98:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009a9c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009aa0:	ec59 8b16 	vmov	r8, r9, d6
 8009aa4:	2b0f      	cmp	r3, #15
 8009aa6:	dc36      	bgt.n	8009b16 <_strtod_l+0x43e>
 8009aa8:	9907      	ldr	r1, [sp, #28]
 8009aaa:	2900      	cmp	r1, #0
 8009aac:	f43f ae58 	beq.w	8009760 <_strtod_l+0x88>
 8009ab0:	dd23      	ble.n	8009afa <_strtod_l+0x422>
 8009ab2:	2916      	cmp	r1, #22
 8009ab4:	dc0b      	bgt.n	8009ace <_strtod_l+0x3f6>
 8009ab6:	4b67      	ldr	r3, [pc, #412]	; (8009c54 <_strtod_l+0x57c>)
 8009ab8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009abc:	ed93 7b00 	vldr	d7, [r3]
 8009ac0:	ec49 8b16 	vmov	d6, r8, r9
 8009ac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ac8:	ec59 8b17 	vmov	r8, r9, d7
 8009acc:	e648      	b.n	8009760 <_strtod_l+0x88>
 8009ace:	9807      	ldr	r0, [sp, #28]
 8009ad0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009ad4:	4281      	cmp	r1, r0
 8009ad6:	db1e      	blt.n	8009b16 <_strtod_l+0x43e>
 8009ad8:	4a5e      	ldr	r2, [pc, #376]	; (8009c54 <_strtod_l+0x57c>)
 8009ada:	f1c3 030f 	rsb	r3, r3, #15
 8009ade:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009ae2:	ed91 7b00 	vldr	d7, [r1]
 8009ae6:	ec49 8b16 	vmov	d6, r8, r9
 8009aea:	1ac3      	subs	r3, r0, r3
 8009aec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009af0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009af4:	ed92 6b00 	vldr	d6, [r2]
 8009af8:	e7e4      	b.n	8009ac4 <_strtod_l+0x3ec>
 8009afa:	9907      	ldr	r1, [sp, #28]
 8009afc:	3116      	adds	r1, #22
 8009afe:	db0a      	blt.n	8009b16 <_strtod_l+0x43e>
 8009b00:	4b54      	ldr	r3, [pc, #336]	; (8009c54 <_strtod_l+0x57c>)
 8009b02:	1b7d      	subs	r5, r7, r5
 8009b04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009b08:	ed95 7b00 	vldr	d7, [r5]
 8009b0c:	ec49 8b16 	vmov	d6, r8, r9
 8009b10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b14:	e7d8      	b.n	8009ac8 <_strtod_l+0x3f0>
 8009b16:	9907      	ldr	r1, [sp, #28]
 8009b18:	1a9a      	subs	r2, r3, r2
 8009b1a:	440a      	add	r2, r1
 8009b1c:	2a00      	cmp	r2, #0
 8009b1e:	dd6f      	ble.n	8009c00 <_strtod_l+0x528>
 8009b20:	f012 000f 	ands.w	r0, r2, #15
 8009b24:	d00a      	beq.n	8009b3c <_strtod_l+0x464>
 8009b26:	494b      	ldr	r1, [pc, #300]	; (8009c54 <_strtod_l+0x57c>)
 8009b28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b2c:	ed91 7b00 	vldr	d7, [r1]
 8009b30:	ec49 8b16 	vmov	d6, r8, r9
 8009b34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b38:	ec59 8b17 	vmov	r8, r9, d7
 8009b3c:	f032 020f 	bics.w	r2, r2, #15
 8009b40:	d04f      	beq.n	8009be2 <_strtod_l+0x50a>
 8009b42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009b46:	dd22      	ble.n	8009b8e <_strtod_l+0x4b6>
 8009b48:	2500      	movs	r5, #0
 8009b4a:	462e      	mov	r6, r5
 8009b4c:	9506      	str	r5, [sp, #24]
 8009b4e:	462f      	mov	r7, r5
 8009b50:	2322      	movs	r3, #34	; 0x22
 8009b52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009c60 <_strtod_l+0x588>
 8009b56:	6023      	str	r3, [r4, #0]
 8009b58:	f04f 0800 	mov.w	r8, #0
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f43f adfe 	beq.w	8009760 <_strtod_l+0x88>
 8009b64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b66:	4620      	mov	r0, r4
 8009b68:	f001 fdfa 	bl	800b760 <_Bfree>
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f001 fdf6 	bl	800b760 <_Bfree>
 8009b74:	4631      	mov	r1, r6
 8009b76:	4620      	mov	r0, r4
 8009b78:	f001 fdf2 	bl	800b760 <_Bfree>
 8009b7c:	9906      	ldr	r1, [sp, #24]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f001 fdee 	bl	800b760 <_Bfree>
 8009b84:	4629      	mov	r1, r5
 8009b86:	4620      	mov	r0, r4
 8009b88:	f001 fdea 	bl	800b760 <_Bfree>
 8009b8c:	e5e8      	b.n	8009760 <_strtod_l+0x88>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	ec49 8b17 	vmov	d7, r8, r9
 8009b94:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009c58 <_strtod_l+0x580>
 8009b98:	1112      	asrs	r2, r2, #4
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	dc23      	bgt.n	8009be8 <_strtod_l+0x510>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_strtod_l+0x4ce>
 8009ba2:	ec59 8b17 	vmov	r8, r9, d7
 8009ba6:	4a2c      	ldr	r2, [pc, #176]	; (8009c58 <_strtod_l+0x580>)
 8009ba8:	482c      	ldr	r0, [pc, #176]	; (8009c5c <_strtod_l+0x584>)
 8009baa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009bae:	ed92 7b00 	vldr	d7, [r2]
 8009bb2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009bb6:	ec49 8b16 	vmov	d6, r8, r9
 8009bba:	4a29      	ldr	r2, [pc, #164]	; (8009c60 <_strtod_l+0x588>)
 8009bbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bc0:	ee17 1a90 	vmov	r1, s15
 8009bc4:	400a      	ands	r2, r1
 8009bc6:	4282      	cmp	r2, r0
 8009bc8:	ec59 8b17 	vmov	r8, r9, d7
 8009bcc:	d8bc      	bhi.n	8009b48 <_strtod_l+0x470>
 8009bce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009bd2:	4282      	cmp	r2, r0
 8009bd4:	bf86      	itte	hi
 8009bd6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009c64 <_strtod_l+0x58c>
 8009bda:	f04f 38ff 	movhi.w	r8, #4294967295
 8009bde:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009be2:	2200      	movs	r2, #0
 8009be4:	9204      	str	r2, [sp, #16]
 8009be6:	e078      	b.n	8009cda <_strtod_l+0x602>
 8009be8:	07d6      	lsls	r6, r2, #31
 8009bea:	d504      	bpl.n	8009bf6 <_strtod_l+0x51e>
 8009bec:	ed9c 6b00 	vldr	d6, [ip]
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	1052      	asrs	r2, r2, #1
 8009bfa:	f10c 0c08 	add.w	ip, ip, #8
 8009bfe:	e7cd      	b.n	8009b9c <_strtod_l+0x4c4>
 8009c00:	d0ef      	beq.n	8009be2 <_strtod_l+0x50a>
 8009c02:	4252      	negs	r2, r2
 8009c04:	f012 000f 	ands.w	r0, r2, #15
 8009c08:	d00a      	beq.n	8009c20 <_strtod_l+0x548>
 8009c0a:	4912      	ldr	r1, [pc, #72]	; (8009c54 <_strtod_l+0x57c>)
 8009c0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009c10:	ed91 7b00 	vldr	d7, [r1]
 8009c14:	ec49 8b16 	vmov	d6, r8, r9
 8009c18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c1c:	ec59 8b17 	vmov	r8, r9, d7
 8009c20:	1112      	asrs	r2, r2, #4
 8009c22:	d0de      	beq.n	8009be2 <_strtod_l+0x50a>
 8009c24:	2a1f      	cmp	r2, #31
 8009c26:	dd1f      	ble.n	8009c68 <_strtod_l+0x590>
 8009c28:	2500      	movs	r5, #0
 8009c2a:	462e      	mov	r6, r5
 8009c2c:	9506      	str	r5, [sp, #24]
 8009c2e:	462f      	mov	r7, r5
 8009c30:	2322      	movs	r3, #34	; 0x22
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	6023      	str	r3, [r4, #0]
 8009c3c:	e78e      	b.n	8009b5c <_strtod_l+0x484>
 8009c3e:	bf00      	nop
 8009c40:	0800d361 	.word	0x0800d361
 8009c44:	0800d3a4 	.word	0x0800d3a4
 8009c48:	0800d359 	.word	0x0800d359
 8009c4c:	0800d4e4 	.word	0x0800d4e4
 8009c50:	0800d790 	.word	0x0800d790
 8009c54:	0800d670 	.word	0x0800d670
 8009c58:	0800d648 	.word	0x0800d648
 8009c5c:	7ca00000 	.word	0x7ca00000
 8009c60:	7ff00000 	.word	0x7ff00000
 8009c64:	7fefffff 	.word	0x7fefffff
 8009c68:	f012 0110 	ands.w	r1, r2, #16
 8009c6c:	bf18      	it	ne
 8009c6e:	216a      	movne	r1, #106	; 0x6a
 8009c70:	9104      	str	r1, [sp, #16]
 8009c72:	ec49 8b17 	vmov	d7, r8, r9
 8009c76:	49be      	ldr	r1, [pc, #760]	; (8009f70 <_strtod_l+0x898>)
 8009c78:	2000      	movs	r0, #0
 8009c7a:	07d6      	lsls	r6, r2, #31
 8009c7c:	d504      	bpl.n	8009c88 <_strtod_l+0x5b0>
 8009c7e:	ed91 6b00 	vldr	d6, [r1]
 8009c82:	2001      	movs	r0, #1
 8009c84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c88:	1052      	asrs	r2, r2, #1
 8009c8a:	f101 0108 	add.w	r1, r1, #8
 8009c8e:	d1f4      	bne.n	8009c7a <_strtod_l+0x5a2>
 8009c90:	b108      	cbz	r0, 8009c96 <_strtod_l+0x5be>
 8009c92:	ec59 8b17 	vmov	r8, r9, d7
 8009c96:	9a04      	ldr	r2, [sp, #16]
 8009c98:	b1c2      	cbz	r2, 8009ccc <_strtod_l+0x5f4>
 8009c9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009c9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	4648      	mov	r0, r9
 8009ca6:	dd11      	ble.n	8009ccc <_strtod_l+0x5f4>
 8009ca8:	2a1f      	cmp	r2, #31
 8009caa:	f340 812e 	ble.w	8009f0a <_strtod_l+0x832>
 8009cae:	2a34      	cmp	r2, #52	; 0x34
 8009cb0:	bfde      	ittt	le
 8009cb2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009cb6:	f04f 32ff 	movle.w	r2, #4294967295
 8009cba:	fa02 f101 	lslle.w	r1, r2, r1
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	bfcc      	ite	gt
 8009cc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009cc8:	ea01 0900 	andle.w	r9, r1, r0
 8009ccc:	ec49 8b17 	vmov	d7, r8, r9
 8009cd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd8:	d0a6      	beq.n	8009c28 <_strtod_l+0x550>
 8009cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cdc:	9200      	str	r2, [sp, #0]
 8009cde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ce0:	9a06      	ldr	r2, [sp, #24]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f001 fda4 	bl	800b830 <__s2b>
 8009ce8:	9006      	str	r0, [sp, #24]
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f43f af2c 	beq.w	8009b48 <_strtod_l+0x470>
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	1b7d      	subs	r5, r7, r5
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb4      	ite	lt
 8009cf8:	462b      	movlt	r3, r5
 8009cfa:	2300      	movge	r3, #0
 8009cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfe:	9b07      	ldr	r3, [sp, #28]
 8009d00:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009f50 <_strtod_l+0x878>
 8009d04:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009f58 <_strtod_l+0x880>
 8009d08:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009f60 <_strtod_l+0x888>
 8009d0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d10:	2500      	movs	r5, #0
 8009d12:	930c      	str	r3, [sp, #48]	; 0x30
 8009d14:	462e      	mov	r6, r5
 8009d16:	9b06      	ldr	r3, [sp, #24]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	6859      	ldr	r1, [r3, #4]
 8009d1c:	f001 fce0 	bl	800b6e0 <_Balloc>
 8009d20:	4607      	mov	r7, r0
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f43f af14 	beq.w	8009b50 <_strtod_l+0x478>
 8009d28:	9b06      	ldr	r3, [sp, #24]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	3202      	adds	r2, #2
 8009d2e:	f103 010c 	add.w	r1, r3, #12
 8009d32:	0092      	lsls	r2, r2, #2
 8009d34:	300c      	adds	r0, #12
 8009d36:	f7fe fe1d 	bl	8008974 <memcpy>
 8009d3a:	ec49 8b10 	vmov	d0, r8, r9
 8009d3e:	aa14      	add	r2, sp, #80	; 0x50
 8009d40:	a913      	add	r1, sp, #76	; 0x4c
 8009d42:	4620      	mov	r0, r4
 8009d44:	f002 f8ba 	bl	800bebc <__d2b>
 8009d48:	ec49 8b18 	vmov	d8, r8, r9
 8009d4c:	9012      	str	r0, [sp, #72]	; 0x48
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	f43f aefe 	beq.w	8009b50 <_strtod_l+0x478>
 8009d54:	2101      	movs	r1, #1
 8009d56:	4620      	mov	r0, r4
 8009d58:	f001 fe04 	bl	800b964 <__i2b>
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f aef6 	beq.w	8009b50 <_strtod_l+0x478>
 8009d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d66:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfab      	itete	ge
 8009d6c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009d6e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009d70:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009d74:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009d78:	bfac      	ite	ge
 8009d7a:	eb03 0b02 	addge.w	fp, r3, r2
 8009d7e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009d82:	9a04      	ldr	r2, [sp, #16]
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	440b      	add	r3, r1
 8009d88:	4a7a      	ldr	r2, [pc, #488]	; (8009f74 <_strtod_l+0x89c>)
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009d92:	f280 80cd 	bge.w	8009f30 <_strtod_l+0x858>
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	2a1f      	cmp	r2, #31
 8009d9a:	eba1 0102 	sub.w	r1, r1, r2
 8009d9e:	f04f 0001 	mov.w	r0, #1
 8009da2:	f300 80b9 	bgt.w	8009f18 <_strtod_l+0x840>
 8009da6:	fa00 f302 	lsl.w	r3, r0, r2
 8009daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dac:	2300      	movs	r3, #0
 8009dae:	930a      	str	r3, [sp, #40]	; 0x28
 8009db0:	eb0b 0301 	add.w	r3, fp, r1
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	459b      	cmp	fp, r3
 8009db8:	448a      	add	sl, r1
 8009dba:	4492      	add	sl, r2
 8009dbc:	465a      	mov	r2, fp
 8009dbe:	bfa8      	it	ge
 8009dc0:	461a      	movge	r2, r3
 8009dc2:	4552      	cmp	r2, sl
 8009dc4:	bfa8      	it	ge
 8009dc6:	4652      	movge	r2, sl
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	bfc2      	ittt	gt
 8009dcc:	1a9b      	subgt	r3, r3, r2
 8009dce:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009dd2:	ebab 0b02 	subgt.w	fp, fp, r2
 8009dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dd8:	2a00      	cmp	r2, #0
 8009dda:	dd18      	ble.n	8009e0e <_strtod_l+0x736>
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4620      	mov	r0, r4
 8009de0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de2:	f001 fe7f 	bl	800bae4 <__pow5mult>
 8009de6:	4606      	mov	r6, r0
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f43f aeb1 	beq.w	8009b50 <_strtod_l+0x478>
 8009dee:	4601      	mov	r1, r0
 8009df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009df2:	4620      	mov	r0, r4
 8009df4:	f001 fdcc 	bl	800b990 <__multiply>
 8009df8:	900e      	str	r0, [sp, #56]	; 0x38
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f43f aea8 	beq.w	8009b50 <_strtod_l+0x478>
 8009e00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 fcac 	bl	800b760 <_Bfree>
 8009e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e0c:	9212      	str	r2, [sp, #72]	; 0x48
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f300 8093 	bgt.w	8009f3a <_strtod_l+0x862>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dd08      	ble.n	8009e2c <_strtod_l+0x754>
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f001 fe60 	bl	800bae4 <__pow5mult>
 8009e24:	4607      	mov	r7, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f ae92 	beq.w	8009b50 <_strtod_l+0x478>
 8009e2c:	f1ba 0f00 	cmp.w	sl, #0
 8009e30:	dd08      	ble.n	8009e44 <_strtod_l+0x76c>
 8009e32:	4639      	mov	r1, r7
 8009e34:	4652      	mov	r2, sl
 8009e36:	4620      	mov	r0, r4
 8009e38:	f001 feae 	bl	800bb98 <__lshift>
 8009e3c:	4607      	mov	r7, r0
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	f43f ae86 	beq.w	8009b50 <_strtod_l+0x478>
 8009e44:	f1bb 0f00 	cmp.w	fp, #0
 8009e48:	dd08      	ble.n	8009e5c <_strtod_l+0x784>
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	465a      	mov	r2, fp
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f001 fea2 	bl	800bb98 <__lshift>
 8009e54:	4606      	mov	r6, r0
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f ae7a 	beq.w	8009b50 <_strtod_l+0x478>
 8009e5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009e5e:	463a      	mov	r2, r7
 8009e60:	4620      	mov	r0, r4
 8009e62:	f001 ff25 	bl	800bcb0 <__mdiff>
 8009e66:	4605      	mov	r5, r0
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	f43f ae71 	beq.w	8009b50 <_strtod_l+0x478>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009e74:	60c3      	str	r3, [r0, #12]
 8009e76:	4631      	mov	r1, r6
 8009e78:	f001 fefe 	bl	800bc78 <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	da7d      	bge.n	8009f7c <_strtod_l+0x8a4>
 8009e80:	ea5a 0308 	orrs.w	r3, sl, r8
 8009e84:	f040 80a3 	bne.w	8009fce <_strtod_l+0x8f6>
 8009e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f040 809e 	bne.w	8009fce <_strtod_l+0x8f6>
 8009e92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e96:	0d1b      	lsrs	r3, r3, #20
 8009e98:	051b      	lsls	r3, r3, #20
 8009e9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e9e:	f240 8096 	bls.w	8009fce <_strtod_l+0x8f6>
 8009ea2:	696b      	ldr	r3, [r5, #20]
 8009ea4:	b91b      	cbnz	r3, 8009eae <_strtod_l+0x7d6>
 8009ea6:	692b      	ldr	r3, [r5, #16]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	f340 8090 	ble.w	8009fce <_strtod_l+0x8f6>
 8009eae:	4629      	mov	r1, r5
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f001 fe70 	bl	800bb98 <__lshift>
 8009eb8:	4631      	mov	r1, r6
 8009eba:	4605      	mov	r5, r0
 8009ebc:	f001 fedc 	bl	800bc78 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f340 8084 	ble.w	8009fce <_strtod_l+0x8f6>
 8009ec6:	9904      	ldr	r1, [sp, #16]
 8009ec8:	4a2b      	ldr	r2, [pc, #172]	; (8009f78 <_strtod_l+0x8a0>)
 8009eca:	464b      	mov	r3, r9
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	f000 809d 	beq.w	800a00c <_strtod_l+0x934>
 8009ed2:	ea02 0109 	and.w	r1, r2, r9
 8009ed6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009eda:	f300 8097 	bgt.w	800a00c <_strtod_l+0x934>
 8009ede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ee2:	f77f aea5 	ble.w	8009c30 <_strtod_l+0x558>
 8009ee6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009f68 <_strtod_l+0x890>
 8009eea:	ec49 8b16 	vmov	d6, r8, r9
 8009eee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ef2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ef6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	bf08      	it	eq
 8009efe:	2322      	moveq	r3, #34	; 0x22
 8009f00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f04:	bf08      	it	eq
 8009f06:	6023      	streq	r3, [r4, #0]
 8009f08:	e62c      	b.n	8009b64 <_strtod_l+0x48c>
 8009f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8009f12:	ea02 0808 	and.w	r8, r2, r8
 8009f16:	e6d9      	b.n	8009ccc <_strtod_l+0x5f4>
 8009f18:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8009f1c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009f20:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009f24:	33e2      	adds	r3, #226	; 0xe2
 8009f26:	fa00 f303 	lsl.w	r3, r0, r3
 8009f2a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8009f2e:	e73f      	b.n	8009db0 <_strtod_l+0x6d8>
 8009f30:	2200      	movs	r2, #0
 8009f32:	2301      	movs	r3, #1
 8009f34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f38:	e73a      	b.n	8009db0 <_strtod_l+0x6d8>
 8009f3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 fe2a 	bl	800bb98 <__lshift>
 8009f44:	9012      	str	r0, [sp, #72]	; 0x48
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f47f af64 	bne.w	8009e14 <_strtod_l+0x73c>
 8009f4c:	e600      	b.n	8009b50 <_strtod_l+0x478>
 8009f4e:	bf00      	nop
 8009f50:	94a03595 	.word	0x94a03595
 8009f54:	3fcfffff 	.word	0x3fcfffff
 8009f58:	94a03595 	.word	0x94a03595
 8009f5c:	3fdfffff 	.word	0x3fdfffff
 8009f60:	35afe535 	.word	0x35afe535
 8009f64:	3fe00000 	.word	0x3fe00000
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	39500000 	.word	0x39500000
 8009f70:	0800d3b8 	.word	0x0800d3b8
 8009f74:	fffffc02 	.word	0xfffffc02
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	46cb      	mov	fp, r9
 8009f7e:	d15f      	bne.n	800a040 <_strtod_l+0x968>
 8009f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f84:	f1ba 0f00 	cmp.w	sl, #0
 8009f88:	d02a      	beq.n	8009fe0 <_strtod_l+0x908>
 8009f8a:	4aa7      	ldr	r2, [pc, #668]	; (800a228 <_strtod_l+0xb50>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d12b      	bne.n	8009fe8 <_strtod_l+0x910>
 8009f90:	9b04      	ldr	r3, [sp, #16]
 8009f92:	4642      	mov	r2, r8
 8009f94:	b1fb      	cbz	r3, 8009fd6 <_strtod_l+0x8fe>
 8009f96:	4ba5      	ldr	r3, [pc, #660]	; (800a22c <_strtod_l+0xb54>)
 8009f98:	ea09 0303 	and.w	r3, r9, r3
 8009f9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8009fa4:	d81a      	bhi.n	8009fdc <_strtod_l+0x904>
 8009fa6:	0d1b      	lsrs	r3, r3, #20
 8009fa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fac:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d119      	bne.n	8009fe8 <_strtod_l+0x910>
 8009fb4:	4b9e      	ldr	r3, [pc, #632]	; (800a230 <_strtod_l+0xb58>)
 8009fb6:	459b      	cmp	fp, r3
 8009fb8:	d102      	bne.n	8009fc0 <_strtod_l+0x8e8>
 8009fba:	3201      	adds	r2, #1
 8009fbc:	f43f adc8 	beq.w	8009b50 <_strtod_l+0x478>
 8009fc0:	4b9a      	ldr	r3, [pc, #616]	; (800a22c <_strtod_l+0xb54>)
 8009fc2:	ea0b 0303 	and.w	r3, fp, r3
 8009fc6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d188      	bne.n	8009ee6 <_strtod_l+0x80e>
 8009fd4:	e5c6      	b.n	8009b64 <_strtod_l+0x48c>
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	e7e9      	b.n	8009fb0 <_strtod_l+0x8d8>
 8009fdc:	460b      	mov	r3, r1
 8009fde:	e7e7      	b.n	8009fb0 <_strtod_l+0x8d8>
 8009fe0:	ea53 0308 	orrs.w	r3, r3, r8
 8009fe4:	f43f af6f 	beq.w	8009ec6 <_strtod_l+0x7ee>
 8009fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fea:	b1cb      	cbz	r3, 800a020 <_strtod_l+0x948>
 8009fec:	ea13 0f0b 	tst.w	r3, fp
 8009ff0:	d0ed      	beq.n	8009fce <_strtod_l+0x8f6>
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	f1ba 0f00 	cmp.w	sl, #0
 8009ffc:	d014      	beq.n	800a028 <_strtod_l+0x950>
 8009ffe:	f7ff fb51 	bl	80096a4 <sulp>
 800a002:	ee38 7b00 	vadd.f64	d7, d8, d0
 800a006:	ec59 8b17 	vmov	r8, r9, d7
 800a00a:	e7e0      	b.n	8009fce <_strtod_l+0x8f6>
 800a00c:	4013      	ands	r3, r2
 800a00e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a012:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a016:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a01a:	f04f 38ff 	mov.w	r8, #4294967295
 800a01e:	e7d6      	b.n	8009fce <_strtod_l+0x8f6>
 800a020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a022:	ea13 0f08 	tst.w	r3, r8
 800a026:	e7e3      	b.n	8009ff0 <_strtod_l+0x918>
 800a028:	f7ff fb3c 	bl	80096a4 <sulp>
 800a02c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800a030:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a038:	ec59 8b10 	vmov	r8, r9, d0
 800a03c:	d1c7      	bne.n	8009fce <_strtod_l+0x8f6>
 800a03e:	e5f7      	b.n	8009c30 <_strtod_l+0x558>
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	f001 ff96 	bl	800bf74 <__ratio>
 800a048:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a04c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a054:	d865      	bhi.n	800a122 <_strtod_l+0xa4a>
 800a056:	f1ba 0f00 	cmp.w	sl, #0
 800a05a:	d042      	beq.n	800a0e2 <_strtod_l+0xa0a>
 800a05c:	4b75      	ldr	r3, [pc, #468]	; (800a234 <_strtod_l+0xb5c>)
 800a05e:	2200      	movs	r2, #0
 800a060:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a064:	4871      	ldr	r0, [pc, #452]	; (800a22c <_strtod_l+0xb54>)
 800a066:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800a240 <_strtod_l+0xb68>
 800a06a:	ea0b 0100 	and.w	r1, fp, r0
 800a06e:	4561      	cmp	r1, ip
 800a070:	f040 808e 	bne.w	800a190 <_strtod_l+0xab8>
 800a074:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a078:	ec49 8b10 	vmov	d0, r8, r9
 800a07c:	ec43 2b1c 	vmov	d12, r2, r3
 800a080:	910a      	str	r1, [sp, #40]	; 0x28
 800a082:	f001 fe9f 	bl	800bdc4 <__ulp>
 800a086:	ec49 8b1e 	vmov	d14, r8, r9
 800a08a:	4868      	ldr	r0, [pc, #416]	; (800a22c <_strtod_l+0xb54>)
 800a08c:	eeac eb00 	vfma.f64	d14, d12, d0
 800a090:	ee1e 3a90 	vmov	r3, s29
 800a094:	4a68      	ldr	r2, [pc, #416]	; (800a238 <_strtod_l+0xb60>)
 800a096:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a098:	4018      	ands	r0, r3
 800a09a:	4290      	cmp	r0, r2
 800a09c:	ec59 8b1e 	vmov	r8, r9, d14
 800a0a0:	d94e      	bls.n	800a140 <_strtod_l+0xa68>
 800a0a2:	ee18 3a90 	vmov	r3, s17
 800a0a6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d104      	bne.n	800a0b8 <_strtod_l+0x9e0>
 800a0ae:	ee18 3a10 	vmov	r3, s16
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	f43f ad4c 	beq.w	8009b50 <_strtod_l+0x478>
 800a0b8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a230 <_strtod_l+0xb58>
 800a0bc:	f04f 38ff 	mov.w	r8, #4294967295
 800a0c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f001 fb4c 	bl	800b760 <_Bfree>
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f001 fb48 	bl	800b760 <_Bfree>
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f001 fb44 	bl	800b760 <_Bfree>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f001 fb40 	bl	800b760 <_Bfree>
 800a0e0:	e619      	b.n	8009d16 <_strtod_l+0x63e>
 800a0e2:	f1b8 0f00 	cmp.w	r8, #0
 800a0e6:	d112      	bne.n	800a10e <_strtod_l+0xa36>
 800a0e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ec:	b9b3      	cbnz	r3, 800a11c <_strtod_l+0xa44>
 800a0ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a0f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a0fe:	bf58      	it	pl
 800a100:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800a104:	eeb1 7b4d 	vneg.f64	d7, d13
 800a108:	ec53 2b17 	vmov	r2, r3, d7
 800a10c:	e7aa      	b.n	800a064 <_strtod_l+0x98c>
 800a10e:	f1b8 0f01 	cmp.w	r8, #1
 800a112:	d103      	bne.n	800a11c <_strtod_l+0xa44>
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	f43f ad8a 	beq.w	8009c30 <_strtod_l+0x558>
 800a11c:	4b47      	ldr	r3, [pc, #284]	; (800a23c <_strtod_l+0xb64>)
 800a11e:	2200      	movs	r2, #0
 800a120:	e79e      	b.n	800a060 <_strtod_l+0x988>
 800a122:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a126:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a12a:	f1ba 0f00 	cmp.w	sl, #0
 800a12e:	d104      	bne.n	800a13a <_strtod_l+0xa62>
 800a130:	eeb1 7b4d 	vneg.f64	d7, d13
 800a134:	ec53 2b17 	vmov	r2, r3, d7
 800a138:	e794      	b.n	800a064 <_strtod_l+0x98c>
 800a13a:	eeb0 7b4d 	vmov.f64	d7, d13
 800a13e:	e7f9      	b.n	800a134 <_strtod_l+0xa5c>
 800a140:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1ba      	bne.n	800a0c0 <_strtod_l+0x9e8>
 800a14a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a14e:	0d1b      	lsrs	r3, r3, #20
 800a150:	051b      	lsls	r3, r3, #20
 800a152:	4299      	cmp	r1, r3
 800a154:	d1b4      	bne.n	800a0c0 <_strtod_l+0x9e8>
 800a156:	ec51 0b1d 	vmov	r0, r1, d13
 800a15a:	f7f6 faed 	bl	8000738 <__aeabi_d2lz>
 800a15e:	f7f6 faa5 	bl	80006ac <__aeabi_l2d>
 800a162:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a166:	ec41 0b17 	vmov	d7, r0, r1
 800a16a:	ea43 0308 	orr.w	r3, r3, r8
 800a16e:	ea53 030a 	orrs.w	r3, r3, sl
 800a172:	ee3d db47 	vsub.f64	d13, d13, d7
 800a176:	d03c      	beq.n	800a1f2 <_strtod_l+0xb1a>
 800a178:	eeb4 dbca 	vcmpe.f64	d13, d10
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	f53f acf0 	bmi.w	8009b64 <_strtod_l+0x48c>
 800a184:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800a188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18c:	dd98      	ble.n	800a0c0 <_strtod_l+0x9e8>
 800a18e:	e4e9      	b.n	8009b64 <_strtod_l+0x48c>
 800a190:	9804      	ldr	r0, [sp, #16]
 800a192:	b1f0      	cbz	r0, 800a1d2 <_strtod_l+0xafa>
 800a194:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a198:	d81b      	bhi.n	800a1d2 <_strtod_l+0xafa>
 800a19a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a220 <_strtod_l+0xb48>
 800a19e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	d811      	bhi.n	800a1cc <_strtod_l+0xaf4>
 800a1a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800a1ac:	ee1d 3a10 	vmov	r3, s26
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	bf38      	it	cc
 800a1b4:	2301      	movcc	r3, #1
 800a1b6:	ee0d 3a10 	vmov	s26, r3
 800a1ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800a1be:	f1ba 0f00 	cmp.w	sl, #0
 800a1c2:	d113      	bne.n	800a1ec <_strtod_l+0xb14>
 800a1c4:	eeb1 7b4d 	vneg.f64	d7, d13
 800a1c8:	ec53 2b17 	vmov	r2, r3, d7
 800a1cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a1d0:	1a43      	subs	r3, r0, r1
 800a1d2:	eeb0 0b48 	vmov.f64	d0, d8
 800a1d6:	ec43 2b1c 	vmov	d12, r2, r3
 800a1da:	910a      	str	r1, [sp, #40]	; 0x28
 800a1dc:	f001 fdf2 	bl	800bdc4 <__ulp>
 800a1e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a1e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a1e6:	ec59 8b18 	vmov	r8, r9, d8
 800a1ea:	e7ab      	b.n	800a144 <_strtod_l+0xa6c>
 800a1ec:	eeb0 7b4d 	vmov.f64	d7, d13
 800a1f0:	e7ea      	b.n	800a1c8 <_strtod_l+0xaf0>
 800a1f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fa:	f57f af61 	bpl.w	800a0c0 <_strtod_l+0x9e8>
 800a1fe:	e4b1      	b.n	8009b64 <_strtod_l+0x48c>
 800a200:	2300      	movs	r3, #0
 800a202:	9308      	str	r3, [sp, #32]
 800a204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	f7ff baad 	b.w	8009768 <_strtod_l+0x90>
 800a20e:	2a65      	cmp	r2, #101	; 0x65
 800a210:	f43f ab9f 	beq.w	8009952 <_strtod_l+0x27a>
 800a214:	2a45      	cmp	r2, #69	; 0x45
 800a216:	f43f ab9c 	beq.w	8009952 <_strtod_l+0x27a>
 800a21a:	2101      	movs	r1, #1
 800a21c:	f7ff bbd4 	b.w	80099c8 <_strtod_l+0x2f0>
 800a220:	ffc00000 	.word	0xffc00000
 800a224:	41dfffff 	.word	0x41dfffff
 800a228:	000fffff 	.word	0x000fffff
 800a22c:	7ff00000 	.word	0x7ff00000
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	3ff00000 	.word	0x3ff00000
 800a238:	7c9fffff 	.word	0x7c9fffff
 800a23c:	bff00000 	.word	0xbff00000
 800a240:	7fe00000 	.word	0x7fe00000

0800a244 <_strtod_r>:
 800a244:	4b01      	ldr	r3, [pc, #4]	; (800a24c <_strtod_r+0x8>)
 800a246:	f7ff ba47 	b.w	80096d8 <_strtod_l>
 800a24a:	bf00      	nop
 800a24c:	24000078 	.word	0x24000078

0800a250 <_strtol_l.constprop.0>:
 800a250:	2b01      	cmp	r3, #1
 800a252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a256:	d001      	beq.n	800a25c <_strtol_l.constprop.0+0xc>
 800a258:	2b24      	cmp	r3, #36	; 0x24
 800a25a:	d906      	bls.n	800a26a <_strtol_l.constprop.0+0x1a>
 800a25c:	f7fe fb60 	bl	8008920 <__errno>
 800a260:	2316      	movs	r3, #22
 800a262:	6003      	str	r3, [r0, #0]
 800a264:	2000      	movs	r0, #0
 800a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a350 <_strtol_l.constprop.0+0x100>
 800a26e:	460d      	mov	r5, r1
 800a270:	462e      	mov	r6, r5
 800a272:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a276:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a27a:	f017 0708 	ands.w	r7, r7, #8
 800a27e:	d1f7      	bne.n	800a270 <_strtol_l.constprop.0+0x20>
 800a280:	2c2d      	cmp	r4, #45	; 0x2d
 800a282:	d132      	bne.n	800a2ea <_strtol_l.constprop.0+0x9a>
 800a284:	782c      	ldrb	r4, [r5, #0]
 800a286:	2701      	movs	r7, #1
 800a288:	1cb5      	adds	r5, r6, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d05b      	beq.n	800a346 <_strtol_l.constprop.0+0xf6>
 800a28e:	2b10      	cmp	r3, #16
 800a290:	d109      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a292:	2c30      	cmp	r4, #48	; 0x30
 800a294:	d107      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a296:	782c      	ldrb	r4, [r5, #0]
 800a298:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a29c:	2c58      	cmp	r4, #88	; 0x58
 800a29e:	d14d      	bne.n	800a33c <_strtol_l.constprop.0+0xec>
 800a2a0:	786c      	ldrb	r4, [r5, #1]
 800a2a2:	2310      	movs	r3, #16
 800a2a4:	3502      	adds	r5, #2
 800a2a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2ae:	f04f 0c00 	mov.w	ip, #0
 800a2b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2b6:	4666      	mov	r6, ip
 800a2b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a2bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a2c0:	f1be 0f09 	cmp.w	lr, #9
 800a2c4:	d816      	bhi.n	800a2f4 <_strtol_l.constprop.0+0xa4>
 800a2c6:	4674      	mov	r4, lr
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	dd24      	ble.n	800a316 <_strtol_l.constprop.0+0xc6>
 800a2cc:	f1bc 0f00 	cmp.w	ip, #0
 800a2d0:	db1e      	blt.n	800a310 <_strtol_l.constprop.0+0xc0>
 800a2d2:	45b1      	cmp	r9, r6
 800a2d4:	d31c      	bcc.n	800a310 <_strtol_l.constprop.0+0xc0>
 800a2d6:	d101      	bne.n	800a2dc <_strtol_l.constprop.0+0x8c>
 800a2d8:	45a2      	cmp	sl, r4
 800a2da:	db19      	blt.n	800a310 <_strtol_l.constprop.0+0xc0>
 800a2dc:	fb06 4603 	mla	r6, r6, r3, r4
 800a2e0:	f04f 0c01 	mov.w	ip, #1
 800a2e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2e8:	e7e8      	b.n	800a2bc <_strtol_l.constprop.0+0x6c>
 800a2ea:	2c2b      	cmp	r4, #43	; 0x2b
 800a2ec:	bf04      	itt	eq
 800a2ee:	782c      	ldrbeq	r4, [r5, #0]
 800a2f0:	1cb5      	addeq	r5, r6, #2
 800a2f2:	e7ca      	b.n	800a28a <_strtol_l.constprop.0+0x3a>
 800a2f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a2f8:	f1be 0f19 	cmp.w	lr, #25
 800a2fc:	d801      	bhi.n	800a302 <_strtol_l.constprop.0+0xb2>
 800a2fe:	3c37      	subs	r4, #55	; 0x37
 800a300:	e7e2      	b.n	800a2c8 <_strtol_l.constprop.0+0x78>
 800a302:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a306:	f1be 0f19 	cmp.w	lr, #25
 800a30a:	d804      	bhi.n	800a316 <_strtol_l.constprop.0+0xc6>
 800a30c:	3c57      	subs	r4, #87	; 0x57
 800a30e:	e7db      	b.n	800a2c8 <_strtol_l.constprop.0+0x78>
 800a310:	f04f 3cff 	mov.w	ip, #4294967295
 800a314:	e7e6      	b.n	800a2e4 <_strtol_l.constprop.0+0x94>
 800a316:	f1bc 0f00 	cmp.w	ip, #0
 800a31a:	da05      	bge.n	800a328 <_strtol_l.constprop.0+0xd8>
 800a31c:	2322      	movs	r3, #34	; 0x22
 800a31e:	6003      	str	r3, [r0, #0]
 800a320:	4646      	mov	r6, r8
 800a322:	b942      	cbnz	r2, 800a336 <_strtol_l.constprop.0+0xe6>
 800a324:	4630      	mov	r0, r6
 800a326:	e79e      	b.n	800a266 <_strtol_l.constprop.0+0x16>
 800a328:	b107      	cbz	r7, 800a32c <_strtol_l.constprop.0+0xdc>
 800a32a:	4276      	negs	r6, r6
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d0f9      	beq.n	800a324 <_strtol_l.constprop.0+0xd4>
 800a330:	f1bc 0f00 	cmp.w	ip, #0
 800a334:	d000      	beq.n	800a338 <_strtol_l.constprop.0+0xe8>
 800a336:	1e69      	subs	r1, r5, #1
 800a338:	6011      	str	r1, [r2, #0]
 800a33a:	e7f3      	b.n	800a324 <_strtol_l.constprop.0+0xd4>
 800a33c:	2430      	movs	r4, #48	; 0x30
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1b1      	bne.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a342:	2308      	movs	r3, #8
 800a344:	e7af      	b.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a346:	2c30      	cmp	r4, #48	; 0x30
 800a348:	d0a5      	beq.n	800a296 <_strtol_l.constprop.0+0x46>
 800a34a:	230a      	movs	r3, #10
 800a34c:	e7ab      	b.n	800a2a6 <_strtol_l.constprop.0+0x56>
 800a34e:	bf00      	nop
 800a350:	0800d3e1 	.word	0x0800d3e1

0800a354 <_strtol_r>:
 800a354:	f7ff bf7c 	b.w	800a250 <_strtol_l.constprop.0>

0800a358 <_vsniprintf_r>:
 800a358:	b530      	push	{r4, r5, lr}
 800a35a:	4614      	mov	r4, r2
 800a35c:	2c00      	cmp	r4, #0
 800a35e:	b09b      	sub	sp, #108	; 0x6c
 800a360:	4605      	mov	r5, r0
 800a362:	461a      	mov	r2, r3
 800a364:	da05      	bge.n	800a372 <_vsniprintf_r+0x1a>
 800a366:	238b      	movs	r3, #139	; 0x8b
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	b01b      	add	sp, #108	; 0x6c
 800a370:	bd30      	pop	{r4, r5, pc}
 800a372:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a376:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a37a:	bf14      	ite	ne
 800a37c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a380:	4623      	moveq	r3, r4
 800a382:	9302      	str	r3, [sp, #8]
 800a384:	9305      	str	r3, [sp, #20]
 800a386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a38a:	9100      	str	r1, [sp, #0]
 800a38c:	9104      	str	r1, [sp, #16]
 800a38e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a392:	4669      	mov	r1, sp
 800a394:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a396:	f001 ffb3 	bl	800c300 <_svfiprintf_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	bfbc      	itt	lt
 800a39e:	238b      	movlt	r3, #139	; 0x8b
 800a3a0:	602b      	strlt	r3, [r5, #0]
 800a3a2:	2c00      	cmp	r4, #0
 800a3a4:	d0e3      	beq.n	800a36e <_vsniprintf_r+0x16>
 800a3a6:	9b00      	ldr	r3, [sp, #0]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	e7df      	b.n	800a36e <_vsniprintf_r+0x16>
	...

0800a3b0 <vsniprintf>:
 800a3b0:	b507      	push	{r0, r1, r2, lr}
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	460a      	mov	r2, r1
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	4803      	ldr	r0, [pc, #12]	; (800a3c8 <vsniprintf+0x18>)
 800a3bc:	6800      	ldr	r0, [r0, #0]
 800a3be:	f7ff ffcb 	bl	800a358 <_vsniprintf_r>
 800a3c2:	b003      	add	sp, #12
 800a3c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3c8:	24000010 	.word	0x24000010

0800a3cc <quorem>:
 800a3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d0:	6903      	ldr	r3, [r0, #16]
 800a3d2:	690c      	ldr	r4, [r1, #16]
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	f2c0 8081 	blt.w	800a4de <quorem+0x112>
 800a3dc:	3c01      	subs	r4, #1
 800a3de:	f101 0814 	add.w	r8, r1, #20
 800a3e2:	f100 0514 	add.w	r5, r0, #20
 800a3e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a3fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a400:	fbb2 f6f3 	udiv	r6, r2, r3
 800a404:	d331      	bcc.n	800a46a <quorem+0x9e>
 800a406:	f04f 0e00 	mov.w	lr, #0
 800a40a:	4640      	mov	r0, r8
 800a40c:	46ac      	mov	ip, r5
 800a40e:	46f2      	mov	sl, lr
 800a410:	f850 2b04 	ldr.w	r2, [r0], #4
 800a414:	b293      	uxth	r3, r2
 800a416:	fb06 e303 	mla	r3, r6, r3, lr
 800a41a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ebaa 0303 	sub.w	r3, sl, r3
 800a424:	f8dc a000 	ldr.w	sl, [ip]
 800a428:	0c12      	lsrs	r2, r2, #16
 800a42a:	fa13 f38a 	uxtah	r3, r3, sl
 800a42e:	fb06 e202 	mla	r2, r6, r2, lr
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	9b00      	ldr	r3, [sp, #0]
 800a436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a43a:	b292      	uxth	r2, r2
 800a43c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a444:	f8bd 3000 	ldrh.w	r3, [sp]
 800a448:	4581      	cmp	r9, r0
 800a44a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a44e:	f84c 3b04 	str.w	r3, [ip], #4
 800a452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a456:	d2db      	bcs.n	800a410 <quorem+0x44>
 800a458:	f855 300b 	ldr.w	r3, [r5, fp]
 800a45c:	b92b      	cbnz	r3, 800a46a <quorem+0x9e>
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	3b04      	subs	r3, #4
 800a462:	429d      	cmp	r5, r3
 800a464:	461a      	mov	r2, r3
 800a466:	d32e      	bcc.n	800a4c6 <quorem+0xfa>
 800a468:	613c      	str	r4, [r7, #16]
 800a46a:	4638      	mov	r0, r7
 800a46c:	f001 fc04 	bl	800bc78 <__mcmp>
 800a470:	2800      	cmp	r0, #0
 800a472:	db24      	blt.n	800a4be <quorem+0xf2>
 800a474:	3601      	adds	r6, #1
 800a476:	4628      	mov	r0, r5
 800a478:	f04f 0c00 	mov.w	ip, #0
 800a47c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a480:	f8d0 e000 	ldr.w	lr, [r0]
 800a484:	b293      	uxth	r3, r2
 800a486:	ebac 0303 	sub.w	r3, ip, r3
 800a48a:	0c12      	lsrs	r2, r2, #16
 800a48c:	fa13 f38e 	uxtah	r3, r3, lr
 800a490:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a498:	b29b      	uxth	r3, r3
 800a49a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a49e:	45c1      	cmp	r9, r8
 800a4a0:	f840 3b04 	str.w	r3, [r0], #4
 800a4a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4a8:	d2e8      	bcs.n	800a47c <quorem+0xb0>
 800a4aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4b2:	b922      	cbnz	r2, 800a4be <quorem+0xf2>
 800a4b4:	3b04      	subs	r3, #4
 800a4b6:	429d      	cmp	r5, r3
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	d30a      	bcc.n	800a4d2 <quorem+0x106>
 800a4bc:	613c      	str	r4, [r7, #16]
 800a4be:	4630      	mov	r0, r6
 800a4c0:	b003      	add	sp, #12
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	3b04      	subs	r3, #4
 800a4ca:	2a00      	cmp	r2, #0
 800a4cc:	d1cc      	bne.n	800a468 <quorem+0x9c>
 800a4ce:	3c01      	subs	r4, #1
 800a4d0:	e7c7      	b.n	800a462 <quorem+0x96>
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	3b04      	subs	r3, #4
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d1f0      	bne.n	800a4bc <quorem+0xf0>
 800a4da:	3c01      	subs	r4, #1
 800a4dc:	e7eb      	b.n	800a4b6 <quorem+0xea>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e7ee      	b.n	800a4c0 <quorem+0xf4>
 800a4e2:	0000      	movs	r0, r0
 800a4e4:	0000      	movs	r0, r0
	...

0800a4e8 <_dtoa_r>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	ed2d 8b02 	vpush	{d8}
 800a4f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4f2:	b091      	sub	sp, #68	; 0x44
 800a4f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4f8:	ec59 8b10 	vmov	r8, r9, d0
 800a4fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a4fe:	9106      	str	r1, [sp, #24]
 800a500:	4606      	mov	r6, r0
 800a502:	9208      	str	r2, [sp, #32]
 800a504:	930c      	str	r3, [sp, #48]	; 0x30
 800a506:	b975      	cbnz	r5, 800a526 <_dtoa_r+0x3e>
 800a508:	2010      	movs	r0, #16
 800a50a:	f001 f8cf 	bl	800b6ac <malloc>
 800a50e:	4602      	mov	r2, r0
 800a510:	6270      	str	r0, [r6, #36]	; 0x24
 800a512:	b920      	cbnz	r0, 800a51e <_dtoa_r+0x36>
 800a514:	4baa      	ldr	r3, [pc, #680]	; (800a7c0 <_dtoa_r+0x2d8>)
 800a516:	21ea      	movs	r1, #234	; 0xea
 800a518:	48aa      	ldr	r0, [pc, #680]	; (800a7c4 <_dtoa_r+0x2dc>)
 800a51a:	f002 f837 	bl	800c58c <__assert_func>
 800a51e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a522:	6005      	str	r5, [r0, #0]
 800a524:	60c5      	str	r5, [r0, #12]
 800a526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a528:	6819      	ldr	r1, [r3, #0]
 800a52a:	b151      	cbz	r1, 800a542 <_dtoa_r+0x5a>
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	604a      	str	r2, [r1, #4]
 800a530:	2301      	movs	r3, #1
 800a532:	4093      	lsls	r3, r2
 800a534:	608b      	str	r3, [r1, #8]
 800a536:	4630      	mov	r0, r6
 800a538:	f001 f912 	bl	800b760 <_Bfree>
 800a53c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	f1b9 0300 	subs.w	r3, r9, #0
 800a546:	bfbb      	ittet	lt
 800a548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a54c:	9303      	strlt	r3, [sp, #12]
 800a54e:	2300      	movge	r3, #0
 800a550:	2201      	movlt	r2, #1
 800a552:	bfac      	ite	ge
 800a554:	6023      	strge	r3, [r4, #0]
 800a556:	6022      	strlt	r2, [r4, #0]
 800a558:	4b9b      	ldr	r3, [pc, #620]	; (800a7c8 <_dtoa_r+0x2e0>)
 800a55a:	9c03      	ldr	r4, [sp, #12]
 800a55c:	43a3      	bics	r3, r4
 800a55e:	d11c      	bne.n	800a59a <_dtoa_r+0xb2>
 800a560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a562:	f242 730f 	movw	r3, #9999	; 0x270f
 800a566:	6013      	str	r3, [r2, #0]
 800a568:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a56c:	ea53 0308 	orrs.w	r3, r3, r8
 800a570:	f000 84fd 	beq.w	800af6e <_dtoa_r+0xa86>
 800a574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a576:	b963      	cbnz	r3, 800a592 <_dtoa_r+0xaa>
 800a578:	4b94      	ldr	r3, [pc, #592]	; (800a7cc <_dtoa_r+0x2e4>)
 800a57a:	e01f      	b.n	800a5bc <_dtoa_r+0xd4>
 800a57c:	4b94      	ldr	r3, [pc, #592]	; (800a7d0 <_dtoa_r+0x2e8>)
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	3308      	adds	r3, #8
 800a582:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a584:	6013      	str	r3, [r2, #0]
 800a586:	9801      	ldr	r0, [sp, #4]
 800a588:	b011      	add	sp, #68	; 0x44
 800a58a:	ecbd 8b02 	vpop	{d8}
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	4b8e      	ldr	r3, [pc, #568]	; (800a7cc <_dtoa_r+0x2e4>)
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	3303      	adds	r3, #3
 800a598:	e7f3      	b.n	800a582 <_dtoa_r+0x9a>
 800a59a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a59e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	d10b      	bne.n	800a5c0 <_dtoa_r+0xd8>
 800a5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 84d9 	beq.w	800af68 <_dtoa_r+0xa80>
 800a5b6:	4887      	ldr	r0, [pc, #540]	; (800a7d4 <_dtoa_r+0x2ec>)
 800a5b8:	6018      	str	r0, [r3, #0]
 800a5ba:	1e43      	subs	r3, r0, #1
 800a5bc:	9301      	str	r3, [sp, #4]
 800a5be:	e7e2      	b.n	800a586 <_dtoa_r+0x9e>
 800a5c0:	a90f      	add	r1, sp, #60	; 0x3c
 800a5c2:	aa0e      	add	r2, sp, #56	; 0x38
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	eeb0 0b48 	vmov.f64	d0, d8
 800a5ca:	f001 fc77 	bl	800bebc <__d2b>
 800a5ce:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a5d6:	2900      	cmp	r1, #0
 800a5d8:	d046      	beq.n	800a668 <_dtoa_r+0x180>
 800a5da:	ee18 4a90 	vmov	r4, s17
 800a5de:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a5e2:	ec53 2b18 	vmov	r2, r3, d8
 800a5e6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a5ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a5f2:	2400      	movs	r4, #0
 800a5f4:	ec43 2b16 	vmov	d6, r2, r3
 800a5f8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a5fc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a7a8 <_dtoa_r+0x2c0>
 800a600:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a604:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a7b0 <_dtoa_r+0x2c8>
 800a608:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a60c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a7b8 <_dtoa_r+0x2d0>
 800a610:	ee07 1a90 	vmov	s15, r1
 800a614:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a618:	eeb0 7b46 	vmov.f64	d7, d6
 800a61c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a620:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a624:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62c:	ee16 ba90 	vmov	fp, s13
 800a630:	940a      	str	r4, [sp, #40]	; 0x28
 800a632:	d508      	bpl.n	800a646 <_dtoa_r+0x15e>
 800a634:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a638:	eeb4 6b47 	vcmp.f64	d6, d7
 800a63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a640:	bf18      	it	ne
 800a642:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a646:	f1bb 0f16 	cmp.w	fp, #22
 800a64a:	d82f      	bhi.n	800a6ac <_dtoa_r+0x1c4>
 800a64c:	4b62      	ldr	r3, [pc, #392]	; (800a7d8 <_dtoa_r+0x2f0>)
 800a64e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a652:	ed93 7b00 	vldr	d7, [r3]
 800a656:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	d501      	bpl.n	800a664 <_dtoa_r+0x17c>
 800a660:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a664:	2300      	movs	r3, #0
 800a666:	e022      	b.n	800a6ae <_dtoa_r+0x1c6>
 800a668:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a66a:	4401      	add	r1, r0
 800a66c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a670:	2b20      	cmp	r3, #32
 800a672:	bfc1      	itttt	gt
 800a674:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a678:	fa04 f303 	lslgt.w	r3, r4, r3
 800a67c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a680:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a684:	bfd6      	itet	le
 800a686:	f1c3 0320 	rsble	r3, r3, #32
 800a68a:	ea43 0808 	orrgt.w	r8, r3, r8
 800a68e:	fa08 f803 	lslle.w	r8, r8, r3
 800a692:	ee07 8a90 	vmov	s15, r8
 800a696:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a69a:	3901      	subs	r1, #1
 800a69c:	ee17 4a90 	vmov	r4, s15
 800a6a0:	ec53 2b17 	vmov	r2, r3, d7
 800a6a4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a6a8:	2401      	movs	r4, #1
 800a6aa:	e7a3      	b.n	800a5f4 <_dtoa_r+0x10c>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b0:	1a43      	subs	r3, r0, r1
 800a6b2:	1e5a      	subs	r2, r3, #1
 800a6b4:	bf45      	ittet	mi
 800a6b6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6ba:	9304      	strmi	r3, [sp, #16]
 800a6bc:	2300      	movpl	r3, #0
 800a6be:	2300      	movmi	r3, #0
 800a6c0:	9205      	str	r2, [sp, #20]
 800a6c2:	bf54      	ite	pl
 800a6c4:	9304      	strpl	r3, [sp, #16]
 800a6c6:	9305      	strmi	r3, [sp, #20]
 800a6c8:	f1bb 0f00 	cmp.w	fp, #0
 800a6cc:	db18      	blt.n	800a700 <_dtoa_r+0x218>
 800a6ce:	9b05      	ldr	r3, [sp, #20]
 800a6d0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a6d4:	445b      	add	r3, fp
 800a6d6:	9305      	str	r3, [sp, #20]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	9a06      	ldr	r2, [sp, #24]
 800a6dc:	2a09      	cmp	r2, #9
 800a6de:	d849      	bhi.n	800a774 <_dtoa_r+0x28c>
 800a6e0:	2a05      	cmp	r2, #5
 800a6e2:	bfc4      	itt	gt
 800a6e4:	3a04      	subgt	r2, #4
 800a6e6:	9206      	strgt	r2, [sp, #24]
 800a6e8:	9a06      	ldr	r2, [sp, #24]
 800a6ea:	f1a2 0202 	sub.w	r2, r2, #2
 800a6ee:	bfcc      	ite	gt
 800a6f0:	2400      	movgt	r4, #0
 800a6f2:	2401      	movle	r4, #1
 800a6f4:	2a03      	cmp	r2, #3
 800a6f6:	d848      	bhi.n	800a78a <_dtoa_r+0x2a2>
 800a6f8:	e8df f002 	tbb	[pc, r2]
 800a6fc:	3a2c2e0b 	.word	0x3a2c2e0b
 800a700:	9b04      	ldr	r3, [sp, #16]
 800a702:	2200      	movs	r2, #0
 800a704:	eba3 030b 	sub.w	r3, r3, fp
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	9209      	str	r2, [sp, #36]	; 0x24
 800a70c:	f1cb 0300 	rsb	r3, fp, #0
 800a710:	e7e3      	b.n	800a6da <_dtoa_r+0x1f2>
 800a712:	2200      	movs	r2, #0
 800a714:	9207      	str	r2, [sp, #28]
 800a716:	9a08      	ldr	r2, [sp, #32]
 800a718:	2a00      	cmp	r2, #0
 800a71a:	dc39      	bgt.n	800a790 <_dtoa_r+0x2a8>
 800a71c:	f04f 0a01 	mov.w	sl, #1
 800a720:	46d1      	mov	r9, sl
 800a722:	4652      	mov	r2, sl
 800a724:	f8cd a020 	str.w	sl, [sp, #32]
 800a728:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a72a:	2100      	movs	r1, #0
 800a72c:	6079      	str	r1, [r7, #4]
 800a72e:	2004      	movs	r0, #4
 800a730:	f100 0c14 	add.w	ip, r0, #20
 800a734:	4594      	cmp	ip, r2
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	d92f      	bls.n	800a79a <_dtoa_r+0x2b2>
 800a73a:	4630      	mov	r0, r6
 800a73c:	930d      	str	r3, [sp, #52]	; 0x34
 800a73e:	f000 ffcf 	bl	800b6e0 <_Balloc>
 800a742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a744:	9001      	str	r0, [sp, #4]
 800a746:	4602      	mov	r2, r0
 800a748:	2800      	cmp	r0, #0
 800a74a:	d149      	bne.n	800a7e0 <_dtoa_r+0x2f8>
 800a74c:	4b23      	ldr	r3, [pc, #140]	; (800a7dc <_dtoa_r+0x2f4>)
 800a74e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a752:	e6e1      	b.n	800a518 <_dtoa_r+0x30>
 800a754:	2201      	movs	r2, #1
 800a756:	e7dd      	b.n	800a714 <_dtoa_r+0x22c>
 800a758:	2200      	movs	r2, #0
 800a75a:	9207      	str	r2, [sp, #28]
 800a75c:	9a08      	ldr	r2, [sp, #32]
 800a75e:	eb0b 0a02 	add.w	sl, fp, r2
 800a762:	f10a 0901 	add.w	r9, sl, #1
 800a766:	464a      	mov	r2, r9
 800a768:	2a01      	cmp	r2, #1
 800a76a:	bfb8      	it	lt
 800a76c:	2201      	movlt	r2, #1
 800a76e:	e7db      	b.n	800a728 <_dtoa_r+0x240>
 800a770:	2201      	movs	r2, #1
 800a772:	e7f2      	b.n	800a75a <_dtoa_r+0x272>
 800a774:	2401      	movs	r4, #1
 800a776:	2200      	movs	r2, #0
 800a778:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a77c:	f04f 3aff 	mov.w	sl, #4294967295
 800a780:	2100      	movs	r1, #0
 800a782:	46d1      	mov	r9, sl
 800a784:	2212      	movs	r2, #18
 800a786:	9108      	str	r1, [sp, #32]
 800a788:	e7ce      	b.n	800a728 <_dtoa_r+0x240>
 800a78a:	2201      	movs	r2, #1
 800a78c:	9207      	str	r2, [sp, #28]
 800a78e:	e7f5      	b.n	800a77c <_dtoa_r+0x294>
 800a790:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a794:	46d1      	mov	r9, sl
 800a796:	4652      	mov	r2, sl
 800a798:	e7c6      	b.n	800a728 <_dtoa_r+0x240>
 800a79a:	3101      	adds	r1, #1
 800a79c:	6079      	str	r1, [r7, #4]
 800a79e:	0040      	lsls	r0, r0, #1
 800a7a0:	e7c6      	b.n	800a730 <_dtoa_r+0x248>
 800a7a2:	bf00      	nop
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	636f4361 	.word	0x636f4361
 800a7ac:	3fd287a7 	.word	0x3fd287a7
 800a7b0:	8b60c8b3 	.word	0x8b60c8b3
 800a7b4:	3fc68a28 	.word	0x3fc68a28
 800a7b8:	509f79fb 	.word	0x509f79fb
 800a7bc:	3fd34413 	.word	0x3fd34413
 800a7c0:	0800d4ee 	.word	0x0800d4ee
 800a7c4:	0800d505 	.word	0x0800d505
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	0800d4ea 	.word	0x0800d4ea
 800a7d0:	0800d4e1 	.word	0x0800d4e1
 800a7d4:	0800d365 	.word	0x0800d365
 800a7d8:	0800d670 	.word	0x0800d670
 800a7dc:	0800d560 	.word	0x0800d560
 800a7e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a7e2:	9901      	ldr	r1, [sp, #4]
 800a7e4:	6011      	str	r1, [r2, #0]
 800a7e6:	f1b9 0f0e 	cmp.w	r9, #14
 800a7ea:	d86c      	bhi.n	800a8c6 <_dtoa_r+0x3de>
 800a7ec:	2c00      	cmp	r4, #0
 800a7ee:	d06a      	beq.n	800a8c6 <_dtoa_r+0x3de>
 800a7f0:	f1bb 0f00 	cmp.w	fp, #0
 800a7f4:	f340 80a0 	ble.w	800a938 <_dtoa_r+0x450>
 800a7f8:	49c1      	ldr	r1, [pc, #772]	; (800ab00 <_dtoa_r+0x618>)
 800a7fa:	f00b 020f 	and.w	r2, fp, #15
 800a7fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a802:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a806:	ed92 7b00 	vldr	d7, [r2]
 800a80a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a80e:	f000 8087 	beq.w	800a920 <_dtoa_r+0x438>
 800a812:	4abc      	ldr	r2, [pc, #752]	; (800ab04 <_dtoa_r+0x61c>)
 800a814:	ed92 6b08 	vldr	d6, [r2, #32]
 800a818:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a81c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a820:	f001 010f 	and.w	r1, r1, #15
 800a824:	2203      	movs	r2, #3
 800a826:	48b7      	ldr	r0, [pc, #732]	; (800ab04 <_dtoa_r+0x61c>)
 800a828:	2900      	cmp	r1, #0
 800a82a:	d17b      	bne.n	800a924 <_dtoa_r+0x43c>
 800a82c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a830:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a834:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a83a:	2900      	cmp	r1, #0
 800a83c:	f000 80a2 	beq.w	800a984 <_dtoa_r+0x49c>
 800a840:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a844:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a848:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a850:	f140 8098 	bpl.w	800a984 <_dtoa_r+0x49c>
 800a854:	f1b9 0f00 	cmp.w	r9, #0
 800a858:	f000 8094 	beq.w	800a984 <_dtoa_r+0x49c>
 800a85c:	f1ba 0f00 	cmp.w	sl, #0
 800a860:	dd2f      	ble.n	800a8c2 <_dtoa_r+0x3da>
 800a862:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a86a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a86e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a872:	3201      	adds	r2, #1
 800a874:	4650      	mov	r0, sl
 800a876:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a87a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a87e:	ee07 2a90 	vmov	s15, r2
 800a882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a886:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a88a:	ee15 4a90 	vmov	r4, s11
 800a88e:	ec52 1b15 	vmov	r1, r2, d5
 800a892:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a896:	2800      	cmp	r0, #0
 800a898:	d177      	bne.n	800a98a <_dtoa_r+0x4a2>
 800a89a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a89e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a8a2:	ec42 1b17 	vmov	d7, r1, r2
 800a8a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	f300 8263 	bgt.w	800ad78 <_dtoa_r+0x890>
 800a8b2:	eeb1 7b47 	vneg.f64	d7, d7
 800a8b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8be:	f100 8258 	bmi.w	800ad72 <_dtoa_r+0x88a>
 800a8c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a8c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	f2c0 811d 	blt.w	800ab08 <_dtoa_r+0x620>
 800a8ce:	f1bb 0f0e 	cmp.w	fp, #14
 800a8d2:	f300 8119 	bgt.w	800ab08 <_dtoa_r+0x620>
 800a8d6:	4b8a      	ldr	r3, [pc, #552]	; (800ab00 <_dtoa_r+0x618>)
 800a8d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8dc:	ed93 6b00 	vldr	d6, [r3]
 800a8e0:	9b08      	ldr	r3, [sp, #32]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f280 80b7 	bge.w	800aa56 <_dtoa_r+0x56e>
 800a8e8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ec:	f300 80b3 	bgt.w	800aa56 <_dtoa_r+0x56e>
 800a8f0:	f040 823f 	bne.w	800ad72 <_dtoa_r+0x88a>
 800a8f4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a8f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a8fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a900:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a908:	464c      	mov	r4, r9
 800a90a:	464f      	mov	r7, r9
 800a90c:	f280 8215 	bge.w	800ad3a <_dtoa_r+0x852>
 800a910:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a914:	2331      	movs	r3, #49	; 0x31
 800a916:	f808 3b01 	strb.w	r3, [r8], #1
 800a91a:	f10b 0b01 	add.w	fp, fp, #1
 800a91e:	e211      	b.n	800ad44 <_dtoa_r+0x85c>
 800a920:	2202      	movs	r2, #2
 800a922:	e780      	b.n	800a826 <_dtoa_r+0x33e>
 800a924:	07cc      	lsls	r4, r1, #31
 800a926:	d504      	bpl.n	800a932 <_dtoa_r+0x44a>
 800a928:	ed90 6b00 	vldr	d6, [r0]
 800a92c:	3201      	adds	r2, #1
 800a92e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a932:	1049      	asrs	r1, r1, #1
 800a934:	3008      	adds	r0, #8
 800a936:	e777      	b.n	800a828 <_dtoa_r+0x340>
 800a938:	d022      	beq.n	800a980 <_dtoa_r+0x498>
 800a93a:	f1cb 0100 	rsb	r1, fp, #0
 800a93e:	4a70      	ldr	r2, [pc, #448]	; (800ab00 <_dtoa_r+0x618>)
 800a940:	f001 000f 	and.w	r0, r1, #15
 800a944:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a948:	ed92 7b00 	vldr	d7, [r2]
 800a94c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a950:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a954:	486b      	ldr	r0, [pc, #428]	; (800ab04 <_dtoa_r+0x61c>)
 800a956:	1109      	asrs	r1, r1, #4
 800a958:	2400      	movs	r4, #0
 800a95a:	2202      	movs	r2, #2
 800a95c:	b929      	cbnz	r1, 800a96a <_dtoa_r+0x482>
 800a95e:	2c00      	cmp	r4, #0
 800a960:	f43f af6a 	beq.w	800a838 <_dtoa_r+0x350>
 800a964:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a968:	e766      	b.n	800a838 <_dtoa_r+0x350>
 800a96a:	07cf      	lsls	r7, r1, #31
 800a96c:	d505      	bpl.n	800a97a <_dtoa_r+0x492>
 800a96e:	ed90 6b00 	vldr	d6, [r0]
 800a972:	3201      	adds	r2, #1
 800a974:	2401      	movs	r4, #1
 800a976:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a97a:	1049      	asrs	r1, r1, #1
 800a97c:	3008      	adds	r0, #8
 800a97e:	e7ed      	b.n	800a95c <_dtoa_r+0x474>
 800a980:	2202      	movs	r2, #2
 800a982:	e759      	b.n	800a838 <_dtoa_r+0x350>
 800a984:	465f      	mov	r7, fp
 800a986:	4648      	mov	r0, r9
 800a988:	e775      	b.n	800a876 <_dtoa_r+0x38e>
 800a98a:	ec42 1b17 	vmov	d7, r1, r2
 800a98e:	4a5c      	ldr	r2, [pc, #368]	; (800ab00 <_dtoa_r+0x618>)
 800a990:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a994:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a998:	9a01      	ldr	r2, [sp, #4]
 800a99a:	1814      	adds	r4, r2, r0
 800a99c:	9a07      	ldr	r2, [sp, #28]
 800a99e:	b352      	cbz	r2, 800a9f6 <_dtoa_r+0x50e>
 800a9a0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a9a4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a9a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9ac:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a9b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a9b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a9b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a9bc:	ee14 2a90 	vmov	r2, s9
 800a9c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a9c4:	3230      	adds	r2, #48	; 0x30
 800a9c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a9ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d2:	f808 2b01 	strb.w	r2, [r8], #1
 800a9d6:	d439      	bmi.n	800aa4c <_dtoa_r+0x564>
 800a9d8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a9dc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e4:	d472      	bmi.n	800aacc <_dtoa_r+0x5e4>
 800a9e6:	45a0      	cmp	r8, r4
 800a9e8:	f43f af6b 	beq.w	800a8c2 <_dtoa_r+0x3da>
 800a9ec:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a9f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a9f4:	e7e0      	b.n	800a9b8 <_dtoa_r+0x4d0>
 800a9f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a9fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a9fe:	4621      	mov	r1, r4
 800aa00:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800aa04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aa08:	ee14 2a90 	vmov	r2, s9
 800aa0c:	3230      	adds	r2, #48	; 0x30
 800aa0e:	f808 2b01 	strb.w	r2, [r8], #1
 800aa12:	45a0      	cmp	r8, r4
 800aa14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aa18:	ee36 6b45 	vsub.f64	d6, d6, d5
 800aa1c:	d118      	bne.n	800aa50 <_dtoa_r+0x568>
 800aa1e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aa22:	ee37 4b05 	vadd.f64	d4, d7, d5
 800aa26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2e:	dc4d      	bgt.n	800aacc <_dtoa_r+0x5e4>
 800aa30:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aa34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3c:	f57f af41 	bpl.w	800a8c2 <_dtoa_r+0x3da>
 800aa40:	4688      	mov	r8, r1
 800aa42:	3901      	subs	r1, #1
 800aa44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800aa48:	2b30      	cmp	r3, #48	; 0x30
 800aa4a:	d0f9      	beq.n	800aa40 <_dtoa_r+0x558>
 800aa4c:	46bb      	mov	fp, r7
 800aa4e:	e02a      	b.n	800aaa6 <_dtoa_r+0x5be>
 800aa50:	ee26 6b03 	vmul.f64	d6, d6, d3
 800aa54:	e7d6      	b.n	800aa04 <_dtoa_r+0x51c>
 800aa56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa5a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800aa5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa62:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800aa66:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800aa6a:	ee15 3a10 	vmov	r3, s10
 800aa6e:	3330      	adds	r3, #48	; 0x30
 800aa70:	f808 3b01 	strb.w	r3, [r8], #1
 800aa74:	9b01      	ldr	r3, [sp, #4]
 800aa76:	eba8 0303 	sub.w	r3, r8, r3
 800aa7a:	4599      	cmp	r9, r3
 800aa7c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aa80:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aa84:	d133      	bne.n	800aaee <_dtoa_r+0x606>
 800aa86:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aa8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa92:	dc1a      	bgt.n	800aaca <_dtoa_r+0x5e2>
 800aa94:	eeb4 7b46 	vcmp.f64	d7, d6
 800aa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9c:	d103      	bne.n	800aaa6 <_dtoa_r+0x5be>
 800aa9e:	ee15 3a10 	vmov	r3, s10
 800aaa2:	07d9      	lsls	r1, r3, #31
 800aaa4:	d411      	bmi.n	800aaca <_dtoa_r+0x5e2>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 fe59 	bl	800b760 <_Bfree>
 800aaae:	2300      	movs	r3, #0
 800aab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aab2:	f888 3000 	strb.w	r3, [r8]
 800aab6:	f10b 0301 	add.w	r3, fp, #1
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f43f ad61 	beq.w	800a586 <_dtoa_r+0x9e>
 800aac4:	f8c3 8000 	str.w	r8, [r3]
 800aac8:	e55d      	b.n	800a586 <_dtoa_r+0x9e>
 800aaca:	465f      	mov	r7, fp
 800aacc:	4643      	mov	r3, r8
 800aace:	4698      	mov	r8, r3
 800aad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad4:	2a39      	cmp	r2, #57	; 0x39
 800aad6:	d106      	bne.n	800aae6 <_dtoa_r+0x5fe>
 800aad8:	9a01      	ldr	r2, [sp, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d1f7      	bne.n	800aace <_dtoa_r+0x5e6>
 800aade:	9901      	ldr	r1, [sp, #4]
 800aae0:	2230      	movs	r2, #48	; 0x30
 800aae2:	3701      	adds	r7, #1
 800aae4:	700a      	strb	r2, [r1, #0]
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	3201      	adds	r2, #1
 800aaea:	701a      	strb	r2, [r3, #0]
 800aaec:	e7ae      	b.n	800aa4c <_dtoa_r+0x564>
 800aaee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aaf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafa:	d1b2      	bne.n	800aa62 <_dtoa_r+0x57a>
 800aafc:	e7d3      	b.n	800aaa6 <_dtoa_r+0x5be>
 800aafe:	bf00      	nop
 800ab00:	0800d670 	.word	0x0800d670
 800ab04:	0800d648 	.word	0x0800d648
 800ab08:	9907      	ldr	r1, [sp, #28]
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	f000 80d0 	beq.w	800acb0 <_dtoa_r+0x7c8>
 800ab10:	9906      	ldr	r1, [sp, #24]
 800ab12:	2901      	cmp	r1, #1
 800ab14:	f300 80b4 	bgt.w	800ac80 <_dtoa_r+0x798>
 800ab18:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab1a:	2900      	cmp	r1, #0
 800ab1c:	f000 80ac 	beq.w	800ac78 <_dtoa_r+0x790>
 800ab20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ab28:	461c      	mov	r4, r3
 800ab2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	4413      	add	r3, r2
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	2101      	movs	r1, #1
 800ab36:	4413      	add	r3, r2
 800ab38:	4630      	mov	r0, r6
 800ab3a:	9305      	str	r3, [sp, #20]
 800ab3c:	f000 ff12 	bl	800b964 <__i2b>
 800ab40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab42:	4607      	mov	r7, r0
 800ab44:	f1b8 0f00 	cmp.w	r8, #0
 800ab48:	dd0d      	ble.n	800ab66 <_dtoa_r+0x67e>
 800ab4a:	9a05      	ldr	r2, [sp, #20]
 800ab4c:	2a00      	cmp	r2, #0
 800ab4e:	dd0a      	ble.n	800ab66 <_dtoa_r+0x67e>
 800ab50:	4542      	cmp	r2, r8
 800ab52:	9904      	ldr	r1, [sp, #16]
 800ab54:	bfa8      	it	ge
 800ab56:	4642      	movge	r2, r8
 800ab58:	1a89      	subs	r1, r1, r2
 800ab5a:	9104      	str	r1, [sp, #16]
 800ab5c:	9905      	ldr	r1, [sp, #20]
 800ab5e:	eba8 0802 	sub.w	r8, r8, r2
 800ab62:	1a8a      	subs	r2, r1, r2
 800ab64:	9205      	str	r2, [sp, #20]
 800ab66:	b303      	cbz	r3, 800abaa <_dtoa_r+0x6c2>
 800ab68:	9a07      	ldr	r2, [sp, #28]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	f000 80a5 	beq.w	800acba <_dtoa_r+0x7d2>
 800ab70:	2c00      	cmp	r4, #0
 800ab72:	dd13      	ble.n	800ab9c <_dtoa_r+0x6b4>
 800ab74:	4639      	mov	r1, r7
 800ab76:	4622      	mov	r2, r4
 800ab78:	4630      	mov	r0, r6
 800ab7a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab7c:	f000 ffb2 	bl	800bae4 <__pow5mult>
 800ab80:	462a      	mov	r2, r5
 800ab82:	4601      	mov	r1, r0
 800ab84:	4607      	mov	r7, r0
 800ab86:	4630      	mov	r0, r6
 800ab88:	f000 ff02 	bl	800b990 <__multiply>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	900a      	str	r0, [sp, #40]	; 0x28
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 fde5 	bl	800b760 <_Bfree>
 800ab96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	1b1a      	subs	r2, r3, r4
 800ab9e:	d004      	beq.n	800abaa <_dtoa_r+0x6c2>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	f000 ff9e 	bl	800bae4 <__pow5mult>
 800aba8:	4605      	mov	r5, r0
 800abaa:	2101      	movs	r1, #1
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fed9 	bl	800b964 <__i2b>
 800abb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	4604      	mov	r4, r0
 800abb8:	f340 8081 	ble.w	800acbe <_dtoa_r+0x7d6>
 800abbc:	461a      	mov	r2, r3
 800abbe:	4601      	mov	r1, r0
 800abc0:	4630      	mov	r0, r6
 800abc2:	f000 ff8f 	bl	800bae4 <__pow5mult>
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	4604      	mov	r4, r0
 800abcc:	dd7a      	ble.n	800acc4 <_dtoa_r+0x7dc>
 800abce:	2300      	movs	r3, #0
 800abd0:	930a      	str	r3, [sp, #40]	; 0x28
 800abd2:	6922      	ldr	r2, [r4, #16]
 800abd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800abd8:	6910      	ldr	r0, [r2, #16]
 800abda:	f000 fe73 	bl	800b8c4 <__hi0bits>
 800abde:	f1c0 0020 	rsb	r0, r0, #32
 800abe2:	9b05      	ldr	r3, [sp, #20]
 800abe4:	4418      	add	r0, r3
 800abe6:	f010 001f 	ands.w	r0, r0, #31
 800abea:	f000 808c 	beq.w	800ad06 <_dtoa_r+0x81e>
 800abee:	f1c0 0220 	rsb	r2, r0, #32
 800abf2:	2a04      	cmp	r2, #4
 800abf4:	f340 8085 	ble.w	800ad02 <_dtoa_r+0x81a>
 800abf8:	f1c0 001c 	rsb	r0, r0, #28
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	4403      	add	r3, r0
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9b05      	ldr	r3, [sp, #20]
 800ac04:	4403      	add	r3, r0
 800ac06:	4480      	add	r8, r0
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd05      	ble.n	800ac1c <_dtoa_r+0x734>
 800ac10:	4629      	mov	r1, r5
 800ac12:	461a      	mov	r2, r3
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 ffbf 	bl	800bb98 <__lshift>
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	9b05      	ldr	r3, [sp, #20]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	dd05      	ble.n	800ac2e <_dtoa_r+0x746>
 800ac22:	4621      	mov	r1, r4
 800ac24:	461a      	mov	r2, r3
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 ffb6 	bl	800bb98 <__lshift>
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d06a      	beq.n	800ad0a <_dtoa_r+0x822>
 800ac34:	4621      	mov	r1, r4
 800ac36:	4628      	mov	r0, r5
 800ac38:	f001 f81e 	bl	800bc78 <__mcmp>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	da64      	bge.n	800ad0a <_dtoa_r+0x822>
 800ac40:	2300      	movs	r3, #0
 800ac42:	4629      	mov	r1, r5
 800ac44:	220a      	movs	r2, #10
 800ac46:	4630      	mov	r0, r6
 800ac48:	f000 fdac 	bl	800b7a4 <__multadd>
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ac52:	4605      	mov	r5, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 8191 	beq.w	800af7c <_dtoa_r+0xa94>
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	220a      	movs	r2, #10
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 fd9f 	bl	800b7a4 <__multadd>
 800ac66:	f1ba 0f00 	cmp.w	sl, #0
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	f300 808d 	bgt.w	800ad8a <_dtoa_r+0x8a2>
 800ac70:	9b06      	ldr	r3, [sp, #24]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	dc50      	bgt.n	800ad18 <_dtoa_r+0x830>
 800ac76:	e088      	b.n	800ad8a <_dtoa_r+0x8a2>
 800ac78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac7a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac7e:	e751      	b.n	800ab24 <_dtoa_r+0x63c>
 800ac80:	f109 34ff 	add.w	r4, r9, #4294967295
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	bfbf      	itttt	lt
 800ac88:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ac8a:	1ae3      	sublt	r3, r4, r3
 800ac8c:	18d2      	addlt	r2, r2, r3
 800ac8e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ac90:	bfb6      	itet	lt
 800ac92:	4623      	movlt	r3, r4
 800ac94:	1b1c      	subge	r4, r3, r4
 800ac96:	2400      	movlt	r4, #0
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	bfb5      	itete	lt
 800ac9e:	9a04      	ldrlt	r2, [sp, #16]
 800aca0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800aca4:	eba2 0809 	sublt.w	r8, r2, r9
 800aca8:	464a      	movge	r2, r9
 800acaa:	bfb8      	it	lt
 800acac:	2200      	movlt	r2, #0
 800acae:	e73c      	b.n	800ab2a <_dtoa_r+0x642>
 800acb0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800acb4:	9f07      	ldr	r7, [sp, #28]
 800acb6:	461c      	mov	r4, r3
 800acb8:	e744      	b.n	800ab44 <_dtoa_r+0x65c>
 800acba:	461a      	mov	r2, r3
 800acbc:	e770      	b.n	800aba0 <_dtoa_r+0x6b8>
 800acbe:	9b06      	ldr	r3, [sp, #24]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	dc18      	bgt.n	800acf6 <_dtoa_r+0x80e>
 800acc4:	9b02      	ldr	r3, [sp, #8]
 800acc6:	b9b3      	cbnz	r3, 800acf6 <_dtoa_r+0x80e>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800acce:	b9a2      	cbnz	r2, 800acfa <_dtoa_r+0x812>
 800acd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800acd4:	0d12      	lsrs	r2, r2, #20
 800acd6:	0512      	lsls	r2, r2, #20
 800acd8:	b18a      	cbz	r2, 800acfe <_dtoa_r+0x816>
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	3301      	adds	r3, #1
 800acde:	9304      	str	r3, [sp, #16]
 800ace0:	9b05      	ldr	r3, [sp, #20]
 800ace2:	3301      	adds	r3, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	2301      	movs	r3, #1
 800ace8:	930a      	str	r3, [sp, #40]	; 0x28
 800acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	f47f af70 	bne.w	800abd2 <_dtoa_r+0x6ea>
 800acf2:	2001      	movs	r0, #1
 800acf4:	e775      	b.n	800abe2 <_dtoa_r+0x6fa>
 800acf6:	2300      	movs	r3, #0
 800acf8:	e7f6      	b.n	800ace8 <_dtoa_r+0x800>
 800acfa:	9b02      	ldr	r3, [sp, #8]
 800acfc:	e7f4      	b.n	800ace8 <_dtoa_r+0x800>
 800acfe:	920a      	str	r2, [sp, #40]	; 0x28
 800ad00:	e7f3      	b.n	800acea <_dtoa_r+0x802>
 800ad02:	d082      	beq.n	800ac0a <_dtoa_r+0x722>
 800ad04:	4610      	mov	r0, r2
 800ad06:	301c      	adds	r0, #28
 800ad08:	e778      	b.n	800abfc <_dtoa_r+0x714>
 800ad0a:	f1b9 0f00 	cmp.w	r9, #0
 800ad0e:	dc37      	bgt.n	800ad80 <_dtoa_r+0x898>
 800ad10:	9b06      	ldr	r3, [sp, #24]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	dd34      	ble.n	800ad80 <_dtoa_r+0x898>
 800ad16:	46ca      	mov	sl, r9
 800ad18:	f1ba 0f00 	cmp.w	sl, #0
 800ad1c:	d10d      	bne.n	800ad3a <_dtoa_r+0x852>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4653      	mov	r3, sl
 800ad22:	2205      	movs	r2, #5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f000 fd3d 	bl	800b7a4 <__multadd>
 800ad2a:	4601      	mov	r1, r0
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f000 ffa2 	bl	800bc78 <__mcmp>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f73f adeb 	bgt.w	800a910 <_dtoa_r+0x428>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad40:	ea6f 0b03 	mvn.w	fp, r3
 800ad44:	f04f 0900 	mov.w	r9, #0
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f000 fd08 	bl	800b760 <_Bfree>
 800ad50:	2f00      	cmp	r7, #0
 800ad52:	f43f aea8 	beq.w	800aaa6 <_dtoa_r+0x5be>
 800ad56:	f1b9 0f00 	cmp.w	r9, #0
 800ad5a:	d005      	beq.n	800ad68 <_dtoa_r+0x880>
 800ad5c:	45b9      	cmp	r9, r7
 800ad5e:	d003      	beq.n	800ad68 <_dtoa_r+0x880>
 800ad60:	4649      	mov	r1, r9
 800ad62:	4630      	mov	r0, r6
 800ad64:	f000 fcfc 	bl	800b760 <_Bfree>
 800ad68:	4639      	mov	r1, r7
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f000 fcf8 	bl	800b760 <_Bfree>
 800ad70:	e699      	b.n	800aaa6 <_dtoa_r+0x5be>
 800ad72:	2400      	movs	r4, #0
 800ad74:	4627      	mov	r7, r4
 800ad76:	e7e0      	b.n	800ad3a <_dtoa_r+0x852>
 800ad78:	46bb      	mov	fp, r7
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	e5c7      	b.n	800a910 <_dtoa_r+0x428>
 800ad80:	9b07      	ldr	r3, [sp, #28]
 800ad82:	46ca      	mov	sl, r9
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8100 	beq.w	800af8a <_dtoa_r+0xaa2>
 800ad8a:	f1b8 0f00 	cmp.w	r8, #0
 800ad8e:	dd05      	ble.n	800ad9c <_dtoa_r+0x8b4>
 800ad90:	4639      	mov	r1, r7
 800ad92:	4642      	mov	r2, r8
 800ad94:	4630      	mov	r0, r6
 800ad96:	f000 feff 	bl	800bb98 <__lshift>
 800ad9a:	4607      	mov	r7, r0
 800ad9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d05d      	beq.n	800ae5e <_dtoa_r+0x976>
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f000 fc9b 	bl	800b6e0 <_Balloc>
 800adaa:	4680      	mov	r8, r0
 800adac:	b928      	cbnz	r0, 800adba <_dtoa_r+0x8d2>
 800adae:	4b82      	ldr	r3, [pc, #520]	; (800afb8 <_dtoa_r+0xad0>)
 800adb0:	4602      	mov	r2, r0
 800adb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adb6:	f7ff bbaf 	b.w	800a518 <_dtoa_r+0x30>
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	3202      	adds	r2, #2
 800adbe:	0092      	lsls	r2, r2, #2
 800adc0:	f107 010c 	add.w	r1, r7, #12
 800adc4:	300c      	adds	r0, #12
 800adc6:	f7fd fdd5 	bl	8008974 <memcpy>
 800adca:	2201      	movs	r2, #1
 800adcc:	4641      	mov	r1, r8
 800adce:	4630      	mov	r0, r6
 800add0:	f000 fee2 	bl	800bb98 <__lshift>
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	3301      	adds	r3, #1
 800add8:	9304      	str	r3, [sp, #16]
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	4453      	add	r3, sl
 800adde:	9308      	str	r3, [sp, #32]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	46b9      	mov	r9, r7
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	4607      	mov	r7, r0
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	4621      	mov	r1, r4
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4628      	mov	r0, r5
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	f7ff fae9 	bl	800a3cc <quorem>
 800adfa:	4603      	mov	r3, r0
 800adfc:	3330      	adds	r3, #48	; 0x30
 800adfe:	9005      	str	r0, [sp, #20]
 800ae00:	4649      	mov	r1, r9
 800ae02:	4628      	mov	r0, r5
 800ae04:	9309      	str	r3, [sp, #36]	; 0x24
 800ae06:	f000 ff37 	bl	800bc78 <__mcmp>
 800ae0a:	463a      	mov	r2, r7
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 ff4d 	bl	800bcb0 <__mdiff>
 800ae16:	68c2      	ldr	r2, [r0, #12]
 800ae18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae1a:	4680      	mov	r8, r0
 800ae1c:	bb0a      	cbnz	r2, 800ae62 <_dtoa_r+0x97a>
 800ae1e:	4601      	mov	r1, r0
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 ff29 	bl	800bc78 <__mcmp>
 800ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae28:	4602      	mov	r2, r0
 800ae2a:	4641      	mov	r1, r8
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ae32:	f000 fc95 	bl	800b760 <_Bfree>
 800ae36:	9b06      	ldr	r3, [sp, #24]
 800ae38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae3a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae3e:	ea43 0102 	orr.w	r1, r3, r2
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	430b      	orrs	r3, r1
 800ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae48:	d10d      	bne.n	800ae66 <_dtoa_r+0x97e>
 800ae4a:	2b39      	cmp	r3, #57	; 0x39
 800ae4c:	d029      	beq.n	800aea2 <_dtoa_r+0x9ba>
 800ae4e:	f1ba 0f00 	cmp.w	sl, #0
 800ae52:	dd01      	ble.n	800ae58 <_dtoa_r+0x970>
 800ae54:	9b05      	ldr	r3, [sp, #20]
 800ae56:	3331      	adds	r3, #49	; 0x31
 800ae58:	9a02      	ldr	r2, [sp, #8]
 800ae5a:	7013      	strb	r3, [r2, #0]
 800ae5c:	e774      	b.n	800ad48 <_dtoa_r+0x860>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	e7b8      	b.n	800add4 <_dtoa_r+0x8ec>
 800ae62:	2201      	movs	r2, #1
 800ae64:	e7e1      	b.n	800ae2a <_dtoa_r+0x942>
 800ae66:	f1ba 0f00 	cmp.w	sl, #0
 800ae6a:	db06      	blt.n	800ae7a <_dtoa_r+0x992>
 800ae6c:	9906      	ldr	r1, [sp, #24]
 800ae6e:	ea41 0a0a 	orr.w	sl, r1, sl
 800ae72:	9907      	ldr	r1, [sp, #28]
 800ae74:	ea5a 0101 	orrs.w	r1, sl, r1
 800ae78:	d120      	bne.n	800aebc <_dtoa_r+0x9d4>
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	ddec      	ble.n	800ae58 <_dtoa_r+0x970>
 800ae7e:	4629      	mov	r1, r5
 800ae80:	2201      	movs	r2, #1
 800ae82:	4630      	mov	r0, r6
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	f000 fe87 	bl	800bb98 <__lshift>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	f000 fef3 	bl	800bc78 <__mcmp>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	9b04      	ldr	r3, [sp, #16]
 800ae96:	dc02      	bgt.n	800ae9e <_dtoa_r+0x9b6>
 800ae98:	d1de      	bne.n	800ae58 <_dtoa_r+0x970>
 800ae9a:	07da      	lsls	r2, r3, #31
 800ae9c:	d5dc      	bpl.n	800ae58 <_dtoa_r+0x970>
 800ae9e:	2b39      	cmp	r3, #57	; 0x39
 800aea0:	d1d8      	bne.n	800ae54 <_dtoa_r+0x96c>
 800aea2:	9a02      	ldr	r2, [sp, #8]
 800aea4:	2339      	movs	r3, #57	; 0x39
 800aea6:	7013      	strb	r3, [r2, #0]
 800aea8:	4643      	mov	r3, r8
 800aeaa:	4698      	mov	r8, r3
 800aeac:	3b01      	subs	r3, #1
 800aeae:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aeb2:	2a39      	cmp	r2, #57	; 0x39
 800aeb4:	d051      	beq.n	800af5a <_dtoa_r+0xa72>
 800aeb6:	3201      	adds	r2, #1
 800aeb8:	701a      	strb	r2, [r3, #0]
 800aeba:	e745      	b.n	800ad48 <_dtoa_r+0x860>
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	dd03      	ble.n	800aec8 <_dtoa_r+0x9e0>
 800aec0:	2b39      	cmp	r3, #57	; 0x39
 800aec2:	d0ee      	beq.n	800aea2 <_dtoa_r+0x9ba>
 800aec4:	3301      	adds	r3, #1
 800aec6:	e7c7      	b.n	800ae58 <_dtoa_r+0x970>
 800aec8:	9a04      	ldr	r2, [sp, #16]
 800aeca:	9908      	ldr	r1, [sp, #32]
 800aecc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aed0:	428a      	cmp	r2, r1
 800aed2:	d02b      	beq.n	800af2c <_dtoa_r+0xa44>
 800aed4:	4629      	mov	r1, r5
 800aed6:	2300      	movs	r3, #0
 800aed8:	220a      	movs	r2, #10
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 fc62 	bl	800b7a4 <__multadd>
 800aee0:	45b9      	cmp	r9, r7
 800aee2:	4605      	mov	r5, r0
 800aee4:	f04f 0300 	mov.w	r3, #0
 800aee8:	f04f 020a 	mov.w	r2, #10
 800aeec:	4649      	mov	r1, r9
 800aeee:	4630      	mov	r0, r6
 800aef0:	d107      	bne.n	800af02 <_dtoa_r+0xa1a>
 800aef2:	f000 fc57 	bl	800b7a4 <__multadd>
 800aef6:	4681      	mov	r9, r0
 800aef8:	4607      	mov	r7, r0
 800aefa:	9b04      	ldr	r3, [sp, #16]
 800aefc:	3301      	adds	r3, #1
 800aefe:	9304      	str	r3, [sp, #16]
 800af00:	e774      	b.n	800adec <_dtoa_r+0x904>
 800af02:	f000 fc4f 	bl	800b7a4 <__multadd>
 800af06:	4639      	mov	r1, r7
 800af08:	4681      	mov	r9, r0
 800af0a:	2300      	movs	r3, #0
 800af0c:	220a      	movs	r2, #10
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 fc48 	bl	800b7a4 <__multadd>
 800af14:	4607      	mov	r7, r0
 800af16:	e7f0      	b.n	800aefa <_dtoa_r+0xa12>
 800af18:	f1ba 0f00 	cmp.w	sl, #0
 800af1c:	9a01      	ldr	r2, [sp, #4]
 800af1e:	bfcc      	ite	gt
 800af20:	46d0      	movgt	r8, sl
 800af22:	f04f 0801 	movle.w	r8, #1
 800af26:	4490      	add	r8, r2
 800af28:	f04f 0900 	mov.w	r9, #0
 800af2c:	4629      	mov	r1, r5
 800af2e:	2201      	movs	r2, #1
 800af30:	4630      	mov	r0, r6
 800af32:	9302      	str	r3, [sp, #8]
 800af34:	f000 fe30 	bl	800bb98 <__lshift>
 800af38:	4621      	mov	r1, r4
 800af3a:	4605      	mov	r5, r0
 800af3c:	f000 fe9c 	bl	800bc78 <__mcmp>
 800af40:	2800      	cmp	r0, #0
 800af42:	dcb1      	bgt.n	800aea8 <_dtoa_r+0x9c0>
 800af44:	d102      	bne.n	800af4c <_dtoa_r+0xa64>
 800af46:	9b02      	ldr	r3, [sp, #8]
 800af48:	07db      	lsls	r3, r3, #31
 800af4a:	d4ad      	bmi.n	800aea8 <_dtoa_r+0x9c0>
 800af4c:	4643      	mov	r3, r8
 800af4e:	4698      	mov	r8, r3
 800af50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af54:	2a30      	cmp	r2, #48	; 0x30
 800af56:	d0fa      	beq.n	800af4e <_dtoa_r+0xa66>
 800af58:	e6f6      	b.n	800ad48 <_dtoa_r+0x860>
 800af5a:	9a01      	ldr	r2, [sp, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d1a4      	bne.n	800aeaa <_dtoa_r+0x9c2>
 800af60:	f10b 0b01 	add.w	fp, fp, #1
 800af64:	2331      	movs	r3, #49	; 0x31
 800af66:	e778      	b.n	800ae5a <_dtoa_r+0x972>
 800af68:	4b14      	ldr	r3, [pc, #80]	; (800afbc <_dtoa_r+0xad4>)
 800af6a:	f7ff bb27 	b.w	800a5bc <_dtoa_r+0xd4>
 800af6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af70:	2b00      	cmp	r3, #0
 800af72:	f47f ab03 	bne.w	800a57c <_dtoa_r+0x94>
 800af76:	4b12      	ldr	r3, [pc, #72]	; (800afc0 <_dtoa_r+0xad8>)
 800af78:	f7ff bb20 	b.w	800a5bc <_dtoa_r+0xd4>
 800af7c:	f1ba 0f00 	cmp.w	sl, #0
 800af80:	dc03      	bgt.n	800af8a <_dtoa_r+0xaa2>
 800af82:	9b06      	ldr	r3, [sp, #24]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f73f aec7 	bgt.w	800ad18 <_dtoa_r+0x830>
 800af8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800af8e:	4621      	mov	r1, r4
 800af90:	4628      	mov	r0, r5
 800af92:	f7ff fa1b 	bl	800a3cc <quorem>
 800af96:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af9a:	f808 3b01 	strb.w	r3, [r8], #1
 800af9e:	9a01      	ldr	r2, [sp, #4]
 800afa0:	eba8 0202 	sub.w	r2, r8, r2
 800afa4:	4592      	cmp	sl, r2
 800afa6:	ddb7      	ble.n	800af18 <_dtoa_r+0xa30>
 800afa8:	4629      	mov	r1, r5
 800afaa:	2300      	movs	r3, #0
 800afac:	220a      	movs	r2, #10
 800afae:	4630      	mov	r0, r6
 800afb0:	f000 fbf8 	bl	800b7a4 <__multadd>
 800afb4:	4605      	mov	r5, r0
 800afb6:	e7ea      	b.n	800af8e <_dtoa_r+0xaa6>
 800afb8:	0800d560 	.word	0x0800d560
 800afbc:	0800d364 	.word	0x0800d364
 800afc0:	0800d4e1 	.word	0x0800d4e1

0800afc4 <rshift>:
 800afc4:	6903      	ldr	r3, [r0, #16]
 800afc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afd2:	f100 0414 	add.w	r4, r0, #20
 800afd6:	dd45      	ble.n	800b064 <rshift+0xa0>
 800afd8:	f011 011f 	ands.w	r1, r1, #31
 800afdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afe0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afe4:	d10c      	bne.n	800b000 <rshift+0x3c>
 800afe6:	f100 0710 	add.w	r7, r0, #16
 800afea:	4629      	mov	r1, r5
 800afec:	42b1      	cmp	r1, r6
 800afee:	d334      	bcc.n	800b05a <rshift+0x96>
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	1eea      	subs	r2, r5, #3
 800aff6:	4296      	cmp	r6, r2
 800aff8:	bf38      	it	cc
 800affa:	2300      	movcc	r3, #0
 800affc:	4423      	add	r3, r4
 800affe:	e015      	b.n	800b02c <rshift+0x68>
 800b000:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b004:	f1c1 0820 	rsb	r8, r1, #32
 800b008:	40cf      	lsrs	r7, r1
 800b00a:	f105 0e04 	add.w	lr, r5, #4
 800b00e:	46a1      	mov	r9, r4
 800b010:	4576      	cmp	r6, lr
 800b012:	46f4      	mov	ip, lr
 800b014:	d815      	bhi.n	800b042 <rshift+0x7e>
 800b016:	1a9a      	subs	r2, r3, r2
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	3a04      	subs	r2, #4
 800b01c:	3501      	adds	r5, #1
 800b01e:	42ae      	cmp	r6, r5
 800b020:	bf38      	it	cc
 800b022:	2200      	movcc	r2, #0
 800b024:	18a3      	adds	r3, r4, r2
 800b026:	50a7      	str	r7, [r4, r2]
 800b028:	b107      	cbz	r7, 800b02c <rshift+0x68>
 800b02a:	3304      	adds	r3, #4
 800b02c:	1b1a      	subs	r2, r3, r4
 800b02e:	42a3      	cmp	r3, r4
 800b030:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b034:	bf08      	it	eq
 800b036:	2300      	moveq	r3, #0
 800b038:	6102      	str	r2, [r0, #16]
 800b03a:	bf08      	it	eq
 800b03c:	6143      	streq	r3, [r0, #20]
 800b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b042:	f8dc c000 	ldr.w	ip, [ip]
 800b046:	fa0c fc08 	lsl.w	ip, ip, r8
 800b04a:	ea4c 0707 	orr.w	r7, ip, r7
 800b04e:	f849 7b04 	str.w	r7, [r9], #4
 800b052:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b056:	40cf      	lsrs	r7, r1
 800b058:	e7da      	b.n	800b010 <rshift+0x4c>
 800b05a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b05e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b062:	e7c3      	b.n	800afec <rshift+0x28>
 800b064:	4623      	mov	r3, r4
 800b066:	e7e1      	b.n	800b02c <rshift+0x68>

0800b068 <__hexdig_fun>:
 800b068:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b06c:	2b09      	cmp	r3, #9
 800b06e:	d802      	bhi.n	800b076 <__hexdig_fun+0xe>
 800b070:	3820      	subs	r0, #32
 800b072:	b2c0      	uxtb	r0, r0
 800b074:	4770      	bx	lr
 800b076:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b07a:	2b05      	cmp	r3, #5
 800b07c:	d801      	bhi.n	800b082 <__hexdig_fun+0x1a>
 800b07e:	3847      	subs	r0, #71	; 0x47
 800b080:	e7f7      	b.n	800b072 <__hexdig_fun+0xa>
 800b082:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b086:	2b05      	cmp	r3, #5
 800b088:	d801      	bhi.n	800b08e <__hexdig_fun+0x26>
 800b08a:	3827      	subs	r0, #39	; 0x27
 800b08c:	e7f1      	b.n	800b072 <__hexdig_fun+0xa>
 800b08e:	2000      	movs	r0, #0
 800b090:	4770      	bx	lr
	...

0800b094 <__gethex>:
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	ed2d 8b02 	vpush	{d8}
 800b09c:	b089      	sub	sp, #36	; 0x24
 800b09e:	ee08 0a10 	vmov	s16, r0
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	4bb4      	ldr	r3, [pc, #720]	; (800b378 <__gethex+0x2e4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	468b      	mov	fp, r1
 800b0ae:	4690      	mov	r8, r2
 800b0b0:	f7f5 f916 	bl	80002e0 <strlen>
 800b0b4:	9b01      	ldr	r3, [sp, #4]
 800b0b6:	f8db 2000 	ldr.w	r2, [fp]
 800b0ba:	4403      	add	r3, r0
 800b0bc:	4682      	mov	sl, r0
 800b0be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	1c93      	adds	r3, r2, #2
 800b0c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0ce:	32fe      	adds	r2, #254	; 0xfe
 800b0d0:	18d1      	adds	r1, r2, r3
 800b0d2:	461f      	mov	r7, r3
 800b0d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0d8:	9100      	str	r1, [sp, #0]
 800b0da:	2830      	cmp	r0, #48	; 0x30
 800b0dc:	d0f8      	beq.n	800b0d0 <__gethex+0x3c>
 800b0de:	f7ff ffc3 	bl	800b068 <__hexdig_fun>
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d13a      	bne.n	800b15e <__gethex+0xca>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f001 fa2c 	bl	800c54a <strncmp>
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d168      	bne.n	800b1ca <__gethex+0x136>
 800b0f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b0fc:	eb07 060a 	add.w	r6, r7, sl
 800b100:	f7ff ffb2 	bl	800b068 <__hexdig_fun>
 800b104:	2800      	cmp	r0, #0
 800b106:	d062      	beq.n	800b1ce <__gethex+0x13a>
 800b108:	4633      	mov	r3, r6
 800b10a:	7818      	ldrb	r0, [r3, #0]
 800b10c:	2830      	cmp	r0, #48	; 0x30
 800b10e:	461f      	mov	r7, r3
 800b110:	f103 0301 	add.w	r3, r3, #1
 800b114:	d0f9      	beq.n	800b10a <__gethex+0x76>
 800b116:	f7ff ffa7 	bl	800b068 <__hexdig_fun>
 800b11a:	2301      	movs	r3, #1
 800b11c:	fab0 f480 	clz	r4, r0
 800b120:	0964      	lsrs	r4, r4, #5
 800b122:	4635      	mov	r5, r6
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	463a      	mov	r2, r7
 800b128:	4616      	mov	r6, r2
 800b12a:	3201      	adds	r2, #1
 800b12c:	7830      	ldrb	r0, [r6, #0]
 800b12e:	f7ff ff9b 	bl	800b068 <__hexdig_fun>
 800b132:	2800      	cmp	r0, #0
 800b134:	d1f8      	bne.n	800b128 <__gethex+0x94>
 800b136:	9901      	ldr	r1, [sp, #4]
 800b138:	4652      	mov	r2, sl
 800b13a:	4630      	mov	r0, r6
 800b13c:	f001 fa05 	bl	800c54a <strncmp>
 800b140:	b980      	cbnz	r0, 800b164 <__gethex+0xd0>
 800b142:	b94d      	cbnz	r5, 800b158 <__gethex+0xc4>
 800b144:	eb06 050a 	add.w	r5, r6, sl
 800b148:	462a      	mov	r2, r5
 800b14a:	4616      	mov	r6, r2
 800b14c:	3201      	adds	r2, #1
 800b14e:	7830      	ldrb	r0, [r6, #0]
 800b150:	f7ff ff8a 	bl	800b068 <__hexdig_fun>
 800b154:	2800      	cmp	r0, #0
 800b156:	d1f8      	bne.n	800b14a <__gethex+0xb6>
 800b158:	1bad      	subs	r5, r5, r6
 800b15a:	00ad      	lsls	r5, r5, #2
 800b15c:	e004      	b.n	800b168 <__gethex+0xd4>
 800b15e:	2400      	movs	r4, #0
 800b160:	4625      	mov	r5, r4
 800b162:	e7e0      	b.n	800b126 <__gethex+0x92>
 800b164:	2d00      	cmp	r5, #0
 800b166:	d1f7      	bne.n	800b158 <__gethex+0xc4>
 800b168:	7833      	ldrb	r3, [r6, #0]
 800b16a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b16e:	2b50      	cmp	r3, #80	; 0x50
 800b170:	d13b      	bne.n	800b1ea <__gethex+0x156>
 800b172:	7873      	ldrb	r3, [r6, #1]
 800b174:	2b2b      	cmp	r3, #43	; 0x2b
 800b176:	d02c      	beq.n	800b1d2 <__gethex+0x13e>
 800b178:	2b2d      	cmp	r3, #45	; 0x2d
 800b17a:	d02e      	beq.n	800b1da <__gethex+0x146>
 800b17c:	1c71      	adds	r1, r6, #1
 800b17e:	f04f 0900 	mov.w	r9, #0
 800b182:	7808      	ldrb	r0, [r1, #0]
 800b184:	f7ff ff70 	bl	800b068 <__hexdig_fun>
 800b188:	1e43      	subs	r3, r0, #1
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b18      	cmp	r3, #24
 800b18e:	d82c      	bhi.n	800b1ea <__gethex+0x156>
 800b190:	f1a0 0210 	sub.w	r2, r0, #16
 800b194:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b198:	f7ff ff66 	bl	800b068 <__hexdig_fun>
 800b19c:	1e43      	subs	r3, r0, #1
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b18      	cmp	r3, #24
 800b1a2:	d91d      	bls.n	800b1e0 <__gethex+0x14c>
 800b1a4:	f1b9 0f00 	cmp.w	r9, #0
 800b1a8:	d000      	beq.n	800b1ac <__gethex+0x118>
 800b1aa:	4252      	negs	r2, r2
 800b1ac:	4415      	add	r5, r2
 800b1ae:	f8cb 1000 	str.w	r1, [fp]
 800b1b2:	b1e4      	cbz	r4, 800b1ee <__gethex+0x15a>
 800b1b4:	9b00      	ldr	r3, [sp, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bf14      	ite	ne
 800b1ba:	2700      	movne	r7, #0
 800b1bc:	2706      	moveq	r7, #6
 800b1be:	4638      	mov	r0, r7
 800b1c0:	b009      	add	sp, #36	; 0x24
 800b1c2:	ecbd 8b02 	vpop	{d8}
 800b1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	4625      	mov	r5, r4
 800b1ce:	2401      	movs	r4, #1
 800b1d0:	e7ca      	b.n	800b168 <__gethex+0xd4>
 800b1d2:	f04f 0900 	mov.w	r9, #0
 800b1d6:	1cb1      	adds	r1, r6, #2
 800b1d8:	e7d3      	b.n	800b182 <__gethex+0xee>
 800b1da:	f04f 0901 	mov.w	r9, #1
 800b1de:	e7fa      	b.n	800b1d6 <__gethex+0x142>
 800b1e0:	230a      	movs	r3, #10
 800b1e2:	fb03 0202 	mla	r2, r3, r2, r0
 800b1e6:	3a10      	subs	r2, #16
 800b1e8:	e7d4      	b.n	800b194 <__gethex+0x100>
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	e7df      	b.n	800b1ae <__gethex+0x11a>
 800b1ee:	1bf3      	subs	r3, r6, r7
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	dc0b      	bgt.n	800b210 <__gethex+0x17c>
 800b1f8:	ee18 0a10 	vmov	r0, s16
 800b1fc:	f000 fa70 	bl	800b6e0 <_Balloc>
 800b200:	4604      	mov	r4, r0
 800b202:	b940      	cbnz	r0, 800b216 <__gethex+0x182>
 800b204:	4b5d      	ldr	r3, [pc, #372]	; (800b37c <__gethex+0x2e8>)
 800b206:	4602      	mov	r2, r0
 800b208:	21de      	movs	r1, #222	; 0xde
 800b20a:	485d      	ldr	r0, [pc, #372]	; (800b380 <__gethex+0x2ec>)
 800b20c:	f001 f9be 	bl	800c58c <__assert_func>
 800b210:	3101      	adds	r1, #1
 800b212:	105b      	asrs	r3, r3, #1
 800b214:	e7ee      	b.n	800b1f4 <__gethex+0x160>
 800b216:	f100 0914 	add.w	r9, r0, #20
 800b21a:	f04f 0b00 	mov.w	fp, #0
 800b21e:	f1ca 0301 	rsb	r3, sl, #1
 800b222:	f8cd 9008 	str.w	r9, [sp, #8]
 800b226:	f8cd b000 	str.w	fp, [sp]
 800b22a:	9306      	str	r3, [sp, #24]
 800b22c:	42b7      	cmp	r7, r6
 800b22e:	d340      	bcc.n	800b2b2 <__gethex+0x21e>
 800b230:	9802      	ldr	r0, [sp, #8]
 800b232:	9b00      	ldr	r3, [sp, #0]
 800b234:	f840 3b04 	str.w	r3, [r0], #4
 800b238:	eba0 0009 	sub.w	r0, r0, r9
 800b23c:	1080      	asrs	r0, r0, #2
 800b23e:	0146      	lsls	r6, r0, #5
 800b240:	6120      	str	r0, [r4, #16]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fb3e 	bl	800b8c4 <__hi0bits>
 800b248:	1a30      	subs	r0, r6, r0
 800b24a:	f8d8 6000 	ldr.w	r6, [r8]
 800b24e:	42b0      	cmp	r0, r6
 800b250:	dd63      	ble.n	800b31a <__gethex+0x286>
 800b252:	1b87      	subs	r7, r0, r6
 800b254:	4639      	mov	r1, r7
 800b256:	4620      	mov	r0, r4
 800b258:	f000 fedf 	bl	800c01a <__any_on>
 800b25c:	4682      	mov	sl, r0
 800b25e:	b1a8      	cbz	r0, 800b28c <__gethex+0x1f8>
 800b260:	1e7b      	subs	r3, r7, #1
 800b262:	1159      	asrs	r1, r3, #5
 800b264:	f003 021f 	and.w	r2, r3, #31
 800b268:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b26c:	f04f 0a01 	mov.w	sl, #1
 800b270:	fa0a f202 	lsl.w	r2, sl, r2
 800b274:	420a      	tst	r2, r1
 800b276:	d009      	beq.n	800b28c <__gethex+0x1f8>
 800b278:	4553      	cmp	r3, sl
 800b27a:	dd05      	ble.n	800b288 <__gethex+0x1f4>
 800b27c:	1eb9      	subs	r1, r7, #2
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fecb 	bl	800c01a <__any_on>
 800b284:	2800      	cmp	r0, #0
 800b286:	d145      	bne.n	800b314 <__gethex+0x280>
 800b288:	f04f 0a02 	mov.w	sl, #2
 800b28c:	4639      	mov	r1, r7
 800b28e:	4620      	mov	r0, r4
 800b290:	f7ff fe98 	bl	800afc4 <rshift>
 800b294:	443d      	add	r5, r7
 800b296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b29a:	42ab      	cmp	r3, r5
 800b29c:	da4c      	bge.n	800b338 <__gethex+0x2a4>
 800b29e:	ee18 0a10 	vmov	r0, s16
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	f000 fa5c 	bl	800b760 <_Bfree>
 800b2a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	27a3      	movs	r7, #163	; 0xa3
 800b2b0:	e785      	b.n	800b1be <__gethex+0x12a>
 800b2b2:	1e73      	subs	r3, r6, #1
 800b2b4:	9a05      	ldr	r2, [sp, #20]
 800b2b6:	9303      	str	r3, [sp, #12]
 800b2b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d019      	beq.n	800b2f4 <__gethex+0x260>
 800b2c0:	f1bb 0f20 	cmp.w	fp, #32
 800b2c4:	d107      	bne.n	800b2d6 <__gethex+0x242>
 800b2c6:	9b02      	ldr	r3, [sp, #8]
 800b2c8:	9a00      	ldr	r2, [sp, #0]
 800b2ca:	f843 2b04 	str.w	r2, [r3], #4
 800b2ce:	9302      	str	r3, [sp, #8]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	469b      	mov	fp, r3
 800b2d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b2da:	f7ff fec5 	bl	800b068 <__hexdig_fun>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	f000 000f 	and.w	r0, r0, #15
 800b2e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800b2e8:	4303      	orrs	r3, r0
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	f10b 0b04 	add.w	fp, fp, #4
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	e00d      	b.n	800b310 <__gethex+0x27c>
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	9a06      	ldr	r2, [sp, #24]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	42bb      	cmp	r3, r7
 800b2fc:	d3e0      	bcc.n	800b2c0 <__gethex+0x22c>
 800b2fe:	4618      	mov	r0, r3
 800b300:	9901      	ldr	r1, [sp, #4]
 800b302:	9307      	str	r3, [sp, #28]
 800b304:	4652      	mov	r2, sl
 800b306:	f001 f920 	bl	800c54a <strncmp>
 800b30a:	9b07      	ldr	r3, [sp, #28]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1d7      	bne.n	800b2c0 <__gethex+0x22c>
 800b310:	461e      	mov	r6, r3
 800b312:	e78b      	b.n	800b22c <__gethex+0x198>
 800b314:	f04f 0a03 	mov.w	sl, #3
 800b318:	e7b8      	b.n	800b28c <__gethex+0x1f8>
 800b31a:	da0a      	bge.n	800b332 <__gethex+0x29e>
 800b31c:	1a37      	subs	r7, r6, r0
 800b31e:	4621      	mov	r1, r4
 800b320:	ee18 0a10 	vmov	r0, s16
 800b324:	463a      	mov	r2, r7
 800b326:	f000 fc37 	bl	800bb98 <__lshift>
 800b32a:	1bed      	subs	r5, r5, r7
 800b32c:	4604      	mov	r4, r0
 800b32e:	f100 0914 	add.w	r9, r0, #20
 800b332:	f04f 0a00 	mov.w	sl, #0
 800b336:	e7ae      	b.n	800b296 <__gethex+0x202>
 800b338:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b33c:	42a8      	cmp	r0, r5
 800b33e:	dd72      	ble.n	800b426 <__gethex+0x392>
 800b340:	1b45      	subs	r5, r0, r5
 800b342:	42ae      	cmp	r6, r5
 800b344:	dc36      	bgt.n	800b3b4 <__gethex+0x320>
 800b346:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d02a      	beq.n	800b3a4 <__gethex+0x310>
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d02c      	beq.n	800b3ac <__gethex+0x318>
 800b352:	2b01      	cmp	r3, #1
 800b354:	d11c      	bne.n	800b390 <__gethex+0x2fc>
 800b356:	42ae      	cmp	r6, r5
 800b358:	d11a      	bne.n	800b390 <__gethex+0x2fc>
 800b35a:	2e01      	cmp	r6, #1
 800b35c:	d112      	bne.n	800b384 <__gethex+0x2f0>
 800b35e:	9a04      	ldr	r2, [sp, #16]
 800b360:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	2301      	movs	r3, #1
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	f8c9 3000 	str.w	r3, [r9]
 800b36e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b370:	2762      	movs	r7, #98	; 0x62
 800b372:	601c      	str	r4, [r3, #0]
 800b374:	e723      	b.n	800b1be <__gethex+0x12a>
 800b376:	bf00      	nop
 800b378:	0800d5d8 	.word	0x0800d5d8
 800b37c:	0800d560 	.word	0x0800d560
 800b380:	0800d571 	.word	0x0800d571
 800b384:	1e71      	subs	r1, r6, #1
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fe47 	bl	800c01a <__any_on>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d1e6      	bne.n	800b35e <__gethex+0x2ca>
 800b390:	ee18 0a10 	vmov	r0, s16
 800b394:	4621      	mov	r1, r4
 800b396:	f000 f9e3 	bl	800b760 <_Bfree>
 800b39a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b39c:	2300      	movs	r3, #0
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	2750      	movs	r7, #80	; 0x50
 800b3a2:	e70c      	b.n	800b1be <__gethex+0x12a>
 800b3a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f2      	bne.n	800b390 <__gethex+0x2fc>
 800b3aa:	e7d8      	b.n	800b35e <__gethex+0x2ca>
 800b3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1d5      	bne.n	800b35e <__gethex+0x2ca>
 800b3b2:	e7ed      	b.n	800b390 <__gethex+0x2fc>
 800b3b4:	1e6f      	subs	r7, r5, #1
 800b3b6:	f1ba 0f00 	cmp.w	sl, #0
 800b3ba:	d131      	bne.n	800b420 <__gethex+0x38c>
 800b3bc:	b127      	cbz	r7, 800b3c8 <__gethex+0x334>
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fe2a 	bl	800c01a <__any_on>
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	117b      	asrs	r3, r7, #5
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b3d0:	f007 071f 	and.w	r7, r7, #31
 800b3d4:	fa01 f707 	lsl.w	r7, r1, r7
 800b3d8:	421f      	tst	r7, r3
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4620      	mov	r0, r4
 800b3de:	bf18      	it	ne
 800b3e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b3e4:	1b76      	subs	r6, r6, r5
 800b3e6:	f7ff fded 	bl	800afc4 <rshift>
 800b3ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3ee:	2702      	movs	r7, #2
 800b3f0:	f1ba 0f00 	cmp.w	sl, #0
 800b3f4:	d048      	beq.n	800b488 <__gethex+0x3f4>
 800b3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d015      	beq.n	800b42a <__gethex+0x396>
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d017      	beq.n	800b432 <__gethex+0x39e>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d109      	bne.n	800b41a <__gethex+0x386>
 800b406:	f01a 0f02 	tst.w	sl, #2
 800b40a:	d006      	beq.n	800b41a <__gethex+0x386>
 800b40c:	f8d9 0000 	ldr.w	r0, [r9]
 800b410:	ea4a 0a00 	orr.w	sl, sl, r0
 800b414:	f01a 0f01 	tst.w	sl, #1
 800b418:	d10e      	bne.n	800b438 <__gethex+0x3a4>
 800b41a:	f047 0710 	orr.w	r7, r7, #16
 800b41e:	e033      	b.n	800b488 <__gethex+0x3f4>
 800b420:	f04f 0a01 	mov.w	sl, #1
 800b424:	e7d0      	b.n	800b3c8 <__gethex+0x334>
 800b426:	2701      	movs	r7, #1
 800b428:	e7e2      	b.n	800b3f0 <__gethex+0x35c>
 800b42a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b42c:	f1c3 0301 	rsb	r3, r3, #1
 800b430:	9315      	str	r3, [sp, #84]	; 0x54
 800b432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0f0      	beq.n	800b41a <__gethex+0x386>
 800b438:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b43c:	f104 0314 	add.w	r3, r4, #20
 800b440:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b444:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b448:	f04f 0c00 	mov.w	ip, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b452:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b456:	d01c      	beq.n	800b492 <__gethex+0x3fe>
 800b458:	3201      	adds	r2, #1
 800b45a:	6002      	str	r2, [r0, #0]
 800b45c:	2f02      	cmp	r7, #2
 800b45e:	f104 0314 	add.w	r3, r4, #20
 800b462:	d13f      	bne.n	800b4e4 <__gethex+0x450>
 800b464:	f8d8 2000 	ldr.w	r2, [r8]
 800b468:	3a01      	subs	r2, #1
 800b46a:	42b2      	cmp	r2, r6
 800b46c:	d10a      	bne.n	800b484 <__gethex+0x3f0>
 800b46e:	1171      	asrs	r1, r6, #5
 800b470:	2201      	movs	r2, #1
 800b472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b476:	f006 061f 	and.w	r6, r6, #31
 800b47a:	fa02 f606 	lsl.w	r6, r2, r6
 800b47e:	421e      	tst	r6, r3
 800b480:	bf18      	it	ne
 800b482:	4617      	movne	r7, r2
 800b484:	f047 0720 	orr.w	r7, r7, #32
 800b488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b48a:	601c      	str	r4, [r3, #0]
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	601d      	str	r5, [r3, #0]
 800b490:	e695      	b.n	800b1be <__gethex+0x12a>
 800b492:	4299      	cmp	r1, r3
 800b494:	f843 cc04 	str.w	ip, [r3, #-4]
 800b498:	d8d8      	bhi.n	800b44c <__gethex+0x3b8>
 800b49a:	68a3      	ldr	r3, [r4, #8]
 800b49c:	459b      	cmp	fp, r3
 800b49e:	db19      	blt.n	800b4d4 <__gethex+0x440>
 800b4a0:	6861      	ldr	r1, [r4, #4]
 800b4a2:	ee18 0a10 	vmov	r0, s16
 800b4a6:	3101      	adds	r1, #1
 800b4a8:	f000 f91a 	bl	800b6e0 <_Balloc>
 800b4ac:	4681      	mov	r9, r0
 800b4ae:	b918      	cbnz	r0, 800b4b8 <__gethex+0x424>
 800b4b0:	4b1a      	ldr	r3, [pc, #104]	; (800b51c <__gethex+0x488>)
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	2184      	movs	r1, #132	; 0x84
 800b4b6:	e6a8      	b.n	800b20a <__gethex+0x176>
 800b4b8:	6922      	ldr	r2, [r4, #16]
 800b4ba:	3202      	adds	r2, #2
 800b4bc:	f104 010c 	add.w	r1, r4, #12
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	300c      	adds	r0, #12
 800b4c4:	f7fd fa56 	bl	8008974 <memcpy>
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	ee18 0a10 	vmov	r0, s16
 800b4ce:	f000 f947 	bl	800b760 <_Bfree>
 800b4d2:	464c      	mov	r4, r9
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4dc:	6122      	str	r2, [r4, #16]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	615a      	str	r2, [r3, #20]
 800b4e2:	e7bb      	b.n	800b45c <__gethex+0x3c8>
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	455a      	cmp	r2, fp
 800b4e8:	dd0b      	ble.n	800b502 <__gethex+0x46e>
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f7ff fd69 	bl	800afc4 <rshift>
 800b4f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4f6:	3501      	adds	r5, #1
 800b4f8:	42ab      	cmp	r3, r5
 800b4fa:	f6ff aed0 	blt.w	800b29e <__gethex+0x20a>
 800b4fe:	2701      	movs	r7, #1
 800b500:	e7c0      	b.n	800b484 <__gethex+0x3f0>
 800b502:	f016 061f 	ands.w	r6, r6, #31
 800b506:	d0fa      	beq.n	800b4fe <__gethex+0x46a>
 800b508:	4453      	add	r3, sl
 800b50a:	f1c6 0620 	rsb	r6, r6, #32
 800b50e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b512:	f000 f9d7 	bl	800b8c4 <__hi0bits>
 800b516:	42b0      	cmp	r0, r6
 800b518:	dbe7      	blt.n	800b4ea <__gethex+0x456>
 800b51a:	e7f0      	b.n	800b4fe <__gethex+0x46a>
 800b51c:	0800d560 	.word	0x0800d560

0800b520 <L_shift>:
 800b520:	f1c2 0208 	rsb	r2, r2, #8
 800b524:	0092      	lsls	r2, r2, #2
 800b526:	b570      	push	{r4, r5, r6, lr}
 800b528:	f1c2 0620 	rsb	r6, r2, #32
 800b52c:	6843      	ldr	r3, [r0, #4]
 800b52e:	6804      	ldr	r4, [r0, #0]
 800b530:	fa03 f506 	lsl.w	r5, r3, r6
 800b534:	432c      	orrs	r4, r5
 800b536:	40d3      	lsrs	r3, r2
 800b538:	6004      	str	r4, [r0, #0]
 800b53a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b53e:	4288      	cmp	r0, r1
 800b540:	d3f4      	bcc.n	800b52c <L_shift+0xc>
 800b542:	bd70      	pop	{r4, r5, r6, pc}

0800b544 <__match>:
 800b544:	b530      	push	{r4, r5, lr}
 800b546:	6803      	ldr	r3, [r0, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b54e:	b914      	cbnz	r4, 800b556 <__match+0x12>
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	2001      	movs	r0, #1
 800b554:	bd30      	pop	{r4, r5, pc}
 800b556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b55a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b55e:	2d19      	cmp	r5, #25
 800b560:	bf98      	it	ls
 800b562:	3220      	addls	r2, #32
 800b564:	42a2      	cmp	r2, r4
 800b566:	d0f0      	beq.n	800b54a <__match+0x6>
 800b568:	2000      	movs	r0, #0
 800b56a:	e7f3      	b.n	800b554 <__match+0x10>

0800b56c <__hexnan>:
 800b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	680b      	ldr	r3, [r1, #0]
 800b572:	115e      	asrs	r6, r3, #5
 800b574:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b578:	f013 031f 	ands.w	r3, r3, #31
 800b57c:	b087      	sub	sp, #28
 800b57e:	bf18      	it	ne
 800b580:	3604      	addne	r6, #4
 800b582:	2500      	movs	r5, #0
 800b584:	1f37      	subs	r7, r6, #4
 800b586:	4690      	mov	r8, r2
 800b588:	6802      	ldr	r2, [r0, #0]
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	4682      	mov	sl, r0
 800b58e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b592:	46b9      	mov	r9, r7
 800b594:	463c      	mov	r4, r7
 800b596:	9502      	str	r5, [sp, #8]
 800b598:	46ab      	mov	fp, r5
 800b59a:	7851      	ldrb	r1, [r2, #1]
 800b59c:	1c53      	adds	r3, r2, #1
 800b59e:	9303      	str	r3, [sp, #12]
 800b5a0:	b341      	cbz	r1, 800b5f4 <__hexnan+0x88>
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	9205      	str	r2, [sp, #20]
 800b5a6:	9104      	str	r1, [sp, #16]
 800b5a8:	f7ff fd5e 	bl	800b068 <__hexdig_fun>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d14f      	bne.n	800b650 <__hexnan+0xe4>
 800b5b0:	9904      	ldr	r1, [sp, #16]
 800b5b2:	9a05      	ldr	r2, [sp, #20]
 800b5b4:	2920      	cmp	r1, #32
 800b5b6:	d818      	bhi.n	800b5ea <__hexnan+0x7e>
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	459b      	cmp	fp, r3
 800b5bc:	dd13      	ble.n	800b5e6 <__hexnan+0x7a>
 800b5be:	454c      	cmp	r4, r9
 800b5c0:	d206      	bcs.n	800b5d0 <__hexnan+0x64>
 800b5c2:	2d07      	cmp	r5, #7
 800b5c4:	dc04      	bgt.n	800b5d0 <__hexnan+0x64>
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff ffa8 	bl	800b520 <L_shift>
 800b5d0:	4544      	cmp	r4, r8
 800b5d2:	d950      	bls.n	800b676 <__hexnan+0x10a>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f1a4 0904 	sub.w	r9, r4, #4
 800b5da:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5de:	f8cd b008 	str.w	fp, [sp, #8]
 800b5e2:	464c      	mov	r4, r9
 800b5e4:	461d      	mov	r5, r3
 800b5e6:	9a03      	ldr	r2, [sp, #12]
 800b5e8:	e7d7      	b.n	800b59a <__hexnan+0x2e>
 800b5ea:	2929      	cmp	r1, #41	; 0x29
 800b5ec:	d156      	bne.n	800b69c <__hexnan+0x130>
 800b5ee:	3202      	adds	r2, #2
 800b5f0:	f8ca 2000 	str.w	r2, [sl]
 800b5f4:	f1bb 0f00 	cmp.w	fp, #0
 800b5f8:	d050      	beq.n	800b69c <__hexnan+0x130>
 800b5fa:	454c      	cmp	r4, r9
 800b5fc:	d206      	bcs.n	800b60c <__hexnan+0xa0>
 800b5fe:	2d07      	cmp	r5, #7
 800b600:	dc04      	bgt.n	800b60c <__hexnan+0xa0>
 800b602:	462a      	mov	r2, r5
 800b604:	4649      	mov	r1, r9
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff ff8a 	bl	800b520 <L_shift>
 800b60c:	4544      	cmp	r4, r8
 800b60e:	d934      	bls.n	800b67a <__hexnan+0x10e>
 800b610:	f1a8 0204 	sub.w	r2, r8, #4
 800b614:	4623      	mov	r3, r4
 800b616:	f853 1b04 	ldr.w	r1, [r3], #4
 800b61a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b61e:	429f      	cmp	r7, r3
 800b620:	d2f9      	bcs.n	800b616 <__hexnan+0xaa>
 800b622:	1b3b      	subs	r3, r7, r4
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	3304      	adds	r3, #4
 800b62a:	3401      	adds	r4, #1
 800b62c:	3e03      	subs	r6, #3
 800b62e:	42b4      	cmp	r4, r6
 800b630:	bf88      	it	hi
 800b632:	2304      	movhi	r3, #4
 800b634:	4443      	add	r3, r8
 800b636:	2200      	movs	r2, #0
 800b638:	f843 2b04 	str.w	r2, [r3], #4
 800b63c:	429f      	cmp	r7, r3
 800b63e:	d2fb      	bcs.n	800b638 <__hexnan+0xcc>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	b91b      	cbnz	r3, 800b64c <__hexnan+0xe0>
 800b644:	4547      	cmp	r7, r8
 800b646:	d127      	bne.n	800b698 <__hexnan+0x12c>
 800b648:	2301      	movs	r3, #1
 800b64a:	603b      	str	r3, [r7, #0]
 800b64c:	2005      	movs	r0, #5
 800b64e:	e026      	b.n	800b69e <__hexnan+0x132>
 800b650:	3501      	adds	r5, #1
 800b652:	2d08      	cmp	r5, #8
 800b654:	f10b 0b01 	add.w	fp, fp, #1
 800b658:	dd06      	ble.n	800b668 <__hexnan+0xfc>
 800b65a:	4544      	cmp	r4, r8
 800b65c:	d9c3      	bls.n	800b5e6 <__hexnan+0x7a>
 800b65e:	2300      	movs	r3, #0
 800b660:	f844 3c04 	str.w	r3, [r4, #-4]
 800b664:	2501      	movs	r5, #1
 800b666:	3c04      	subs	r4, #4
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	f000 000f 	and.w	r0, r0, #15
 800b66e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b672:	6022      	str	r2, [r4, #0]
 800b674:	e7b7      	b.n	800b5e6 <__hexnan+0x7a>
 800b676:	2508      	movs	r5, #8
 800b678:	e7b5      	b.n	800b5e6 <__hexnan+0x7a>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0df      	beq.n	800b640 <__hexnan+0xd4>
 800b680:	f04f 32ff 	mov.w	r2, #4294967295
 800b684:	f1c3 0320 	rsb	r3, r3, #32
 800b688:	fa22 f303 	lsr.w	r3, r2, r3
 800b68c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b690:	401a      	ands	r2, r3
 800b692:	f846 2c04 	str.w	r2, [r6, #-4]
 800b696:	e7d3      	b.n	800b640 <__hexnan+0xd4>
 800b698:	3f04      	subs	r7, #4
 800b69a:	e7d1      	b.n	800b640 <__hexnan+0xd4>
 800b69c:	2004      	movs	r0, #4
 800b69e:	b007      	add	sp, #28
 800b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6a4 <_localeconv_r>:
 800b6a4:	4800      	ldr	r0, [pc, #0]	; (800b6a8 <_localeconv_r+0x4>)
 800b6a6:	4770      	bx	lr
 800b6a8:	24000168 	.word	0x24000168

0800b6ac <malloc>:
 800b6ac:	4b02      	ldr	r3, [pc, #8]	; (800b6b8 <malloc+0xc>)
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	f000 bd55 	b.w	800c160 <_malloc_r>
 800b6b6:	bf00      	nop
 800b6b8:	24000010 	.word	0x24000010

0800b6bc <__ascii_mbtowc>:
 800b6bc:	b082      	sub	sp, #8
 800b6be:	b901      	cbnz	r1, 800b6c2 <__ascii_mbtowc+0x6>
 800b6c0:	a901      	add	r1, sp, #4
 800b6c2:	b142      	cbz	r2, 800b6d6 <__ascii_mbtowc+0x1a>
 800b6c4:	b14b      	cbz	r3, 800b6da <__ascii_mbtowc+0x1e>
 800b6c6:	7813      	ldrb	r3, [r2, #0]
 800b6c8:	600b      	str	r3, [r1, #0]
 800b6ca:	7812      	ldrb	r2, [r2, #0]
 800b6cc:	1e10      	subs	r0, r2, #0
 800b6ce:	bf18      	it	ne
 800b6d0:	2001      	movne	r0, #1
 800b6d2:	b002      	add	sp, #8
 800b6d4:	4770      	bx	lr
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	e7fb      	b.n	800b6d2 <__ascii_mbtowc+0x16>
 800b6da:	f06f 0001 	mvn.w	r0, #1
 800b6de:	e7f8      	b.n	800b6d2 <__ascii_mbtowc+0x16>

0800b6e0 <_Balloc>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	b976      	cbnz	r6, 800b708 <_Balloc+0x28>
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f7ff ffde 	bl	800b6ac <malloc>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b6f4:	b920      	cbnz	r0, 800b700 <_Balloc+0x20>
 800b6f6:	4b18      	ldr	r3, [pc, #96]	; (800b758 <_Balloc+0x78>)
 800b6f8:	4818      	ldr	r0, [pc, #96]	; (800b75c <_Balloc+0x7c>)
 800b6fa:	2166      	movs	r1, #102	; 0x66
 800b6fc:	f000 ff46 	bl	800c58c <__assert_func>
 800b700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b704:	6006      	str	r6, [r0, #0]
 800b706:	60c6      	str	r6, [r0, #12]
 800b708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b70a:	68f3      	ldr	r3, [r6, #12]
 800b70c:	b183      	cbz	r3, 800b730 <_Balloc+0x50>
 800b70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b716:	b9b8      	cbnz	r0, 800b748 <_Balloc+0x68>
 800b718:	2101      	movs	r1, #1
 800b71a:	fa01 f605 	lsl.w	r6, r1, r5
 800b71e:	1d72      	adds	r2, r6, #5
 800b720:	0092      	lsls	r2, r2, #2
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fc9a 	bl	800c05c <_calloc_r>
 800b728:	b160      	cbz	r0, 800b744 <_Balloc+0x64>
 800b72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b72e:	e00e      	b.n	800b74e <_Balloc+0x6e>
 800b730:	2221      	movs	r2, #33	; 0x21
 800b732:	2104      	movs	r1, #4
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fc91 	bl	800c05c <_calloc_r>
 800b73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b73c:	60f0      	str	r0, [r6, #12]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e4      	bne.n	800b70e <_Balloc+0x2e>
 800b744:	2000      	movs	r0, #0
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	6802      	ldr	r2, [r0, #0]
 800b74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b74e:	2300      	movs	r3, #0
 800b750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b754:	e7f7      	b.n	800b746 <_Balloc+0x66>
 800b756:	bf00      	nop
 800b758:	0800d4ee 	.word	0x0800d4ee
 800b75c:	0800d5ec 	.word	0x0800d5ec

0800b760 <_Bfree>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b764:	4605      	mov	r5, r0
 800b766:	460c      	mov	r4, r1
 800b768:	b976      	cbnz	r6, 800b788 <_Bfree+0x28>
 800b76a:	2010      	movs	r0, #16
 800b76c:	f7ff ff9e 	bl	800b6ac <malloc>
 800b770:	4602      	mov	r2, r0
 800b772:	6268      	str	r0, [r5, #36]	; 0x24
 800b774:	b920      	cbnz	r0, 800b780 <_Bfree+0x20>
 800b776:	4b09      	ldr	r3, [pc, #36]	; (800b79c <_Bfree+0x3c>)
 800b778:	4809      	ldr	r0, [pc, #36]	; (800b7a0 <_Bfree+0x40>)
 800b77a:	218a      	movs	r1, #138	; 0x8a
 800b77c:	f000 ff06 	bl	800c58c <__assert_func>
 800b780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b784:	6006      	str	r6, [r0, #0]
 800b786:	60c6      	str	r6, [r0, #12]
 800b788:	b13c      	cbz	r4, 800b79a <_Bfree+0x3a>
 800b78a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b78c:	6862      	ldr	r2, [r4, #4]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b794:	6021      	str	r1, [r4, #0]
 800b796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	0800d4ee 	.word	0x0800d4ee
 800b7a0:	0800d5ec 	.word	0x0800d5ec

0800b7a4 <__multadd>:
 800b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a8:	690d      	ldr	r5, [r1, #16]
 800b7aa:	4607      	mov	r7, r0
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	461e      	mov	r6, r3
 800b7b0:	f101 0c14 	add.w	ip, r1, #20
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b7ba:	b299      	uxth	r1, r3
 800b7bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b7c0:	0c1e      	lsrs	r6, r3, #16
 800b7c2:	0c0b      	lsrs	r3, r1, #16
 800b7c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b7c8:	b289      	uxth	r1, r1
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7d0:	4285      	cmp	r5, r0
 800b7d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b7d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7da:	dcec      	bgt.n	800b7b6 <__multadd+0x12>
 800b7dc:	b30e      	cbz	r6, 800b822 <__multadd+0x7e>
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	42ab      	cmp	r3, r5
 800b7e2:	dc19      	bgt.n	800b818 <__multadd+0x74>
 800b7e4:	6861      	ldr	r1, [r4, #4]
 800b7e6:	4638      	mov	r0, r7
 800b7e8:	3101      	adds	r1, #1
 800b7ea:	f7ff ff79 	bl	800b6e0 <_Balloc>
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	b928      	cbnz	r0, 800b7fe <__multadd+0x5a>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <__multadd+0x84>)
 800b7f6:	480d      	ldr	r0, [pc, #52]	; (800b82c <__multadd+0x88>)
 800b7f8:	21b5      	movs	r1, #181	; 0xb5
 800b7fa:	f000 fec7 	bl	800c58c <__assert_func>
 800b7fe:	6922      	ldr	r2, [r4, #16]
 800b800:	3202      	adds	r2, #2
 800b802:	f104 010c 	add.w	r1, r4, #12
 800b806:	0092      	lsls	r2, r2, #2
 800b808:	300c      	adds	r0, #12
 800b80a:	f7fd f8b3 	bl	8008974 <memcpy>
 800b80e:	4621      	mov	r1, r4
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ffa5 	bl	800b760 <_Bfree>
 800b816:	4644      	mov	r4, r8
 800b818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b81c:	3501      	adds	r5, #1
 800b81e:	615e      	str	r6, [r3, #20]
 800b820:	6125      	str	r5, [r4, #16]
 800b822:	4620      	mov	r0, r4
 800b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b828:	0800d560 	.word	0x0800d560
 800b82c:	0800d5ec 	.word	0x0800d5ec

0800b830 <__s2b>:
 800b830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b834:	460c      	mov	r4, r1
 800b836:	4615      	mov	r5, r2
 800b838:	461f      	mov	r7, r3
 800b83a:	2209      	movs	r2, #9
 800b83c:	3308      	adds	r3, #8
 800b83e:	4606      	mov	r6, r0
 800b840:	fb93 f3f2 	sdiv	r3, r3, r2
 800b844:	2100      	movs	r1, #0
 800b846:	2201      	movs	r2, #1
 800b848:	429a      	cmp	r2, r3
 800b84a:	db09      	blt.n	800b860 <__s2b+0x30>
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff ff47 	bl	800b6e0 <_Balloc>
 800b852:	b940      	cbnz	r0, 800b866 <__s2b+0x36>
 800b854:	4602      	mov	r2, r0
 800b856:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <__s2b+0x8c>)
 800b858:	4819      	ldr	r0, [pc, #100]	; (800b8c0 <__s2b+0x90>)
 800b85a:	21ce      	movs	r1, #206	; 0xce
 800b85c:	f000 fe96 	bl	800c58c <__assert_func>
 800b860:	0052      	lsls	r2, r2, #1
 800b862:	3101      	adds	r1, #1
 800b864:	e7f0      	b.n	800b848 <__s2b+0x18>
 800b866:	9b08      	ldr	r3, [sp, #32]
 800b868:	6143      	str	r3, [r0, #20]
 800b86a:	2d09      	cmp	r5, #9
 800b86c:	f04f 0301 	mov.w	r3, #1
 800b870:	6103      	str	r3, [r0, #16]
 800b872:	dd16      	ble.n	800b8a2 <__s2b+0x72>
 800b874:	f104 0909 	add.w	r9, r4, #9
 800b878:	46c8      	mov	r8, r9
 800b87a:	442c      	add	r4, r5
 800b87c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b880:	4601      	mov	r1, r0
 800b882:	3b30      	subs	r3, #48	; 0x30
 800b884:	220a      	movs	r2, #10
 800b886:	4630      	mov	r0, r6
 800b888:	f7ff ff8c 	bl	800b7a4 <__multadd>
 800b88c:	45a0      	cmp	r8, r4
 800b88e:	d1f5      	bne.n	800b87c <__s2b+0x4c>
 800b890:	f1a5 0408 	sub.w	r4, r5, #8
 800b894:	444c      	add	r4, r9
 800b896:	1b2d      	subs	r5, r5, r4
 800b898:	1963      	adds	r3, r4, r5
 800b89a:	42bb      	cmp	r3, r7
 800b89c:	db04      	blt.n	800b8a8 <__s2b+0x78>
 800b89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8a2:	340a      	adds	r4, #10
 800b8a4:	2509      	movs	r5, #9
 800b8a6:	e7f6      	b.n	800b896 <__s2b+0x66>
 800b8a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	3b30      	subs	r3, #48	; 0x30
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff76 	bl	800b7a4 <__multadd>
 800b8b8:	e7ee      	b.n	800b898 <__s2b+0x68>
 800b8ba:	bf00      	nop
 800b8bc:	0800d560 	.word	0x0800d560
 800b8c0:	0800d5ec 	.word	0x0800d5ec

0800b8c4 <__hi0bits>:
 800b8c4:	0c03      	lsrs	r3, r0, #16
 800b8c6:	041b      	lsls	r3, r3, #16
 800b8c8:	b9d3      	cbnz	r3, 800b900 <__hi0bits+0x3c>
 800b8ca:	0400      	lsls	r0, r0, #16
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8d2:	bf04      	itt	eq
 800b8d4:	0200      	lsleq	r0, r0, #8
 800b8d6:	3308      	addeq	r3, #8
 800b8d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8dc:	bf04      	itt	eq
 800b8de:	0100      	lsleq	r0, r0, #4
 800b8e0:	3304      	addeq	r3, #4
 800b8e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8e6:	bf04      	itt	eq
 800b8e8:	0080      	lsleq	r0, r0, #2
 800b8ea:	3302      	addeq	r3, #2
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	db05      	blt.n	800b8fc <__hi0bits+0x38>
 800b8f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8f4:	f103 0301 	add.w	r3, r3, #1
 800b8f8:	bf08      	it	eq
 800b8fa:	2320      	moveq	r3, #32
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	4770      	bx	lr
 800b900:	2300      	movs	r3, #0
 800b902:	e7e4      	b.n	800b8ce <__hi0bits+0xa>

0800b904 <__lo0bits>:
 800b904:	6803      	ldr	r3, [r0, #0]
 800b906:	f013 0207 	ands.w	r2, r3, #7
 800b90a:	4601      	mov	r1, r0
 800b90c:	d00b      	beq.n	800b926 <__lo0bits+0x22>
 800b90e:	07da      	lsls	r2, r3, #31
 800b910:	d423      	bmi.n	800b95a <__lo0bits+0x56>
 800b912:	0798      	lsls	r0, r3, #30
 800b914:	bf49      	itett	mi
 800b916:	085b      	lsrmi	r3, r3, #1
 800b918:	089b      	lsrpl	r3, r3, #2
 800b91a:	2001      	movmi	r0, #1
 800b91c:	600b      	strmi	r3, [r1, #0]
 800b91e:	bf5c      	itt	pl
 800b920:	600b      	strpl	r3, [r1, #0]
 800b922:	2002      	movpl	r0, #2
 800b924:	4770      	bx	lr
 800b926:	b298      	uxth	r0, r3
 800b928:	b9a8      	cbnz	r0, 800b956 <__lo0bits+0x52>
 800b92a:	0c1b      	lsrs	r3, r3, #16
 800b92c:	2010      	movs	r0, #16
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	b90a      	cbnz	r2, 800b936 <__lo0bits+0x32>
 800b932:	3008      	adds	r0, #8
 800b934:	0a1b      	lsrs	r3, r3, #8
 800b936:	071a      	lsls	r2, r3, #28
 800b938:	bf04      	itt	eq
 800b93a:	091b      	lsreq	r3, r3, #4
 800b93c:	3004      	addeq	r0, #4
 800b93e:	079a      	lsls	r2, r3, #30
 800b940:	bf04      	itt	eq
 800b942:	089b      	lsreq	r3, r3, #2
 800b944:	3002      	addeq	r0, #2
 800b946:	07da      	lsls	r2, r3, #31
 800b948:	d403      	bmi.n	800b952 <__lo0bits+0x4e>
 800b94a:	085b      	lsrs	r3, r3, #1
 800b94c:	f100 0001 	add.w	r0, r0, #1
 800b950:	d005      	beq.n	800b95e <__lo0bits+0x5a>
 800b952:	600b      	str	r3, [r1, #0]
 800b954:	4770      	bx	lr
 800b956:	4610      	mov	r0, r2
 800b958:	e7e9      	b.n	800b92e <__lo0bits+0x2a>
 800b95a:	2000      	movs	r0, #0
 800b95c:	4770      	bx	lr
 800b95e:	2020      	movs	r0, #32
 800b960:	4770      	bx	lr
	...

0800b964 <__i2b>:
 800b964:	b510      	push	{r4, lr}
 800b966:	460c      	mov	r4, r1
 800b968:	2101      	movs	r1, #1
 800b96a:	f7ff feb9 	bl	800b6e0 <_Balloc>
 800b96e:	4602      	mov	r2, r0
 800b970:	b928      	cbnz	r0, 800b97e <__i2b+0x1a>
 800b972:	4b05      	ldr	r3, [pc, #20]	; (800b988 <__i2b+0x24>)
 800b974:	4805      	ldr	r0, [pc, #20]	; (800b98c <__i2b+0x28>)
 800b976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b97a:	f000 fe07 	bl	800c58c <__assert_func>
 800b97e:	2301      	movs	r3, #1
 800b980:	6144      	str	r4, [r0, #20]
 800b982:	6103      	str	r3, [r0, #16]
 800b984:	bd10      	pop	{r4, pc}
 800b986:	bf00      	nop
 800b988:	0800d560 	.word	0x0800d560
 800b98c:	0800d5ec 	.word	0x0800d5ec

0800b990 <__multiply>:
 800b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	4691      	mov	r9, r2
 800b996:	690a      	ldr	r2, [r1, #16]
 800b998:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	bfb8      	it	lt
 800b9a0:	460b      	movlt	r3, r1
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	bfbc      	itt	lt
 800b9a6:	464c      	movlt	r4, r9
 800b9a8:	4699      	movlt	r9, r3
 800b9aa:	6927      	ldr	r7, [r4, #16]
 800b9ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9b0:	68a3      	ldr	r3, [r4, #8]
 800b9b2:	6861      	ldr	r1, [r4, #4]
 800b9b4:	eb07 060a 	add.w	r6, r7, sl
 800b9b8:	42b3      	cmp	r3, r6
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	bfb8      	it	lt
 800b9be:	3101      	addlt	r1, #1
 800b9c0:	f7ff fe8e 	bl	800b6e0 <_Balloc>
 800b9c4:	b930      	cbnz	r0, 800b9d4 <__multiply+0x44>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	4b44      	ldr	r3, [pc, #272]	; (800badc <__multiply+0x14c>)
 800b9ca:	4845      	ldr	r0, [pc, #276]	; (800bae0 <__multiply+0x150>)
 800b9cc:	f240 115d 	movw	r1, #349	; 0x15d
 800b9d0:	f000 fddc 	bl	800c58c <__assert_func>
 800b9d4:	f100 0514 	add.w	r5, r0, #20
 800b9d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9dc:	462b      	mov	r3, r5
 800b9de:	2200      	movs	r2, #0
 800b9e0:	4543      	cmp	r3, r8
 800b9e2:	d321      	bcc.n	800ba28 <__multiply+0x98>
 800b9e4:	f104 0314 	add.w	r3, r4, #20
 800b9e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9ec:	f109 0314 	add.w	r3, r9, #20
 800b9f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9f4:	9202      	str	r2, [sp, #8]
 800b9f6:	1b3a      	subs	r2, r7, r4
 800b9f8:	3a15      	subs	r2, #21
 800b9fa:	f022 0203 	bic.w	r2, r2, #3
 800b9fe:	3204      	adds	r2, #4
 800ba00:	f104 0115 	add.w	r1, r4, #21
 800ba04:	428f      	cmp	r7, r1
 800ba06:	bf38      	it	cc
 800ba08:	2204      	movcc	r2, #4
 800ba0a:	9201      	str	r2, [sp, #4]
 800ba0c:	9a02      	ldr	r2, [sp, #8]
 800ba0e:	9303      	str	r3, [sp, #12]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d80c      	bhi.n	800ba2e <__multiply+0x9e>
 800ba14:	2e00      	cmp	r6, #0
 800ba16:	dd03      	ble.n	800ba20 <__multiply+0x90>
 800ba18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d05a      	beq.n	800bad6 <__multiply+0x146>
 800ba20:	6106      	str	r6, [r0, #16]
 800ba22:	b005      	add	sp, #20
 800ba24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba28:	f843 2b04 	str.w	r2, [r3], #4
 800ba2c:	e7d8      	b.n	800b9e0 <__multiply+0x50>
 800ba2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba32:	f1ba 0f00 	cmp.w	sl, #0
 800ba36:	d024      	beq.n	800ba82 <__multiply+0xf2>
 800ba38:	f104 0e14 	add.w	lr, r4, #20
 800ba3c:	46a9      	mov	r9, r5
 800ba3e:	f04f 0c00 	mov.w	ip, #0
 800ba42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba46:	f8d9 1000 	ldr.w	r1, [r9]
 800ba4a:	fa1f fb82 	uxth.w	fp, r2
 800ba4e:	b289      	uxth	r1, r1
 800ba50:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba58:	f8d9 2000 	ldr.w	r2, [r9]
 800ba5c:	4461      	add	r1, ip
 800ba5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba62:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba6a:	b289      	uxth	r1, r1
 800ba6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba70:	4577      	cmp	r7, lr
 800ba72:	f849 1b04 	str.w	r1, [r9], #4
 800ba76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba7a:	d8e2      	bhi.n	800ba42 <__multiply+0xb2>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	f845 c002 	str.w	ip, [r5, r2]
 800ba82:	9a03      	ldr	r2, [sp, #12]
 800ba84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	d020      	beq.n	800bad2 <__multiply+0x142>
 800ba90:	6829      	ldr	r1, [r5, #0]
 800ba92:	f104 0c14 	add.w	ip, r4, #20
 800ba96:	46ae      	mov	lr, r5
 800ba98:	f04f 0a00 	mov.w	sl, #0
 800ba9c:	f8bc b000 	ldrh.w	fp, [ip]
 800baa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800baa4:	fb09 220b 	mla	r2, r9, fp, r2
 800baa8:	4492      	add	sl, r2
 800baaa:	b289      	uxth	r1, r1
 800baac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bab0:	f84e 1b04 	str.w	r1, [lr], #4
 800bab4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bab8:	f8be 1000 	ldrh.w	r1, [lr]
 800babc:	0c12      	lsrs	r2, r2, #16
 800babe:	fb09 1102 	mla	r1, r9, r2, r1
 800bac2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bac6:	4567      	cmp	r7, ip
 800bac8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bacc:	d8e6      	bhi.n	800ba9c <__multiply+0x10c>
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	50a9      	str	r1, [r5, r2]
 800bad2:	3504      	adds	r5, #4
 800bad4:	e79a      	b.n	800ba0c <__multiply+0x7c>
 800bad6:	3e01      	subs	r6, #1
 800bad8:	e79c      	b.n	800ba14 <__multiply+0x84>
 800bada:	bf00      	nop
 800badc:	0800d560 	.word	0x0800d560
 800bae0:	0800d5ec 	.word	0x0800d5ec

0800bae4 <__pow5mult>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	4615      	mov	r5, r2
 800baea:	f012 0203 	ands.w	r2, r2, #3
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	d007      	beq.n	800bb04 <__pow5mult+0x20>
 800baf4:	4c25      	ldr	r4, [pc, #148]	; (800bb8c <__pow5mult+0xa8>)
 800baf6:	3a01      	subs	r2, #1
 800baf8:	2300      	movs	r3, #0
 800bafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bafe:	f7ff fe51 	bl	800b7a4 <__multadd>
 800bb02:	4607      	mov	r7, r0
 800bb04:	10ad      	asrs	r5, r5, #2
 800bb06:	d03d      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb0a:	b97c      	cbnz	r4, 800bb2c <__pow5mult+0x48>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f7ff fdcd 	bl	800b6ac <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6270      	str	r0, [r6, #36]	; 0x24
 800bb16:	b928      	cbnz	r0, 800bb24 <__pow5mult+0x40>
 800bb18:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <__pow5mult+0xac>)
 800bb1a:	481e      	ldr	r0, [pc, #120]	; (800bb94 <__pow5mult+0xb0>)
 800bb1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb20:	f000 fd34 	bl	800c58c <__assert_func>
 800bb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb28:	6004      	str	r4, [r0, #0]
 800bb2a:	60c4      	str	r4, [r0, #12]
 800bb2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb34:	b94c      	cbnz	r4, 800bb4a <__pow5mult+0x66>
 800bb36:	f240 2171 	movw	r1, #625	; 0x271
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ff12 	bl	800b964 <__i2b>
 800bb40:	2300      	movs	r3, #0
 800bb42:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb46:	4604      	mov	r4, r0
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	f04f 0900 	mov.w	r9, #0
 800bb4e:	07eb      	lsls	r3, r5, #31
 800bb50:	d50a      	bpl.n	800bb68 <__pow5mult+0x84>
 800bb52:	4639      	mov	r1, r7
 800bb54:	4622      	mov	r2, r4
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7ff ff1a 	bl	800b990 <__multiply>
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4680      	mov	r8, r0
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff fdfd 	bl	800b760 <_Bfree>
 800bb66:	4647      	mov	r7, r8
 800bb68:	106d      	asrs	r5, r5, #1
 800bb6a:	d00b      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	b938      	cbnz	r0, 800bb80 <__pow5mult+0x9c>
 800bb70:	4622      	mov	r2, r4
 800bb72:	4621      	mov	r1, r4
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ff0b 	bl	800b990 <__multiply>
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f8c0 9000 	str.w	r9, [r0]
 800bb80:	4604      	mov	r4, r0
 800bb82:	e7e4      	b.n	800bb4e <__pow5mult+0x6a>
 800bb84:	4638      	mov	r0, r7
 800bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800d738 	.word	0x0800d738
 800bb90:	0800d4ee 	.word	0x0800d4ee
 800bb94:	0800d5ec 	.word	0x0800d5ec

0800bb98 <__lshift>:
 800bb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	6849      	ldr	r1, [r1, #4]
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bba6:	68a3      	ldr	r3, [r4, #8]
 800bba8:	4607      	mov	r7, r0
 800bbaa:	4691      	mov	r9, r2
 800bbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbb0:	f108 0601 	add.w	r6, r8, #1
 800bbb4:	42b3      	cmp	r3, r6
 800bbb6:	db0b      	blt.n	800bbd0 <__lshift+0x38>
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff fd91 	bl	800b6e0 <_Balloc>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	b948      	cbnz	r0, 800bbd6 <__lshift+0x3e>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4b2a      	ldr	r3, [pc, #168]	; (800bc70 <__lshift+0xd8>)
 800bbc6:	482b      	ldr	r0, [pc, #172]	; (800bc74 <__lshift+0xdc>)
 800bbc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbcc:	f000 fcde 	bl	800c58c <__assert_func>
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__lshift+0x1c>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f100 0114 	add.w	r1, r0, #20
 800bbdc:	f100 0210 	add.w	r2, r0, #16
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	4553      	cmp	r3, sl
 800bbe4:	db37      	blt.n	800bc56 <__lshift+0xbe>
 800bbe6:	6920      	ldr	r0, [r4, #16]
 800bbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbec:	f104 0314 	add.w	r3, r4, #20
 800bbf0:	f019 091f 	ands.w	r9, r9, #31
 800bbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bbfc:	d02f      	beq.n	800bc5e <__lshift+0xc6>
 800bbfe:	f1c9 0e20 	rsb	lr, r9, #32
 800bc02:	468a      	mov	sl, r1
 800bc04:	f04f 0c00 	mov.w	ip, #0
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	fa02 f209 	lsl.w	r2, r2, r9
 800bc0e:	ea42 020c 	orr.w	r2, r2, ip
 800bc12:	f84a 2b04 	str.w	r2, [sl], #4
 800bc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1a:	4298      	cmp	r0, r3
 800bc1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc20:	d8f2      	bhi.n	800bc08 <__lshift+0x70>
 800bc22:	1b03      	subs	r3, r0, r4
 800bc24:	3b15      	subs	r3, #21
 800bc26:	f023 0303 	bic.w	r3, r3, #3
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	f104 0215 	add.w	r2, r4, #21
 800bc30:	4290      	cmp	r0, r2
 800bc32:	bf38      	it	cc
 800bc34:	2304      	movcc	r3, #4
 800bc36:	f841 c003 	str.w	ip, [r1, r3]
 800bc3a:	f1bc 0f00 	cmp.w	ip, #0
 800bc3e:	d001      	beq.n	800bc44 <__lshift+0xac>
 800bc40:	f108 0602 	add.w	r6, r8, #2
 800bc44:	3e01      	subs	r6, #1
 800bc46:	4638      	mov	r0, r7
 800bc48:	612e      	str	r6, [r5, #16]
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	f7ff fd88 	bl	800b760 <_Bfree>
 800bc50:	4628      	mov	r0, r5
 800bc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc56:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	e7c1      	b.n	800bbe2 <__lshift+0x4a>
 800bc5e:	3904      	subs	r1, #4
 800bc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc64:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc68:	4298      	cmp	r0, r3
 800bc6a:	d8f9      	bhi.n	800bc60 <__lshift+0xc8>
 800bc6c:	e7ea      	b.n	800bc44 <__lshift+0xac>
 800bc6e:	bf00      	nop
 800bc70:	0800d560 	.word	0x0800d560
 800bc74:	0800d5ec 	.word	0x0800d5ec

0800bc78 <__mcmp>:
 800bc78:	b530      	push	{r4, r5, lr}
 800bc7a:	6902      	ldr	r2, [r0, #16]
 800bc7c:	690c      	ldr	r4, [r1, #16]
 800bc7e:	1b12      	subs	r2, r2, r4
 800bc80:	d10e      	bne.n	800bca0 <__mcmp+0x28>
 800bc82:	f100 0314 	add.w	r3, r0, #20
 800bc86:	3114      	adds	r1, #20
 800bc88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc98:	42a5      	cmp	r5, r4
 800bc9a:	d003      	beq.n	800bca4 <__mcmp+0x2c>
 800bc9c:	d305      	bcc.n	800bcaa <__mcmp+0x32>
 800bc9e:	2201      	movs	r2, #1
 800bca0:	4610      	mov	r0, r2
 800bca2:	bd30      	pop	{r4, r5, pc}
 800bca4:	4283      	cmp	r3, r0
 800bca6:	d3f3      	bcc.n	800bc90 <__mcmp+0x18>
 800bca8:	e7fa      	b.n	800bca0 <__mcmp+0x28>
 800bcaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bcae:	e7f7      	b.n	800bca0 <__mcmp+0x28>

0800bcb0 <__mdiff>:
 800bcb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	f7ff ffdb 	bl	800bc78 <__mcmp>
 800bcc2:	1e05      	subs	r5, r0, #0
 800bcc4:	d110      	bne.n	800bce8 <__mdiff+0x38>
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff fd09 	bl	800b6e0 <_Balloc>
 800bcce:	b930      	cbnz	r0, 800bcde <__mdiff+0x2e>
 800bcd0:	4b3a      	ldr	r3, [pc, #232]	; (800bdbc <__mdiff+0x10c>)
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	f240 2132 	movw	r1, #562	; 0x232
 800bcd8:	4839      	ldr	r0, [pc, #228]	; (800bdc0 <__mdiff+0x110>)
 800bcda:	f000 fc57 	bl	800c58c <__assert_func>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bce4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce8:	bfa4      	itt	ge
 800bcea:	4643      	movge	r3, r8
 800bcec:	46a0      	movge	r8, r4
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bcf4:	bfa6      	itte	ge
 800bcf6:	461c      	movge	r4, r3
 800bcf8:	2500      	movge	r5, #0
 800bcfa:	2501      	movlt	r5, #1
 800bcfc:	f7ff fcf0 	bl	800b6e0 <_Balloc>
 800bd00:	b920      	cbnz	r0, 800bd0c <__mdiff+0x5c>
 800bd02:	4b2e      	ldr	r3, [pc, #184]	; (800bdbc <__mdiff+0x10c>)
 800bd04:	4602      	mov	r2, r0
 800bd06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd0a:	e7e5      	b.n	800bcd8 <__mdiff+0x28>
 800bd0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd10:	6926      	ldr	r6, [r4, #16]
 800bd12:	60c5      	str	r5, [r0, #12]
 800bd14:	f104 0914 	add.w	r9, r4, #20
 800bd18:	f108 0514 	add.w	r5, r8, #20
 800bd1c:	f100 0e14 	add.w	lr, r0, #20
 800bd20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd28:	f108 0210 	add.w	r2, r8, #16
 800bd2c:	46f2      	mov	sl, lr
 800bd2e:	2100      	movs	r1, #0
 800bd30:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd38:	fa1f f883 	uxth.w	r8, r3
 800bd3c:	fa11 f18b 	uxtah	r1, r1, fp
 800bd40:	0c1b      	lsrs	r3, r3, #16
 800bd42:	eba1 0808 	sub.w	r8, r1, r8
 800bd46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd4e:	fa1f f888 	uxth.w	r8, r8
 800bd52:	1419      	asrs	r1, r3, #16
 800bd54:	454e      	cmp	r6, r9
 800bd56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd5a:	f84a 3b04 	str.w	r3, [sl], #4
 800bd5e:	d8e7      	bhi.n	800bd30 <__mdiff+0x80>
 800bd60:	1b33      	subs	r3, r6, r4
 800bd62:	3b15      	subs	r3, #21
 800bd64:	f023 0303 	bic.w	r3, r3, #3
 800bd68:	3304      	adds	r3, #4
 800bd6a:	3415      	adds	r4, #21
 800bd6c:	42a6      	cmp	r6, r4
 800bd6e:	bf38      	it	cc
 800bd70:	2304      	movcc	r3, #4
 800bd72:	441d      	add	r5, r3
 800bd74:	4473      	add	r3, lr
 800bd76:	469e      	mov	lr, r3
 800bd78:	462e      	mov	r6, r5
 800bd7a:	4566      	cmp	r6, ip
 800bd7c:	d30e      	bcc.n	800bd9c <__mdiff+0xec>
 800bd7e:	f10c 0203 	add.w	r2, ip, #3
 800bd82:	1b52      	subs	r2, r2, r5
 800bd84:	f022 0203 	bic.w	r2, r2, #3
 800bd88:	3d03      	subs	r5, #3
 800bd8a:	45ac      	cmp	ip, r5
 800bd8c:	bf38      	it	cc
 800bd8e:	2200      	movcc	r2, #0
 800bd90:	441a      	add	r2, r3
 800bd92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd96:	b17b      	cbz	r3, 800bdb8 <__mdiff+0x108>
 800bd98:	6107      	str	r7, [r0, #16]
 800bd9a:	e7a3      	b.n	800bce4 <__mdiff+0x34>
 800bd9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bda0:	fa11 f288 	uxtah	r2, r1, r8
 800bda4:	1414      	asrs	r4, r2, #16
 800bda6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdaa:	b292      	uxth	r2, r2
 800bdac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdb0:	f84e 2b04 	str.w	r2, [lr], #4
 800bdb4:	1421      	asrs	r1, r4, #16
 800bdb6:	e7e0      	b.n	800bd7a <__mdiff+0xca>
 800bdb8:	3f01      	subs	r7, #1
 800bdba:	e7ea      	b.n	800bd92 <__mdiff+0xe2>
 800bdbc:	0800d560 	.word	0x0800d560
 800bdc0:	0800d5ec 	.word	0x0800d5ec

0800bdc4 <__ulp>:
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	ed8d 0b00 	vstr	d0, [sp]
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	4912      	ldr	r1, [pc, #72]	; (800be18 <__ulp+0x54>)
 800bdce:	4019      	ands	r1, r3
 800bdd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	dd05      	ble.n	800bde4 <__ulp+0x20>
 800bdd8:	2200      	movs	r2, #0
 800bdda:	460b      	mov	r3, r1
 800bddc:	ec43 2b10 	vmov	d0, r2, r3
 800bde0:	b002      	add	sp, #8
 800bde2:	4770      	bx	lr
 800bde4:	4249      	negs	r1, r1
 800bde6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bdea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bdee:	f04f 0200 	mov.w	r2, #0
 800bdf2:	f04f 0300 	mov.w	r3, #0
 800bdf6:	da04      	bge.n	800be02 <__ulp+0x3e>
 800bdf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bdfc:	fa41 f300 	asr.w	r3, r1, r0
 800be00:	e7ec      	b.n	800bddc <__ulp+0x18>
 800be02:	f1a0 0114 	sub.w	r1, r0, #20
 800be06:	291e      	cmp	r1, #30
 800be08:	bfda      	itte	le
 800be0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800be12:	2101      	movgt	r1, #1
 800be14:	460a      	mov	r2, r1
 800be16:	e7e1      	b.n	800bddc <__ulp+0x18>
 800be18:	7ff00000 	.word	0x7ff00000

0800be1c <__b2d>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	6905      	ldr	r5, [r0, #16]
 800be20:	f100 0714 	add.w	r7, r0, #20
 800be24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be28:	1f2e      	subs	r6, r5, #4
 800be2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be2e:	4620      	mov	r0, r4
 800be30:	f7ff fd48 	bl	800b8c4 <__hi0bits>
 800be34:	f1c0 0320 	rsb	r3, r0, #32
 800be38:	280a      	cmp	r0, #10
 800be3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800beb8 <__b2d+0x9c>
 800be3e:	600b      	str	r3, [r1, #0]
 800be40:	dc14      	bgt.n	800be6c <__b2d+0x50>
 800be42:	f1c0 0e0b 	rsb	lr, r0, #11
 800be46:	fa24 f10e 	lsr.w	r1, r4, lr
 800be4a:	42b7      	cmp	r7, r6
 800be4c:	ea41 030c 	orr.w	r3, r1, ip
 800be50:	bf34      	ite	cc
 800be52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be56:	2100      	movcs	r1, #0
 800be58:	3015      	adds	r0, #21
 800be5a:	fa04 f000 	lsl.w	r0, r4, r0
 800be5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800be62:	ea40 0201 	orr.w	r2, r0, r1
 800be66:	ec43 2b10 	vmov	d0, r2, r3
 800be6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be6c:	42b7      	cmp	r7, r6
 800be6e:	bf3a      	itte	cc
 800be70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be74:	f1a5 0608 	subcc.w	r6, r5, #8
 800be78:	2100      	movcs	r1, #0
 800be7a:	380b      	subs	r0, #11
 800be7c:	d017      	beq.n	800beae <__b2d+0x92>
 800be7e:	f1c0 0c20 	rsb	ip, r0, #32
 800be82:	fa04 f500 	lsl.w	r5, r4, r0
 800be86:	42be      	cmp	r6, r7
 800be88:	fa21 f40c 	lsr.w	r4, r1, ip
 800be8c:	ea45 0504 	orr.w	r5, r5, r4
 800be90:	bf8c      	ite	hi
 800be92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be96:	2400      	movls	r4, #0
 800be98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be9c:	fa01 f000 	lsl.w	r0, r1, r0
 800bea0:	fa24 f40c 	lsr.w	r4, r4, ip
 800bea4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bea8:	ea40 0204 	orr.w	r2, r0, r4
 800beac:	e7db      	b.n	800be66 <__b2d+0x4a>
 800beae:	ea44 030c 	orr.w	r3, r4, ip
 800beb2:	460a      	mov	r2, r1
 800beb4:	e7d7      	b.n	800be66 <__b2d+0x4a>
 800beb6:	bf00      	nop
 800beb8:	3ff00000 	.word	0x3ff00000

0800bebc <__d2b>:
 800bebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bec0:	4689      	mov	r9, r1
 800bec2:	2101      	movs	r1, #1
 800bec4:	ec57 6b10 	vmov	r6, r7, d0
 800bec8:	4690      	mov	r8, r2
 800beca:	f7ff fc09 	bl	800b6e0 <_Balloc>
 800bece:	4604      	mov	r4, r0
 800bed0:	b930      	cbnz	r0, 800bee0 <__d2b+0x24>
 800bed2:	4602      	mov	r2, r0
 800bed4:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <__d2b+0xb0>)
 800bed6:	4826      	ldr	r0, [pc, #152]	; (800bf70 <__d2b+0xb4>)
 800bed8:	f240 310a 	movw	r1, #778	; 0x30a
 800bedc:	f000 fb56 	bl	800c58c <__assert_func>
 800bee0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bee8:	bb35      	cbnz	r5, 800bf38 <__d2b+0x7c>
 800beea:	2e00      	cmp	r6, #0
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	d028      	beq.n	800bf42 <__d2b+0x86>
 800bef0:	4668      	mov	r0, sp
 800bef2:	9600      	str	r6, [sp, #0]
 800bef4:	f7ff fd06 	bl	800b904 <__lo0bits>
 800bef8:	9900      	ldr	r1, [sp, #0]
 800befa:	b300      	cbz	r0, 800bf3e <__d2b+0x82>
 800befc:	9a01      	ldr	r2, [sp, #4]
 800befe:	f1c0 0320 	rsb	r3, r0, #32
 800bf02:	fa02 f303 	lsl.w	r3, r2, r3
 800bf06:	430b      	orrs	r3, r1
 800bf08:	40c2      	lsrs	r2, r0
 800bf0a:	6163      	str	r3, [r4, #20]
 800bf0c:	9201      	str	r2, [sp, #4]
 800bf0e:	9b01      	ldr	r3, [sp, #4]
 800bf10:	61a3      	str	r3, [r4, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bf14      	ite	ne
 800bf16:	2202      	movne	r2, #2
 800bf18:	2201      	moveq	r2, #1
 800bf1a:	6122      	str	r2, [r4, #16]
 800bf1c:	b1d5      	cbz	r5, 800bf54 <__d2b+0x98>
 800bf1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf22:	4405      	add	r5, r0
 800bf24:	f8c9 5000 	str.w	r5, [r9]
 800bf28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf2c:	f8c8 0000 	str.w	r0, [r8]
 800bf30:	4620      	mov	r0, r4
 800bf32:	b003      	add	sp, #12
 800bf34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf3c:	e7d5      	b.n	800beea <__d2b+0x2e>
 800bf3e:	6161      	str	r1, [r4, #20]
 800bf40:	e7e5      	b.n	800bf0e <__d2b+0x52>
 800bf42:	a801      	add	r0, sp, #4
 800bf44:	f7ff fcde 	bl	800b904 <__lo0bits>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	6163      	str	r3, [r4, #20]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	6122      	str	r2, [r4, #16]
 800bf50:	3020      	adds	r0, #32
 800bf52:	e7e3      	b.n	800bf1c <__d2b+0x60>
 800bf54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf5c:	f8c9 0000 	str.w	r0, [r9]
 800bf60:	6918      	ldr	r0, [r3, #16]
 800bf62:	f7ff fcaf 	bl	800b8c4 <__hi0bits>
 800bf66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf6a:	e7df      	b.n	800bf2c <__d2b+0x70>
 800bf6c:	0800d560 	.word	0x0800d560
 800bf70:	0800d5ec 	.word	0x0800d5ec

0800bf74 <__ratio>:
 800bf74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	4688      	mov	r8, r1
 800bf7a:	4669      	mov	r1, sp
 800bf7c:	4681      	mov	r9, r0
 800bf7e:	f7ff ff4d 	bl	800be1c <__b2d>
 800bf82:	a901      	add	r1, sp, #4
 800bf84:	4640      	mov	r0, r8
 800bf86:	ec55 4b10 	vmov	r4, r5, d0
 800bf8a:	ee10 aa10 	vmov	sl, s0
 800bf8e:	f7ff ff45 	bl	800be1c <__b2d>
 800bf92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bf9a:	1a59      	subs	r1, r3, r1
 800bf9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bfa6:	ec57 6b10 	vmov	r6, r7, d0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfd6      	itet	le
 800bfae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfb2:	462a      	movgt	r2, r5
 800bfb4:	463a      	movle	r2, r7
 800bfb6:	46ab      	mov	fp, r5
 800bfb8:	bfd6      	itet	le
 800bfba:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bfbe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bfc2:	ee00 3a90 	vmovle	s1, r3
 800bfc6:	ec4b ab17 	vmov	d7, sl, fp
 800bfca:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bfce:	b003      	add	sp, #12
 800bfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfd4 <__copybits>:
 800bfd4:	3901      	subs	r1, #1
 800bfd6:	b570      	push	{r4, r5, r6, lr}
 800bfd8:	1149      	asrs	r1, r1, #5
 800bfda:	6914      	ldr	r4, [r2, #16]
 800bfdc:	3101      	adds	r1, #1
 800bfde:	f102 0314 	add.w	r3, r2, #20
 800bfe2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfe6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bfea:	1f05      	subs	r5, r0, #4
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d30c      	bcc.n	800c00a <__copybits+0x36>
 800bff0:	1aa3      	subs	r3, r4, r2
 800bff2:	3b11      	subs	r3, #17
 800bff4:	f023 0303 	bic.w	r3, r3, #3
 800bff8:	3211      	adds	r2, #17
 800bffa:	42a2      	cmp	r2, r4
 800bffc:	bf88      	it	hi
 800bffe:	2300      	movhi	r3, #0
 800c000:	4418      	add	r0, r3
 800c002:	2300      	movs	r3, #0
 800c004:	4288      	cmp	r0, r1
 800c006:	d305      	bcc.n	800c014 <__copybits+0x40>
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c00e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c012:	e7eb      	b.n	800bfec <__copybits+0x18>
 800c014:	f840 3b04 	str.w	r3, [r0], #4
 800c018:	e7f4      	b.n	800c004 <__copybits+0x30>

0800c01a <__any_on>:
 800c01a:	f100 0214 	add.w	r2, r0, #20
 800c01e:	6900      	ldr	r0, [r0, #16]
 800c020:	114b      	asrs	r3, r1, #5
 800c022:	4298      	cmp	r0, r3
 800c024:	b510      	push	{r4, lr}
 800c026:	db11      	blt.n	800c04c <__any_on+0x32>
 800c028:	dd0a      	ble.n	800c040 <__any_on+0x26>
 800c02a:	f011 011f 	ands.w	r1, r1, #31
 800c02e:	d007      	beq.n	800c040 <__any_on+0x26>
 800c030:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c034:	fa24 f001 	lsr.w	r0, r4, r1
 800c038:	fa00 f101 	lsl.w	r1, r0, r1
 800c03c:	428c      	cmp	r4, r1
 800c03e:	d10b      	bne.n	800c058 <__any_on+0x3e>
 800c040:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c044:	4293      	cmp	r3, r2
 800c046:	d803      	bhi.n	800c050 <__any_on+0x36>
 800c048:	2000      	movs	r0, #0
 800c04a:	bd10      	pop	{r4, pc}
 800c04c:	4603      	mov	r3, r0
 800c04e:	e7f7      	b.n	800c040 <__any_on+0x26>
 800c050:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c054:	2900      	cmp	r1, #0
 800c056:	d0f5      	beq.n	800c044 <__any_on+0x2a>
 800c058:	2001      	movs	r0, #1
 800c05a:	e7f6      	b.n	800c04a <__any_on+0x30>

0800c05c <_calloc_r>:
 800c05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c05e:	fba1 2402 	umull	r2, r4, r1, r2
 800c062:	b94c      	cbnz	r4, 800c078 <_calloc_r+0x1c>
 800c064:	4611      	mov	r1, r2
 800c066:	9201      	str	r2, [sp, #4]
 800c068:	f000 f87a 	bl	800c160 <_malloc_r>
 800c06c:	9a01      	ldr	r2, [sp, #4]
 800c06e:	4605      	mov	r5, r0
 800c070:	b930      	cbnz	r0, 800c080 <_calloc_r+0x24>
 800c072:	4628      	mov	r0, r5
 800c074:	b003      	add	sp, #12
 800c076:	bd30      	pop	{r4, r5, pc}
 800c078:	220c      	movs	r2, #12
 800c07a:	6002      	str	r2, [r0, #0]
 800c07c:	2500      	movs	r5, #0
 800c07e:	e7f8      	b.n	800c072 <_calloc_r+0x16>
 800c080:	4621      	mov	r1, r4
 800c082:	f7fc fc85 	bl	8008990 <memset>
 800c086:	e7f4      	b.n	800c072 <_calloc_r+0x16>

0800c088 <_free_r>:
 800c088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c08a:	2900      	cmp	r1, #0
 800c08c:	d044      	beq.n	800c118 <_free_r+0x90>
 800c08e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c092:	9001      	str	r0, [sp, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f1a1 0404 	sub.w	r4, r1, #4
 800c09a:	bfb8      	it	lt
 800c09c:	18e4      	addlt	r4, r4, r3
 800c09e:	f000 fabf 	bl	800c620 <__malloc_lock>
 800c0a2:	4a1e      	ldr	r2, [pc, #120]	; (800c11c <_free_r+0x94>)
 800c0a4:	9801      	ldr	r0, [sp, #4]
 800c0a6:	6813      	ldr	r3, [r2, #0]
 800c0a8:	b933      	cbnz	r3, 800c0b8 <_free_r+0x30>
 800c0aa:	6063      	str	r3, [r4, #4]
 800c0ac:	6014      	str	r4, [r2, #0]
 800c0ae:	b003      	add	sp, #12
 800c0b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0b4:	f000 baba 	b.w	800c62c <__malloc_unlock>
 800c0b8:	42a3      	cmp	r3, r4
 800c0ba:	d908      	bls.n	800c0ce <_free_r+0x46>
 800c0bc:	6825      	ldr	r5, [r4, #0]
 800c0be:	1961      	adds	r1, r4, r5
 800c0c0:	428b      	cmp	r3, r1
 800c0c2:	bf01      	itttt	eq
 800c0c4:	6819      	ldreq	r1, [r3, #0]
 800c0c6:	685b      	ldreq	r3, [r3, #4]
 800c0c8:	1949      	addeq	r1, r1, r5
 800c0ca:	6021      	streq	r1, [r4, #0]
 800c0cc:	e7ed      	b.n	800c0aa <_free_r+0x22>
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	b10b      	cbz	r3, 800c0d8 <_free_r+0x50>
 800c0d4:	42a3      	cmp	r3, r4
 800c0d6:	d9fa      	bls.n	800c0ce <_free_r+0x46>
 800c0d8:	6811      	ldr	r1, [r2, #0]
 800c0da:	1855      	adds	r5, r2, r1
 800c0dc:	42a5      	cmp	r5, r4
 800c0de:	d10b      	bne.n	800c0f8 <_free_r+0x70>
 800c0e0:	6824      	ldr	r4, [r4, #0]
 800c0e2:	4421      	add	r1, r4
 800c0e4:	1854      	adds	r4, r2, r1
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	6011      	str	r1, [r2, #0]
 800c0ea:	d1e0      	bne.n	800c0ae <_free_r+0x26>
 800c0ec:	681c      	ldr	r4, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	6053      	str	r3, [r2, #4]
 800c0f2:	4421      	add	r1, r4
 800c0f4:	6011      	str	r1, [r2, #0]
 800c0f6:	e7da      	b.n	800c0ae <_free_r+0x26>
 800c0f8:	d902      	bls.n	800c100 <_free_r+0x78>
 800c0fa:	230c      	movs	r3, #12
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	e7d6      	b.n	800c0ae <_free_r+0x26>
 800c100:	6825      	ldr	r5, [r4, #0]
 800c102:	1961      	adds	r1, r4, r5
 800c104:	428b      	cmp	r3, r1
 800c106:	bf04      	itt	eq
 800c108:	6819      	ldreq	r1, [r3, #0]
 800c10a:	685b      	ldreq	r3, [r3, #4]
 800c10c:	6063      	str	r3, [r4, #4]
 800c10e:	bf04      	itt	eq
 800c110:	1949      	addeq	r1, r1, r5
 800c112:	6021      	streq	r1, [r4, #0]
 800c114:	6054      	str	r4, [r2, #4]
 800c116:	e7ca      	b.n	800c0ae <_free_r+0x26>
 800c118:	b003      	add	sp, #12
 800c11a:	bd30      	pop	{r4, r5, pc}
 800c11c:	24006458 	.word	0x24006458

0800c120 <sbrk_aligned>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	4e0e      	ldr	r6, [pc, #56]	; (800c15c <sbrk_aligned+0x3c>)
 800c124:	460c      	mov	r4, r1
 800c126:	6831      	ldr	r1, [r6, #0]
 800c128:	4605      	mov	r5, r0
 800c12a:	b911      	cbnz	r1, 800c132 <sbrk_aligned+0x12>
 800c12c:	f000 f9f0 	bl	800c510 <_sbrk_r>
 800c130:	6030      	str	r0, [r6, #0]
 800c132:	4621      	mov	r1, r4
 800c134:	4628      	mov	r0, r5
 800c136:	f000 f9eb 	bl	800c510 <_sbrk_r>
 800c13a:	1c43      	adds	r3, r0, #1
 800c13c:	d00a      	beq.n	800c154 <sbrk_aligned+0x34>
 800c13e:	1cc4      	adds	r4, r0, #3
 800c140:	f024 0403 	bic.w	r4, r4, #3
 800c144:	42a0      	cmp	r0, r4
 800c146:	d007      	beq.n	800c158 <sbrk_aligned+0x38>
 800c148:	1a21      	subs	r1, r4, r0
 800c14a:	4628      	mov	r0, r5
 800c14c:	f000 f9e0 	bl	800c510 <_sbrk_r>
 800c150:	3001      	adds	r0, #1
 800c152:	d101      	bne.n	800c158 <sbrk_aligned+0x38>
 800c154:	f04f 34ff 	mov.w	r4, #4294967295
 800c158:	4620      	mov	r0, r4
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	2400645c 	.word	0x2400645c

0800c160 <_malloc_r>:
 800c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c164:	1ccd      	adds	r5, r1, #3
 800c166:	f025 0503 	bic.w	r5, r5, #3
 800c16a:	3508      	adds	r5, #8
 800c16c:	2d0c      	cmp	r5, #12
 800c16e:	bf38      	it	cc
 800c170:	250c      	movcc	r5, #12
 800c172:	2d00      	cmp	r5, #0
 800c174:	4607      	mov	r7, r0
 800c176:	db01      	blt.n	800c17c <_malloc_r+0x1c>
 800c178:	42a9      	cmp	r1, r5
 800c17a:	d905      	bls.n	800c188 <_malloc_r+0x28>
 800c17c:	230c      	movs	r3, #12
 800c17e:	603b      	str	r3, [r7, #0]
 800c180:	2600      	movs	r6, #0
 800c182:	4630      	mov	r0, r6
 800c184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c188:	4e2e      	ldr	r6, [pc, #184]	; (800c244 <_malloc_r+0xe4>)
 800c18a:	f000 fa49 	bl	800c620 <__malloc_lock>
 800c18e:	6833      	ldr	r3, [r6, #0]
 800c190:	461c      	mov	r4, r3
 800c192:	bb34      	cbnz	r4, 800c1e2 <_malloc_r+0x82>
 800c194:	4629      	mov	r1, r5
 800c196:	4638      	mov	r0, r7
 800c198:	f7ff ffc2 	bl	800c120 <sbrk_aligned>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	4604      	mov	r4, r0
 800c1a0:	d14d      	bne.n	800c23e <_malloc_r+0xde>
 800c1a2:	6834      	ldr	r4, [r6, #0]
 800c1a4:	4626      	mov	r6, r4
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	d140      	bne.n	800c22c <_malloc_r+0xcc>
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	eb04 0803 	add.w	r8, r4, r3
 800c1b4:	f000 f9ac 	bl	800c510 <_sbrk_r>
 800c1b8:	4580      	cmp	r8, r0
 800c1ba:	d13a      	bne.n	800c232 <_malloc_r+0xd2>
 800c1bc:	6821      	ldr	r1, [r4, #0]
 800c1be:	3503      	adds	r5, #3
 800c1c0:	1a6d      	subs	r5, r5, r1
 800c1c2:	f025 0503 	bic.w	r5, r5, #3
 800c1c6:	3508      	adds	r5, #8
 800c1c8:	2d0c      	cmp	r5, #12
 800c1ca:	bf38      	it	cc
 800c1cc:	250c      	movcc	r5, #12
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f7ff ffa5 	bl	800c120 <sbrk_aligned>
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d02b      	beq.n	800c232 <_malloc_r+0xd2>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	442b      	add	r3, r5
 800c1de:	6023      	str	r3, [r4, #0]
 800c1e0:	e00e      	b.n	800c200 <_malloc_r+0xa0>
 800c1e2:	6822      	ldr	r2, [r4, #0]
 800c1e4:	1b52      	subs	r2, r2, r5
 800c1e6:	d41e      	bmi.n	800c226 <_malloc_r+0xc6>
 800c1e8:	2a0b      	cmp	r2, #11
 800c1ea:	d916      	bls.n	800c21a <_malloc_r+0xba>
 800c1ec:	1961      	adds	r1, r4, r5
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	6025      	str	r5, [r4, #0]
 800c1f2:	bf18      	it	ne
 800c1f4:	6059      	strne	r1, [r3, #4]
 800c1f6:	6863      	ldr	r3, [r4, #4]
 800c1f8:	bf08      	it	eq
 800c1fa:	6031      	streq	r1, [r6, #0]
 800c1fc:	5162      	str	r2, [r4, r5]
 800c1fe:	604b      	str	r3, [r1, #4]
 800c200:	4638      	mov	r0, r7
 800c202:	f104 060b 	add.w	r6, r4, #11
 800c206:	f000 fa11 	bl	800c62c <__malloc_unlock>
 800c20a:	f026 0607 	bic.w	r6, r6, #7
 800c20e:	1d23      	adds	r3, r4, #4
 800c210:	1af2      	subs	r2, r6, r3
 800c212:	d0b6      	beq.n	800c182 <_malloc_r+0x22>
 800c214:	1b9b      	subs	r3, r3, r6
 800c216:	50a3      	str	r3, [r4, r2]
 800c218:	e7b3      	b.n	800c182 <_malloc_r+0x22>
 800c21a:	6862      	ldr	r2, [r4, #4]
 800c21c:	42a3      	cmp	r3, r4
 800c21e:	bf0c      	ite	eq
 800c220:	6032      	streq	r2, [r6, #0]
 800c222:	605a      	strne	r2, [r3, #4]
 800c224:	e7ec      	b.n	800c200 <_malloc_r+0xa0>
 800c226:	4623      	mov	r3, r4
 800c228:	6864      	ldr	r4, [r4, #4]
 800c22a:	e7b2      	b.n	800c192 <_malloc_r+0x32>
 800c22c:	4634      	mov	r4, r6
 800c22e:	6876      	ldr	r6, [r6, #4]
 800c230:	e7b9      	b.n	800c1a6 <_malloc_r+0x46>
 800c232:	230c      	movs	r3, #12
 800c234:	603b      	str	r3, [r7, #0]
 800c236:	4638      	mov	r0, r7
 800c238:	f000 f9f8 	bl	800c62c <__malloc_unlock>
 800c23c:	e7a1      	b.n	800c182 <_malloc_r+0x22>
 800c23e:	6025      	str	r5, [r4, #0]
 800c240:	e7de      	b.n	800c200 <_malloc_r+0xa0>
 800c242:	bf00      	nop
 800c244:	24006458 	.word	0x24006458

0800c248 <__ssputs_r>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	688e      	ldr	r6, [r1, #8]
 800c24e:	429e      	cmp	r6, r3
 800c250:	4682      	mov	sl, r0
 800c252:	460c      	mov	r4, r1
 800c254:	4690      	mov	r8, r2
 800c256:	461f      	mov	r7, r3
 800c258:	d838      	bhi.n	800c2cc <__ssputs_r+0x84>
 800c25a:	898a      	ldrh	r2, [r1, #12]
 800c25c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c260:	d032      	beq.n	800c2c8 <__ssputs_r+0x80>
 800c262:	6825      	ldr	r5, [r4, #0]
 800c264:	6909      	ldr	r1, [r1, #16]
 800c266:	eba5 0901 	sub.w	r9, r5, r1
 800c26a:	6965      	ldr	r5, [r4, #20]
 800c26c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c270:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c274:	3301      	adds	r3, #1
 800c276:	444b      	add	r3, r9
 800c278:	106d      	asrs	r5, r5, #1
 800c27a:	429d      	cmp	r5, r3
 800c27c:	bf38      	it	cc
 800c27e:	461d      	movcc	r5, r3
 800c280:	0553      	lsls	r3, r2, #21
 800c282:	d531      	bpl.n	800c2e8 <__ssputs_r+0xa0>
 800c284:	4629      	mov	r1, r5
 800c286:	f7ff ff6b 	bl	800c160 <_malloc_r>
 800c28a:	4606      	mov	r6, r0
 800c28c:	b950      	cbnz	r0, 800c2a4 <__ssputs_r+0x5c>
 800c28e:	230c      	movs	r3, #12
 800c290:	f8ca 3000 	str.w	r3, [sl]
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2a4:	6921      	ldr	r1, [r4, #16]
 800c2a6:	464a      	mov	r2, r9
 800c2a8:	f7fc fb64 	bl	8008974 <memcpy>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	6126      	str	r6, [r4, #16]
 800c2ba:	6165      	str	r5, [r4, #20]
 800c2bc:	444e      	add	r6, r9
 800c2be:	eba5 0509 	sub.w	r5, r5, r9
 800c2c2:	6026      	str	r6, [r4, #0]
 800c2c4:	60a5      	str	r5, [r4, #8]
 800c2c6:	463e      	mov	r6, r7
 800c2c8:	42be      	cmp	r6, r7
 800c2ca:	d900      	bls.n	800c2ce <__ssputs_r+0x86>
 800c2cc:	463e      	mov	r6, r7
 800c2ce:	6820      	ldr	r0, [r4, #0]
 800c2d0:	4632      	mov	r2, r6
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	f000 f98a 	bl	800c5ec <memmove>
 800c2d8:	68a3      	ldr	r3, [r4, #8]
 800c2da:	1b9b      	subs	r3, r3, r6
 800c2dc:	60a3      	str	r3, [r4, #8]
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	4433      	add	r3, r6
 800c2e2:	6023      	str	r3, [r4, #0]
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e7db      	b.n	800c2a0 <__ssputs_r+0x58>
 800c2e8:	462a      	mov	r2, r5
 800c2ea:	f000 f9a5 	bl	800c638 <_realloc_r>
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d1e1      	bne.n	800c2b8 <__ssputs_r+0x70>
 800c2f4:	6921      	ldr	r1, [r4, #16]
 800c2f6:	4650      	mov	r0, sl
 800c2f8:	f7ff fec6 	bl	800c088 <_free_r>
 800c2fc:	e7c7      	b.n	800c28e <__ssputs_r+0x46>
	...

0800c300 <_svfiprintf_r>:
 800c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c304:	4698      	mov	r8, r3
 800c306:	898b      	ldrh	r3, [r1, #12]
 800c308:	061b      	lsls	r3, r3, #24
 800c30a:	b09d      	sub	sp, #116	; 0x74
 800c30c:	4607      	mov	r7, r0
 800c30e:	460d      	mov	r5, r1
 800c310:	4614      	mov	r4, r2
 800c312:	d50e      	bpl.n	800c332 <_svfiprintf_r+0x32>
 800c314:	690b      	ldr	r3, [r1, #16]
 800c316:	b963      	cbnz	r3, 800c332 <_svfiprintf_r+0x32>
 800c318:	2140      	movs	r1, #64	; 0x40
 800c31a:	f7ff ff21 	bl	800c160 <_malloc_r>
 800c31e:	6028      	str	r0, [r5, #0]
 800c320:	6128      	str	r0, [r5, #16]
 800c322:	b920      	cbnz	r0, 800c32e <_svfiprintf_r+0x2e>
 800c324:	230c      	movs	r3, #12
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	f04f 30ff 	mov.w	r0, #4294967295
 800c32c:	e0d1      	b.n	800c4d2 <_svfiprintf_r+0x1d2>
 800c32e:	2340      	movs	r3, #64	; 0x40
 800c330:	616b      	str	r3, [r5, #20]
 800c332:	2300      	movs	r3, #0
 800c334:	9309      	str	r3, [sp, #36]	; 0x24
 800c336:	2320      	movs	r3, #32
 800c338:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c33c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c340:	2330      	movs	r3, #48	; 0x30
 800c342:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4ec <_svfiprintf_r+0x1ec>
 800c346:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c34a:	f04f 0901 	mov.w	r9, #1
 800c34e:	4623      	mov	r3, r4
 800c350:	469a      	mov	sl, r3
 800c352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c356:	b10a      	cbz	r2, 800c35c <_svfiprintf_r+0x5c>
 800c358:	2a25      	cmp	r2, #37	; 0x25
 800c35a:	d1f9      	bne.n	800c350 <_svfiprintf_r+0x50>
 800c35c:	ebba 0b04 	subs.w	fp, sl, r4
 800c360:	d00b      	beq.n	800c37a <_svfiprintf_r+0x7a>
 800c362:	465b      	mov	r3, fp
 800c364:	4622      	mov	r2, r4
 800c366:	4629      	mov	r1, r5
 800c368:	4638      	mov	r0, r7
 800c36a:	f7ff ff6d 	bl	800c248 <__ssputs_r>
 800c36e:	3001      	adds	r0, #1
 800c370:	f000 80aa 	beq.w	800c4c8 <_svfiprintf_r+0x1c8>
 800c374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c376:	445a      	add	r2, fp
 800c378:	9209      	str	r2, [sp, #36]	; 0x24
 800c37a:	f89a 3000 	ldrb.w	r3, [sl]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 80a2 	beq.w	800c4c8 <_svfiprintf_r+0x1c8>
 800c384:	2300      	movs	r3, #0
 800c386:	f04f 32ff 	mov.w	r2, #4294967295
 800c38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c38e:	f10a 0a01 	add.w	sl, sl, #1
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c39a:	931a      	str	r3, [sp, #104]	; 0x68
 800c39c:	4654      	mov	r4, sl
 800c39e:	2205      	movs	r2, #5
 800c3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a4:	4851      	ldr	r0, [pc, #324]	; (800c4ec <_svfiprintf_r+0x1ec>)
 800c3a6:	f7f3 ffa3 	bl	80002f0 <memchr>
 800c3aa:	9a04      	ldr	r2, [sp, #16]
 800c3ac:	b9d8      	cbnz	r0, 800c3e6 <_svfiprintf_r+0xe6>
 800c3ae:	06d0      	lsls	r0, r2, #27
 800c3b0:	bf44      	itt	mi
 800c3b2:	2320      	movmi	r3, #32
 800c3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3b8:	0711      	lsls	r1, r2, #28
 800c3ba:	bf44      	itt	mi
 800c3bc:	232b      	movmi	r3, #43	; 0x2b
 800c3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c8:	d015      	beq.n	800c3f6 <_svfiprintf_r+0xf6>
 800c3ca:	9a07      	ldr	r2, [sp, #28]
 800c3cc:	4654      	mov	r4, sl
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	f04f 0c0a 	mov.w	ip, #10
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3da:	3b30      	subs	r3, #48	; 0x30
 800c3dc:	2b09      	cmp	r3, #9
 800c3de:	d94e      	bls.n	800c47e <_svfiprintf_r+0x17e>
 800c3e0:	b1b0      	cbz	r0, 800c410 <_svfiprintf_r+0x110>
 800c3e2:	9207      	str	r2, [sp, #28]
 800c3e4:	e014      	b.n	800c410 <_svfiprintf_r+0x110>
 800c3e6:	eba0 0308 	sub.w	r3, r0, r8
 800c3ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	9304      	str	r3, [sp, #16]
 800c3f2:	46a2      	mov	sl, r4
 800c3f4:	e7d2      	b.n	800c39c <_svfiprintf_r+0x9c>
 800c3f6:	9b03      	ldr	r3, [sp, #12]
 800c3f8:	1d19      	adds	r1, r3, #4
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	9103      	str	r1, [sp, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	bfbb      	ittet	lt
 800c402:	425b      	neglt	r3, r3
 800c404:	f042 0202 	orrlt.w	r2, r2, #2
 800c408:	9307      	strge	r3, [sp, #28]
 800c40a:	9307      	strlt	r3, [sp, #28]
 800c40c:	bfb8      	it	lt
 800c40e:	9204      	strlt	r2, [sp, #16]
 800c410:	7823      	ldrb	r3, [r4, #0]
 800c412:	2b2e      	cmp	r3, #46	; 0x2e
 800c414:	d10c      	bne.n	800c430 <_svfiprintf_r+0x130>
 800c416:	7863      	ldrb	r3, [r4, #1]
 800c418:	2b2a      	cmp	r3, #42	; 0x2a
 800c41a:	d135      	bne.n	800c488 <_svfiprintf_r+0x188>
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	1d1a      	adds	r2, r3, #4
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	9203      	str	r2, [sp, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	bfb8      	it	lt
 800c428:	f04f 33ff 	movlt.w	r3, #4294967295
 800c42c:	3402      	adds	r4, #2
 800c42e:	9305      	str	r3, [sp, #20]
 800c430:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4fc <_svfiprintf_r+0x1fc>
 800c434:	7821      	ldrb	r1, [r4, #0]
 800c436:	2203      	movs	r2, #3
 800c438:	4650      	mov	r0, sl
 800c43a:	f7f3 ff59 	bl	80002f0 <memchr>
 800c43e:	b140      	cbz	r0, 800c452 <_svfiprintf_r+0x152>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	eba0 000a 	sub.w	r0, r0, sl
 800c446:	fa03 f000 	lsl.w	r0, r3, r0
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	4303      	orrs	r3, r0
 800c44e:	3401      	adds	r4, #1
 800c450:	9304      	str	r3, [sp, #16]
 800c452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c456:	4826      	ldr	r0, [pc, #152]	; (800c4f0 <_svfiprintf_r+0x1f0>)
 800c458:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c45c:	2206      	movs	r2, #6
 800c45e:	f7f3 ff47 	bl	80002f0 <memchr>
 800c462:	2800      	cmp	r0, #0
 800c464:	d038      	beq.n	800c4d8 <_svfiprintf_r+0x1d8>
 800c466:	4b23      	ldr	r3, [pc, #140]	; (800c4f4 <_svfiprintf_r+0x1f4>)
 800c468:	bb1b      	cbnz	r3, 800c4b2 <_svfiprintf_r+0x1b2>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	3307      	adds	r3, #7
 800c46e:	f023 0307 	bic.w	r3, r3, #7
 800c472:	3308      	adds	r3, #8
 800c474:	9303      	str	r3, [sp, #12]
 800c476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c478:	4433      	add	r3, r6
 800c47a:	9309      	str	r3, [sp, #36]	; 0x24
 800c47c:	e767      	b.n	800c34e <_svfiprintf_r+0x4e>
 800c47e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c482:	460c      	mov	r4, r1
 800c484:	2001      	movs	r0, #1
 800c486:	e7a5      	b.n	800c3d4 <_svfiprintf_r+0xd4>
 800c488:	2300      	movs	r3, #0
 800c48a:	3401      	adds	r4, #1
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	4619      	mov	r1, r3
 800c490:	f04f 0c0a 	mov.w	ip, #10
 800c494:	4620      	mov	r0, r4
 800c496:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c49a:	3a30      	subs	r2, #48	; 0x30
 800c49c:	2a09      	cmp	r2, #9
 800c49e:	d903      	bls.n	800c4a8 <_svfiprintf_r+0x1a8>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0c5      	beq.n	800c430 <_svfiprintf_r+0x130>
 800c4a4:	9105      	str	r1, [sp, #20]
 800c4a6:	e7c3      	b.n	800c430 <_svfiprintf_r+0x130>
 800c4a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e7f0      	b.n	800c494 <_svfiprintf_r+0x194>
 800c4b2:	ab03      	add	r3, sp, #12
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	4b0f      	ldr	r3, [pc, #60]	; (800c4f8 <_svfiprintf_r+0x1f8>)
 800c4ba:	a904      	add	r1, sp, #16
 800c4bc:	4638      	mov	r0, r7
 800c4be:	f7fc faff 	bl	8008ac0 <_printf_float>
 800c4c2:	1c42      	adds	r2, r0, #1
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	d1d6      	bne.n	800c476 <_svfiprintf_r+0x176>
 800c4c8:	89ab      	ldrh	r3, [r5, #12]
 800c4ca:	065b      	lsls	r3, r3, #25
 800c4cc:	f53f af2c 	bmi.w	800c328 <_svfiprintf_r+0x28>
 800c4d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4d2:	b01d      	add	sp, #116	; 0x74
 800c4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d8:	ab03      	add	r3, sp, #12
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	462a      	mov	r2, r5
 800c4de:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <_svfiprintf_r+0x1f8>)
 800c4e0:	a904      	add	r1, sp, #16
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7fc fd78 	bl	8008fd8 <_printf_i>
 800c4e8:	e7eb      	b.n	800c4c2 <_svfiprintf_r+0x1c2>
 800c4ea:	bf00      	nop
 800c4ec:	0800d744 	.word	0x0800d744
 800c4f0:	0800d74e 	.word	0x0800d74e
 800c4f4:	08008ac1 	.word	0x08008ac1
 800c4f8:	0800c249 	.word	0x0800c249
 800c4fc:	0800d74a 	.word	0x0800d74a

0800c500 <nan>:
 800c500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c508 <nan+0x8>
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	00000000 	.word	0x00000000
 800c50c:	7ff80000 	.word	0x7ff80000

0800c510 <_sbrk_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	; (800c52c <_sbrk_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f5 fa4a 	bl	80019b4 <_sbrk>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_sbrk_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_sbrk_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	24006460 	.word	0x24006460

0800c530 <strchr>:
 800c530:	b2c9      	uxtb	r1, r1
 800c532:	4603      	mov	r3, r0
 800c534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c538:	b11a      	cbz	r2, 800c542 <strchr+0x12>
 800c53a:	428a      	cmp	r2, r1
 800c53c:	d1f9      	bne.n	800c532 <strchr+0x2>
 800c53e:	4618      	mov	r0, r3
 800c540:	4770      	bx	lr
 800c542:	2900      	cmp	r1, #0
 800c544:	bf18      	it	ne
 800c546:	2300      	movne	r3, #0
 800c548:	e7f9      	b.n	800c53e <strchr+0xe>

0800c54a <strncmp>:
 800c54a:	b510      	push	{r4, lr}
 800c54c:	b17a      	cbz	r2, 800c56e <strncmp+0x24>
 800c54e:	4603      	mov	r3, r0
 800c550:	3901      	subs	r1, #1
 800c552:	1884      	adds	r4, r0, r2
 800c554:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c558:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c55c:	4290      	cmp	r0, r2
 800c55e:	d101      	bne.n	800c564 <strncmp+0x1a>
 800c560:	42a3      	cmp	r3, r4
 800c562:	d101      	bne.n	800c568 <strncmp+0x1e>
 800c564:	1a80      	subs	r0, r0, r2
 800c566:	bd10      	pop	{r4, pc}
 800c568:	2800      	cmp	r0, #0
 800c56a:	d1f3      	bne.n	800c554 <strncmp+0xa>
 800c56c:	e7fa      	b.n	800c564 <strncmp+0x1a>
 800c56e:	4610      	mov	r0, r2
 800c570:	e7f9      	b.n	800c566 <strncmp+0x1c>

0800c572 <__ascii_wctomb>:
 800c572:	b149      	cbz	r1, 800c588 <__ascii_wctomb+0x16>
 800c574:	2aff      	cmp	r2, #255	; 0xff
 800c576:	bf85      	ittet	hi
 800c578:	238a      	movhi	r3, #138	; 0x8a
 800c57a:	6003      	strhi	r3, [r0, #0]
 800c57c:	700a      	strbls	r2, [r1, #0]
 800c57e:	f04f 30ff 	movhi.w	r0, #4294967295
 800c582:	bf98      	it	ls
 800c584:	2001      	movls	r0, #1
 800c586:	4770      	bx	lr
 800c588:	4608      	mov	r0, r1
 800c58a:	4770      	bx	lr

0800c58c <__assert_func>:
 800c58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c58e:	4614      	mov	r4, r2
 800c590:	461a      	mov	r2, r3
 800c592:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <__assert_func+0x2c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4605      	mov	r5, r0
 800c598:	68d8      	ldr	r0, [r3, #12]
 800c59a:	b14c      	cbz	r4, 800c5b0 <__assert_func+0x24>
 800c59c:	4b07      	ldr	r3, [pc, #28]	; (800c5bc <__assert_func+0x30>)
 800c59e:	9100      	str	r1, [sp, #0]
 800c5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a4:	4906      	ldr	r1, [pc, #24]	; (800c5c0 <__assert_func+0x34>)
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	f000 f80e 	bl	800c5c8 <fiprintf>
 800c5ac:	f000 fa8c 	bl	800cac8 <abort>
 800c5b0:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <__assert_func+0x38>)
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	e7f3      	b.n	800c59e <__assert_func+0x12>
 800c5b6:	bf00      	nop
 800c5b8:	24000010 	.word	0x24000010
 800c5bc:	0800d755 	.word	0x0800d755
 800c5c0:	0800d762 	.word	0x0800d762
 800c5c4:	0800d790 	.word	0x0800d790

0800c5c8 <fiprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b503      	push	{r0, r1, lr}
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	4805      	ldr	r0, [pc, #20]	; (800c5e8 <fiprintf+0x20>)
 800c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	f000 f885 	bl	800c6e8 <_vfiprintf_r>
 800c5de:	b002      	add	sp, #8
 800c5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e4:	b003      	add	sp, #12
 800c5e6:	4770      	bx	lr
 800c5e8:	24000010 	.word	0x24000010

0800c5ec <memmove>:
 800c5ec:	4288      	cmp	r0, r1
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	eb01 0402 	add.w	r4, r1, r2
 800c5f4:	d902      	bls.n	800c5fc <memmove+0x10>
 800c5f6:	4284      	cmp	r4, r0
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	d807      	bhi.n	800c60c <memmove+0x20>
 800c5fc:	1e43      	subs	r3, r0, #1
 800c5fe:	42a1      	cmp	r1, r4
 800c600:	d008      	beq.n	800c614 <memmove+0x28>
 800c602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c60a:	e7f8      	b.n	800c5fe <memmove+0x12>
 800c60c:	4402      	add	r2, r0
 800c60e:	4601      	mov	r1, r0
 800c610:	428a      	cmp	r2, r1
 800c612:	d100      	bne.n	800c616 <memmove+0x2a>
 800c614:	bd10      	pop	{r4, pc}
 800c616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c61a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c61e:	e7f7      	b.n	800c610 <memmove+0x24>

0800c620 <__malloc_lock>:
 800c620:	4801      	ldr	r0, [pc, #4]	; (800c628 <__malloc_lock+0x8>)
 800c622:	f000 bc11 	b.w	800ce48 <__retarget_lock_acquire_recursive>
 800c626:	bf00      	nop
 800c628:	24006464 	.word	0x24006464

0800c62c <__malloc_unlock>:
 800c62c:	4801      	ldr	r0, [pc, #4]	; (800c634 <__malloc_unlock+0x8>)
 800c62e:	f000 bc0c 	b.w	800ce4a <__retarget_lock_release_recursive>
 800c632:	bf00      	nop
 800c634:	24006464 	.word	0x24006464

0800c638 <_realloc_r>:
 800c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63c:	4680      	mov	r8, r0
 800c63e:	4614      	mov	r4, r2
 800c640:	460e      	mov	r6, r1
 800c642:	b921      	cbnz	r1, 800c64e <_realloc_r+0x16>
 800c644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	4611      	mov	r1, r2
 800c64a:	f7ff bd89 	b.w	800c160 <_malloc_r>
 800c64e:	b92a      	cbnz	r2, 800c65c <_realloc_r+0x24>
 800c650:	f7ff fd1a 	bl	800c088 <_free_r>
 800c654:	4625      	mov	r5, r4
 800c656:	4628      	mov	r0, r5
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65c:	f000 fc5c 	bl	800cf18 <_malloc_usable_size_r>
 800c660:	4284      	cmp	r4, r0
 800c662:	4607      	mov	r7, r0
 800c664:	d802      	bhi.n	800c66c <_realloc_r+0x34>
 800c666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c66a:	d812      	bhi.n	800c692 <_realloc_r+0x5a>
 800c66c:	4621      	mov	r1, r4
 800c66e:	4640      	mov	r0, r8
 800c670:	f7ff fd76 	bl	800c160 <_malloc_r>
 800c674:	4605      	mov	r5, r0
 800c676:	2800      	cmp	r0, #0
 800c678:	d0ed      	beq.n	800c656 <_realloc_r+0x1e>
 800c67a:	42bc      	cmp	r4, r7
 800c67c:	4622      	mov	r2, r4
 800c67e:	4631      	mov	r1, r6
 800c680:	bf28      	it	cs
 800c682:	463a      	movcs	r2, r7
 800c684:	f7fc f976 	bl	8008974 <memcpy>
 800c688:	4631      	mov	r1, r6
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7ff fcfc 	bl	800c088 <_free_r>
 800c690:	e7e1      	b.n	800c656 <_realloc_r+0x1e>
 800c692:	4635      	mov	r5, r6
 800c694:	e7df      	b.n	800c656 <_realloc_r+0x1e>

0800c696 <__sfputc_r>:
 800c696:	6893      	ldr	r3, [r2, #8]
 800c698:	3b01      	subs	r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	b410      	push	{r4}
 800c69e:	6093      	str	r3, [r2, #8]
 800c6a0:	da08      	bge.n	800c6b4 <__sfputc_r+0x1e>
 800c6a2:	6994      	ldr	r4, [r2, #24]
 800c6a4:	42a3      	cmp	r3, r4
 800c6a6:	db01      	blt.n	800c6ac <__sfputc_r+0x16>
 800c6a8:	290a      	cmp	r1, #10
 800c6aa:	d103      	bne.n	800c6b4 <__sfputc_r+0x1e>
 800c6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b0:	f000 b94a 	b.w	800c948 <__swbuf_r>
 800c6b4:	6813      	ldr	r3, [r2, #0]
 800c6b6:	1c58      	adds	r0, r3, #1
 800c6b8:	6010      	str	r0, [r2, #0]
 800c6ba:	7019      	strb	r1, [r3, #0]
 800c6bc:	4608      	mov	r0, r1
 800c6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <__sfputs_r>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	460f      	mov	r7, r1
 800c6ca:	4614      	mov	r4, r2
 800c6cc:	18d5      	adds	r5, r2, r3
 800c6ce:	42ac      	cmp	r4, r5
 800c6d0:	d101      	bne.n	800c6d6 <__sfputs_r+0x12>
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	e007      	b.n	800c6e6 <__sfputs_r+0x22>
 800c6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6da:	463a      	mov	r2, r7
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff ffda 	bl	800c696 <__sfputc_r>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	d1f3      	bne.n	800c6ce <__sfputs_r+0xa>
 800c6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6e8 <_vfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	b09d      	sub	sp, #116	; 0x74
 800c6f0:	4614      	mov	r4, r2
 800c6f2:	4698      	mov	r8, r3
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	b118      	cbz	r0, 800c700 <_vfiprintf_r+0x18>
 800c6f8:	6983      	ldr	r3, [r0, #24]
 800c6fa:	b90b      	cbnz	r3, 800c700 <_vfiprintf_r+0x18>
 800c6fc:	f000 fb06 	bl	800cd0c <__sinit>
 800c700:	4b89      	ldr	r3, [pc, #548]	; (800c928 <_vfiprintf_r+0x240>)
 800c702:	429d      	cmp	r5, r3
 800c704:	d11b      	bne.n	800c73e <_vfiprintf_r+0x56>
 800c706:	6875      	ldr	r5, [r6, #4]
 800c708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70a:	07d9      	lsls	r1, r3, #31
 800c70c:	d405      	bmi.n	800c71a <_vfiprintf_r+0x32>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	059a      	lsls	r2, r3, #22
 800c712:	d402      	bmi.n	800c71a <_vfiprintf_r+0x32>
 800c714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c716:	f000 fb97 	bl	800ce48 <__retarget_lock_acquire_recursive>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	071b      	lsls	r3, r3, #28
 800c71e:	d501      	bpl.n	800c724 <_vfiprintf_r+0x3c>
 800c720:	692b      	ldr	r3, [r5, #16]
 800c722:	b9eb      	cbnz	r3, 800c760 <_vfiprintf_r+0x78>
 800c724:	4629      	mov	r1, r5
 800c726:	4630      	mov	r0, r6
 800c728:	f000 f960 	bl	800c9ec <__swsetup_r>
 800c72c:	b1c0      	cbz	r0, 800c760 <_vfiprintf_r+0x78>
 800c72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c730:	07dc      	lsls	r4, r3, #31
 800c732:	d50e      	bpl.n	800c752 <_vfiprintf_r+0x6a>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	b01d      	add	sp, #116	; 0x74
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <_vfiprintf_r+0x244>)
 800c740:	429d      	cmp	r5, r3
 800c742:	d101      	bne.n	800c748 <_vfiprintf_r+0x60>
 800c744:	68b5      	ldr	r5, [r6, #8]
 800c746:	e7df      	b.n	800c708 <_vfiprintf_r+0x20>
 800c748:	4b79      	ldr	r3, [pc, #484]	; (800c930 <_vfiprintf_r+0x248>)
 800c74a:	429d      	cmp	r5, r3
 800c74c:	bf08      	it	eq
 800c74e:	68f5      	ldreq	r5, [r6, #12]
 800c750:	e7da      	b.n	800c708 <_vfiprintf_r+0x20>
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	0598      	lsls	r0, r3, #22
 800c756:	d4ed      	bmi.n	800c734 <_vfiprintf_r+0x4c>
 800c758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75a:	f000 fb76 	bl	800ce4a <__retarget_lock_release_recursive>
 800c75e:	e7e9      	b.n	800c734 <_vfiprintf_r+0x4c>
 800c760:	2300      	movs	r3, #0
 800c762:	9309      	str	r3, [sp, #36]	; 0x24
 800c764:	2320      	movs	r3, #32
 800c766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c76e:	2330      	movs	r3, #48	; 0x30
 800c770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c934 <_vfiprintf_r+0x24c>
 800c774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c778:	f04f 0901 	mov.w	r9, #1
 800c77c:	4623      	mov	r3, r4
 800c77e:	469a      	mov	sl, r3
 800c780:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c784:	b10a      	cbz	r2, 800c78a <_vfiprintf_r+0xa2>
 800c786:	2a25      	cmp	r2, #37	; 0x25
 800c788:	d1f9      	bne.n	800c77e <_vfiprintf_r+0x96>
 800c78a:	ebba 0b04 	subs.w	fp, sl, r4
 800c78e:	d00b      	beq.n	800c7a8 <_vfiprintf_r+0xc0>
 800c790:	465b      	mov	r3, fp
 800c792:	4622      	mov	r2, r4
 800c794:	4629      	mov	r1, r5
 800c796:	4630      	mov	r0, r6
 800c798:	f7ff ff94 	bl	800c6c4 <__sfputs_r>
 800c79c:	3001      	adds	r0, #1
 800c79e:	f000 80aa 	beq.w	800c8f6 <_vfiprintf_r+0x20e>
 800c7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a4:	445a      	add	r2, fp
 800c7a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 80a2 	beq.w	800c8f6 <_vfiprintf_r+0x20e>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7bc:	f10a 0a01 	add.w	sl, sl, #1
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	9307      	str	r3, [sp, #28]
 800c7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ca:	4654      	mov	r4, sl
 800c7cc:	2205      	movs	r2, #5
 800c7ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d2:	4858      	ldr	r0, [pc, #352]	; (800c934 <_vfiprintf_r+0x24c>)
 800c7d4:	f7f3 fd8c 	bl	80002f0 <memchr>
 800c7d8:	9a04      	ldr	r2, [sp, #16]
 800c7da:	b9d8      	cbnz	r0, 800c814 <_vfiprintf_r+0x12c>
 800c7dc:	06d1      	lsls	r1, r2, #27
 800c7de:	bf44      	itt	mi
 800c7e0:	2320      	movmi	r3, #32
 800c7e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e6:	0713      	lsls	r3, r2, #28
 800c7e8:	bf44      	itt	mi
 800c7ea:	232b      	movmi	r3, #43	; 0x2b
 800c7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f6:	d015      	beq.n	800c824 <_vfiprintf_r+0x13c>
 800c7f8:	9a07      	ldr	r2, [sp, #28]
 800c7fa:	4654      	mov	r4, sl
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f04f 0c0a 	mov.w	ip, #10
 800c802:	4621      	mov	r1, r4
 800c804:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c808:	3b30      	subs	r3, #48	; 0x30
 800c80a:	2b09      	cmp	r3, #9
 800c80c:	d94e      	bls.n	800c8ac <_vfiprintf_r+0x1c4>
 800c80e:	b1b0      	cbz	r0, 800c83e <_vfiprintf_r+0x156>
 800c810:	9207      	str	r2, [sp, #28]
 800c812:	e014      	b.n	800c83e <_vfiprintf_r+0x156>
 800c814:	eba0 0308 	sub.w	r3, r0, r8
 800c818:	fa09 f303 	lsl.w	r3, r9, r3
 800c81c:	4313      	orrs	r3, r2
 800c81e:	9304      	str	r3, [sp, #16]
 800c820:	46a2      	mov	sl, r4
 800c822:	e7d2      	b.n	800c7ca <_vfiprintf_r+0xe2>
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	1d19      	adds	r1, r3, #4
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	9103      	str	r1, [sp, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfbb      	ittet	lt
 800c830:	425b      	neglt	r3, r3
 800c832:	f042 0202 	orrlt.w	r2, r2, #2
 800c836:	9307      	strge	r3, [sp, #28]
 800c838:	9307      	strlt	r3, [sp, #28]
 800c83a:	bfb8      	it	lt
 800c83c:	9204      	strlt	r2, [sp, #16]
 800c83e:	7823      	ldrb	r3, [r4, #0]
 800c840:	2b2e      	cmp	r3, #46	; 0x2e
 800c842:	d10c      	bne.n	800c85e <_vfiprintf_r+0x176>
 800c844:	7863      	ldrb	r3, [r4, #1]
 800c846:	2b2a      	cmp	r3, #42	; 0x2a
 800c848:	d135      	bne.n	800c8b6 <_vfiprintf_r+0x1ce>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	1d1a      	adds	r2, r3, #4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	9203      	str	r2, [sp, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfb8      	it	lt
 800c856:	f04f 33ff 	movlt.w	r3, #4294967295
 800c85a:	3402      	adds	r4, #2
 800c85c:	9305      	str	r3, [sp, #20]
 800c85e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c944 <_vfiprintf_r+0x25c>
 800c862:	7821      	ldrb	r1, [r4, #0]
 800c864:	2203      	movs	r2, #3
 800c866:	4650      	mov	r0, sl
 800c868:	f7f3 fd42 	bl	80002f0 <memchr>
 800c86c:	b140      	cbz	r0, 800c880 <_vfiprintf_r+0x198>
 800c86e:	2340      	movs	r3, #64	; 0x40
 800c870:	eba0 000a 	sub.w	r0, r0, sl
 800c874:	fa03 f000 	lsl.w	r0, r3, r0
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	4303      	orrs	r3, r0
 800c87c:	3401      	adds	r4, #1
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	482c      	ldr	r0, [pc, #176]	; (800c938 <_vfiprintf_r+0x250>)
 800c886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88a:	2206      	movs	r2, #6
 800c88c:	f7f3 fd30 	bl	80002f0 <memchr>
 800c890:	2800      	cmp	r0, #0
 800c892:	d03f      	beq.n	800c914 <_vfiprintf_r+0x22c>
 800c894:	4b29      	ldr	r3, [pc, #164]	; (800c93c <_vfiprintf_r+0x254>)
 800c896:	bb1b      	cbnz	r3, 800c8e0 <_vfiprintf_r+0x1f8>
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	3307      	adds	r3, #7
 800c89c:	f023 0307 	bic.w	r3, r3, #7
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a6:	443b      	add	r3, r7
 800c8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8aa:	e767      	b.n	800c77c <_vfiprintf_r+0x94>
 800c8ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	e7a5      	b.n	800c802 <_vfiprintf_r+0x11a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	3401      	adds	r4, #1
 800c8ba:	9305      	str	r3, [sp, #20]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	f04f 0c0a 	mov.w	ip, #10
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c8:	3a30      	subs	r2, #48	; 0x30
 800c8ca:	2a09      	cmp	r2, #9
 800c8cc:	d903      	bls.n	800c8d6 <_vfiprintf_r+0x1ee>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c5      	beq.n	800c85e <_vfiprintf_r+0x176>
 800c8d2:	9105      	str	r1, [sp, #20]
 800c8d4:	e7c3      	b.n	800c85e <_vfiprintf_r+0x176>
 800c8d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8da:	4604      	mov	r4, r0
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e7f0      	b.n	800c8c2 <_vfiprintf_r+0x1da>
 800c8e0:	ab03      	add	r3, sp, #12
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	4b16      	ldr	r3, [pc, #88]	; (800c940 <_vfiprintf_r+0x258>)
 800c8e8:	a904      	add	r1, sp, #16
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7fc f8e8 	bl	8008ac0 <_printf_float>
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	1c78      	adds	r0, r7, #1
 800c8f4:	d1d6      	bne.n	800c8a4 <_vfiprintf_r+0x1bc>
 800c8f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f8:	07d9      	lsls	r1, r3, #31
 800c8fa:	d405      	bmi.n	800c908 <_vfiprintf_r+0x220>
 800c8fc:	89ab      	ldrh	r3, [r5, #12]
 800c8fe:	059a      	lsls	r2, r3, #22
 800c900:	d402      	bmi.n	800c908 <_vfiprintf_r+0x220>
 800c902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c904:	f000 faa1 	bl	800ce4a <__retarget_lock_release_recursive>
 800c908:	89ab      	ldrh	r3, [r5, #12]
 800c90a:	065b      	lsls	r3, r3, #25
 800c90c:	f53f af12 	bmi.w	800c734 <_vfiprintf_r+0x4c>
 800c910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c912:	e711      	b.n	800c738 <_vfiprintf_r+0x50>
 800c914:	ab03      	add	r3, sp, #12
 800c916:	9300      	str	r3, [sp, #0]
 800c918:	462a      	mov	r2, r5
 800c91a:	4b09      	ldr	r3, [pc, #36]	; (800c940 <_vfiprintf_r+0x258>)
 800c91c:	a904      	add	r1, sp, #16
 800c91e:	4630      	mov	r0, r6
 800c920:	f7fc fb5a 	bl	8008fd8 <_printf_i>
 800c924:	e7e4      	b.n	800c8f0 <_vfiprintf_r+0x208>
 800c926:	bf00      	nop
 800c928:	0800d7b4 	.word	0x0800d7b4
 800c92c:	0800d7d4 	.word	0x0800d7d4
 800c930:	0800d794 	.word	0x0800d794
 800c934:	0800d744 	.word	0x0800d744
 800c938:	0800d74e 	.word	0x0800d74e
 800c93c:	08008ac1 	.word	0x08008ac1
 800c940:	0800c6c5 	.word	0x0800c6c5
 800c944:	0800d74a 	.word	0x0800d74a

0800c948 <__swbuf_r>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	4614      	mov	r4, r2
 800c94e:	4605      	mov	r5, r0
 800c950:	b118      	cbz	r0, 800c95a <__swbuf_r+0x12>
 800c952:	6983      	ldr	r3, [r0, #24]
 800c954:	b90b      	cbnz	r3, 800c95a <__swbuf_r+0x12>
 800c956:	f000 f9d9 	bl	800cd0c <__sinit>
 800c95a:	4b21      	ldr	r3, [pc, #132]	; (800c9e0 <__swbuf_r+0x98>)
 800c95c:	429c      	cmp	r4, r3
 800c95e:	d12b      	bne.n	800c9b8 <__swbuf_r+0x70>
 800c960:	686c      	ldr	r4, [r5, #4]
 800c962:	69a3      	ldr	r3, [r4, #24]
 800c964:	60a3      	str	r3, [r4, #8]
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	071a      	lsls	r2, r3, #28
 800c96a:	d52f      	bpl.n	800c9cc <__swbuf_r+0x84>
 800c96c:	6923      	ldr	r3, [r4, #16]
 800c96e:	b36b      	cbz	r3, 800c9cc <__swbuf_r+0x84>
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	6820      	ldr	r0, [r4, #0]
 800c974:	1ac0      	subs	r0, r0, r3
 800c976:	6963      	ldr	r3, [r4, #20]
 800c978:	b2f6      	uxtb	r6, r6
 800c97a:	4283      	cmp	r3, r0
 800c97c:	4637      	mov	r7, r6
 800c97e:	dc04      	bgt.n	800c98a <__swbuf_r+0x42>
 800c980:	4621      	mov	r1, r4
 800c982:	4628      	mov	r0, r5
 800c984:	f000 f92e 	bl	800cbe4 <_fflush_r>
 800c988:	bb30      	cbnz	r0, 800c9d8 <__swbuf_r+0x90>
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	6022      	str	r2, [r4, #0]
 800c996:	701e      	strb	r6, [r3, #0]
 800c998:	6963      	ldr	r3, [r4, #20]
 800c99a:	3001      	adds	r0, #1
 800c99c:	4283      	cmp	r3, r0
 800c99e:	d004      	beq.n	800c9aa <__swbuf_r+0x62>
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	07db      	lsls	r3, r3, #31
 800c9a4:	d506      	bpl.n	800c9b4 <__swbuf_r+0x6c>
 800c9a6:	2e0a      	cmp	r6, #10
 800c9a8:	d104      	bne.n	800c9b4 <__swbuf_r+0x6c>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f919 	bl	800cbe4 <_fflush_r>
 800c9b2:	b988      	cbnz	r0, 800c9d8 <__swbuf_r+0x90>
 800c9b4:	4638      	mov	r0, r7
 800c9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b8:	4b0a      	ldr	r3, [pc, #40]	; (800c9e4 <__swbuf_r+0x9c>)
 800c9ba:	429c      	cmp	r4, r3
 800c9bc:	d101      	bne.n	800c9c2 <__swbuf_r+0x7a>
 800c9be:	68ac      	ldr	r4, [r5, #8]
 800c9c0:	e7cf      	b.n	800c962 <__swbuf_r+0x1a>
 800c9c2:	4b09      	ldr	r3, [pc, #36]	; (800c9e8 <__swbuf_r+0xa0>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	bf08      	it	eq
 800c9c8:	68ec      	ldreq	r4, [r5, #12]
 800c9ca:	e7ca      	b.n	800c962 <__swbuf_r+0x1a>
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f000 f80c 	bl	800c9ec <__swsetup_r>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d0cb      	beq.n	800c970 <__swbuf_r+0x28>
 800c9d8:	f04f 37ff 	mov.w	r7, #4294967295
 800c9dc:	e7ea      	b.n	800c9b4 <__swbuf_r+0x6c>
 800c9de:	bf00      	nop
 800c9e0:	0800d7b4 	.word	0x0800d7b4
 800c9e4:	0800d7d4 	.word	0x0800d7d4
 800c9e8:	0800d794 	.word	0x0800d794

0800c9ec <__swsetup_r>:
 800c9ec:	4b32      	ldr	r3, [pc, #200]	; (800cab8 <__swsetup_r+0xcc>)
 800c9ee:	b570      	push	{r4, r5, r6, lr}
 800c9f0:	681d      	ldr	r5, [r3, #0]
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	b125      	cbz	r5, 800ca02 <__swsetup_r+0x16>
 800c9f8:	69ab      	ldr	r3, [r5, #24]
 800c9fa:	b913      	cbnz	r3, 800ca02 <__swsetup_r+0x16>
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f000 f985 	bl	800cd0c <__sinit>
 800ca02:	4b2e      	ldr	r3, [pc, #184]	; (800cabc <__swsetup_r+0xd0>)
 800ca04:	429c      	cmp	r4, r3
 800ca06:	d10f      	bne.n	800ca28 <__swsetup_r+0x3c>
 800ca08:	686c      	ldr	r4, [r5, #4]
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca10:	0719      	lsls	r1, r3, #28
 800ca12:	d42c      	bmi.n	800ca6e <__swsetup_r+0x82>
 800ca14:	06dd      	lsls	r5, r3, #27
 800ca16:	d411      	bmi.n	800ca3c <__swsetup_r+0x50>
 800ca18:	2309      	movs	r3, #9
 800ca1a:	6033      	str	r3, [r6, #0]
 800ca1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca20:	81a3      	strh	r3, [r4, #12]
 800ca22:	f04f 30ff 	mov.w	r0, #4294967295
 800ca26:	e03e      	b.n	800caa6 <__swsetup_r+0xba>
 800ca28:	4b25      	ldr	r3, [pc, #148]	; (800cac0 <__swsetup_r+0xd4>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d101      	bne.n	800ca32 <__swsetup_r+0x46>
 800ca2e:	68ac      	ldr	r4, [r5, #8]
 800ca30:	e7eb      	b.n	800ca0a <__swsetup_r+0x1e>
 800ca32:	4b24      	ldr	r3, [pc, #144]	; (800cac4 <__swsetup_r+0xd8>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	bf08      	it	eq
 800ca38:	68ec      	ldreq	r4, [r5, #12]
 800ca3a:	e7e6      	b.n	800ca0a <__swsetup_r+0x1e>
 800ca3c:	0758      	lsls	r0, r3, #29
 800ca3e:	d512      	bpl.n	800ca66 <__swsetup_r+0x7a>
 800ca40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca42:	b141      	cbz	r1, 800ca56 <__swsetup_r+0x6a>
 800ca44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca48:	4299      	cmp	r1, r3
 800ca4a:	d002      	beq.n	800ca52 <__swsetup_r+0x66>
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f7ff fb1b 	bl	800c088 <_free_r>
 800ca52:	2300      	movs	r3, #0
 800ca54:	6363      	str	r3, [r4, #52]	; 0x34
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6063      	str	r3, [r4, #4]
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	6023      	str	r3, [r4, #0]
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	f043 0308 	orr.w	r3, r3, #8
 800ca6c:	81a3      	strh	r3, [r4, #12]
 800ca6e:	6923      	ldr	r3, [r4, #16]
 800ca70:	b94b      	cbnz	r3, 800ca86 <__swsetup_r+0x9a>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca7c:	d003      	beq.n	800ca86 <__swsetup_r+0x9a>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4630      	mov	r0, r6
 800ca82:	f000 fa09 	bl	800ce98 <__smakebuf_r>
 800ca86:	89a0      	ldrh	r0, [r4, #12]
 800ca88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca8c:	f010 0301 	ands.w	r3, r0, #1
 800ca90:	d00a      	beq.n	800caa8 <__swsetup_r+0xbc>
 800ca92:	2300      	movs	r3, #0
 800ca94:	60a3      	str	r3, [r4, #8]
 800ca96:	6963      	ldr	r3, [r4, #20]
 800ca98:	425b      	negs	r3, r3
 800ca9a:	61a3      	str	r3, [r4, #24]
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	b943      	cbnz	r3, 800cab2 <__swsetup_r+0xc6>
 800caa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800caa4:	d1ba      	bne.n	800ca1c <__swsetup_r+0x30>
 800caa6:	bd70      	pop	{r4, r5, r6, pc}
 800caa8:	0781      	lsls	r1, r0, #30
 800caaa:	bf58      	it	pl
 800caac:	6963      	ldrpl	r3, [r4, #20]
 800caae:	60a3      	str	r3, [r4, #8]
 800cab0:	e7f4      	b.n	800ca9c <__swsetup_r+0xb0>
 800cab2:	2000      	movs	r0, #0
 800cab4:	e7f7      	b.n	800caa6 <__swsetup_r+0xba>
 800cab6:	bf00      	nop
 800cab8:	24000010 	.word	0x24000010
 800cabc:	0800d7b4 	.word	0x0800d7b4
 800cac0:	0800d7d4 	.word	0x0800d7d4
 800cac4:	0800d794 	.word	0x0800d794

0800cac8 <abort>:
 800cac8:	b508      	push	{r3, lr}
 800caca:	2006      	movs	r0, #6
 800cacc:	f000 fa54 	bl	800cf78 <raise>
 800cad0:	2001      	movs	r0, #1
 800cad2:	f7f4 fef7 	bl	80018c4 <_exit>
	...

0800cad8 <__sflush_r>:
 800cad8:	898a      	ldrh	r2, [r1, #12]
 800cada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cade:	4605      	mov	r5, r0
 800cae0:	0710      	lsls	r0, r2, #28
 800cae2:	460c      	mov	r4, r1
 800cae4:	d458      	bmi.n	800cb98 <__sflush_r+0xc0>
 800cae6:	684b      	ldr	r3, [r1, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	dc05      	bgt.n	800caf8 <__sflush_r+0x20>
 800caec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	dc02      	bgt.n	800caf8 <__sflush_r+0x20>
 800caf2:	2000      	movs	r0, #0
 800caf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cafa:	2e00      	cmp	r6, #0
 800cafc:	d0f9      	beq.n	800caf2 <__sflush_r+0x1a>
 800cafe:	2300      	movs	r3, #0
 800cb00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb04:	682f      	ldr	r7, [r5, #0]
 800cb06:	602b      	str	r3, [r5, #0]
 800cb08:	d032      	beq.n	800cb70 <__sflush_r+0x98>
 800cb0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	075a      	lsls	r2, r3, #29
 800cb10:	d505      	bpl.n	800cb1e <__sflush_r+0x46>
 800cb12:	6863      	ldr	r3, [r4, #4]
 800cb14:	1ac0      	subs	r0, r0, r3
 800cb16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb18:	b10b      	cbz	r3, 800cb1e <__sflush_r+0x46>
 800cb1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb1c:	1ac0      	subs	r0, r0, r3
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4602      	mov	r2, r0
 800cb22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb24:	6a21      	ldr	r1, [r4, #32]
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b0      	blx	r6
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	89a3      	ldrh	r3, [r4, #12]
 800cb2e:	d106      	bne.n	800cb3e <__sflush_r+0x66>
 800cb30:	6829      	ldr	r1, [r5, #0]
 800cb32:	291d      	cmp	r1, #29
 800cb34:	d82c      	bhi.n	800cb90 <__sflush_r+0xb8>
 800cb36:	4a2a      	ldr	r2, [pc, #168]	; (800cbe0 <__sflush_r+0x108>)
 800cb38:	40ca      	lsrs	r2, r1
 800cb3a:	07d6      	lsls	r6, r2, #31
 800cb3c:	d528      	bpl.n	800cb90 <__sflush_r+0xb8>
 800cb3e:	2200      	movs	r2, #0
 800cb40:	6062      	str	r2, [r4, #4]
 800cb42:	04d9      	lsls	r1, r3, #19
 800cb44:	6922      	ldr	r2, [r4, #16]
 800cb46:	6022      	str	r2, [r4, #0]
 800cb48:	d504      	bpl.n	800cb54 <__sflush_r+0x7c>
 800cb4a:	1c42      	adds	r2, r0, #1
 800cb4c:	d101      	bne.n	800cb52 <__sflush_r+0x7a>
 800cb4e:	682b      	ldr	r3, [r5, #0]
 800cb50:	b903      	cbnz	r3, 800cb54 <__sflush_r+0x7c>
 800cb52:	6560      	str	r0, [r4, #84]	; 0x54
 800cb54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb56:	602f      	str	r7, [r5, #0]
 800cb58:	2900      	cmp	r1, #0
 800cb5a:	d0ca      	beq.n	800caf2 <__sflush_r+0x1a>
 800cb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb60:	4299      	cmp	r1, r3
 800cb62:	d002      	beq.n	800cb6a <__sflush_r+0x92>
 800cb64:	4628      	mov	r0, r5
 800cb66:	f7ff fa8f 	bl	800c088 <_free_r>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb6e:	e7c1      	b.n	800caf4 <__sflush_r+0x1c>
 800cb70:	6a21      	ldr	r1, [r4, #32]
 800cb72:	2301      	movs	r3, #1
 800cb74:	4628      	mov	r0, r5
 800cb76:	47b0      	blx	r6
 800cb78:	1c41      	adds	r1, r0, #1
 800cb7a:	d1c7      	bne.n	800cb0c <__sflush_r+0x34>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d0c4      	beq.n	800cb0c <__sflush_r+0x34>
 800cb82:	2b1d      	cmp	r3, #29
 800cb84:	d001      	beq.n	800cb8a <__sflush_r+0xb2>
 800cb86:	2b16      	cmp	r3, #22
 800cb88:	d101      	bne.n	800cb8e <__sflush_r+0xb6>
 800cb8a:	602f      	str	r7, [r5, #0]
 800cb8c:	e7b1      	b.n	800caf2 <__sflush_r+0x1a>
 800cb8e:	89a3      	ldrh	r3, [r4, #12]
 800cb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb94:	81a3      	strh	r3, [r4, #12]
 800cb96:	e7ad      	b.n	800caf4 <__sflush_r+0x1c>
 800cb98:	690f      	ldr	r7, [r1, #16]
 800cb9a:	2f00      	cmp	r7, #0
 800cb9c:	d0a9      	beq.n	800caf2 <__sflush_r+0x1a>
 800cb9e:	0793      	lsls	r3, r2, #30
 800cba0:	680e      	ldr	r6, [r1, #0]
 800cba2:	bf08      	it	eq
 800cba4:	694b      	ldreq	r3, [r1, #20]
 800cba6:	600f      	str	r7, [r1, #0]
 800cba8:	bf18      	it	ne
 800cbaa:	2300      	movne	r3, #0
 800cbac:	eba6 0807 	sub.w	r8, r6, r7
 800cbb0:	608b      	str	r3, [r1, #8]
 800cbb2:	f1b8 0f00 	cmp.w	r8, #0
 800cbb6:	dd9c      	ble.n	800caf2 <__sflush_r+0x1a>
 800cbb8:	6a21      	ldr	r1, [r4, #32]
 800cbba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbbc:	4643      	mov	r3, r8
 800cbbe:	463a      	mov	r2, r7
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	47b0      	blx	r6
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	dc06      	bgt.n	800cbd6 <__sflush_r+0xfe>
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbce:	81a3      	strh	r3, [r4, #12]
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	e78e      	b.n	800caf4 <__sflush_r+0x1c>
 800cbd6:	4407      	add	r7, r0
 800cbd8:	eba8 0800 	sub.w	r8, r8, r0
 800cbdc:	e7e9      	b.n	800cbb2 <__sflush_r+0xda>
 800cbde:	bf00      	nop
 800cbe0:	20400001 	.word	0x20400001

0800cbe4 <_fflush_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	690b      	ldr	r3, [r1, #16]
 800cbe8:	4605      	mov	r5, r0
 800cbea:	460c      	mov	r4, r1
 800cbec:	b913      	cbnz	r3, 800cbf4 <_fflush_r+0x10>
 800cbee:	2500      	movs	r5, #0
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	bd38      	pop	{r3, r4, r5, pc}
 800cbf4:	b118      	cbz	r0, 800cbfe <_fflush_r+0x1a>
 800cbf6:	6983      	ldr	r3, [r0, #24]
 800cbf8:	b90b      	cbnz	r3, 800cbfe <_fflush_r+0x1a>
 800cbfa:	f000 f887 	bl	800cd0c <__sinit>
 800cbfe:	4b14      	ldr	r3, [pc, #80]	; (800cc50 <_fflush_r+0x6c>)
 800cc00:	429c      	cmp	r4, r3
 800cc02:	d11b      	bne.n	800cc3c <_fflush_r+0x58>
 800cc04:	686c      	ldr	r4, [r5, #4]
 800cc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0ef      	beq.n	800cbee <_fflush_r+0xa>
 800cc0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc10:	07d0      	lsls	r0, r2, #31
 800cc12:	d404      	bmi.n	800cc1e <_fflush_r+0x3a>
 800cc14:	0599      	lsls	r1, r3, #22
 800cc16:	d402      	bmi.n	800cc1e <_fflush_r+0x3a>
 800cc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc1a:	f000 f915 	bl	800ce48 <__retarget_lock_acquire_recursive>
 800cc1e:	4628      	mov	r0, r5
 800cc20:	4621      	mov	r1, r4
 800cc22:	f7ff ff59 	bl	800cad8 <__sflush_r>
 800cc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc28:	07da      	lsls	r2, r3, #31
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	d4e0      	bmi.n	800cbf0 <_fflush_r+0xc>
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	059b      	lsls	r3, r3, #22
 800cc32:	d4dd      	bmi.n	800cbf0 <_fflush_r+0xc>
 800cc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc36:	f000 f908 	bl	800ce4a <__retarget_lock_release_recursive>
 800cc3a:	e7d9      	b.n	800cbf0 <_fflush_r+0xc>
 800cc3c:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <_fflush_r+0x70>)
 800cc3e:	429c      	cmp	r4, r3
 800cc40:	d101      	bne.n	800cc46 <_fflush_r+0x62>
 800cc42:	68ac      	ldr	r4, [r5, #8]
 800cc44:	e7df      	b.n	800cc06 <_fflush_r+0x22>
 800cc46:	4b04      	ldr	r3, [pc, #16]	; (800cc58 <_fflush_r+0x74>)
 800cc48:	429c      	cmp	r4, r3
 800cc4a:	bf08      	it	eq
 800cc4c:	68ec      	ldreq	r4, [r5, #12]
 800cc4e:	e7da      	b.n	800cc06 <_fflush_r+0x22>
 800cc50:	0800d7b4 	.word	0x0800d7b4
 800cc54:	0800d7d4 	.word	0x0800d7d4
 800cc58:	0800d794 	.word	0x0800d794

0800cc5c <std>:
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	4604      	mov	r4, r0
 800cc62:	e9c0 3300 	strd	r3, r3, [r0]
 800cc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc6a:	6083      	str	r3, [r0, #8]
 800cc6c:	8181      	strh	r1, [r0, #12]
 800cc6e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc70:	81c2      	strh	r2, [r0, #14]
 800cc72:	6183      	str	r3, [r0, #24]
 800cc74:	4619      	mov	r1, r3
 800cc76:	2208      	movs	r2, #8
 800cc78:	305c      	adds	r0, #92	; 0x5c
 800cc7a:	f7fb fe89 	bl	8008990 <memset>
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <std+0x38>)
 800cc80:	6263      	str	r3, [r4, #36]	; 0x24
 800cc82:	4b05      	ldr	r3, [pc, #20]	; (800cc98 <std+0x3c>)
 800cc84:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <std+0x40>)
 800cc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc8a:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <std+0x44>)
 800cc8c:	6224      	str	r4, [r4, #32]
 800cc8e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	bf00      	nop
 800cc94:	0800cfb1 	.word	0x0800cfb1
 800cc98:	0800cfd3 	.word	0x0800cfd3
 800cc9c:	0800d00b 	.word	0x0800d00b
 800cca0:	0800d02f 	.word	0x0800d02f

0800cca4 <_cleanup_r>:
 800cca4:	4901      	ldr	r1, [pc, #4]	; (800ccac <_cleanup_r+0x8>)
 800cca6:	f000 b8af 	b.w	800ce08 <_fwalk_reent>
 800ccaa:	bf00      	nop
 800ccac:	0800cbe5 	.word	0x0800cbe5

0800ccb0 <__sfmoreglue>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	2268      	movs	r2, #104	; 0x68
 800ccb4:	1e4d      	subs	r5, r1, #1
 800ccb6:	4355      	muls	r5, r2
 800ccb8:	460e      	mov	r6, r1
 800ccba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccbe:	f7ff fa4f 	bl	800c160 <_malloc_r>
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	b140      	cbz	r0, 800ccd8 <__sfmoreglue+0x28>
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	e9c0 1600 	strd	r1, r6, [r0]
 800cccc:	300c      	adds	r0, #12
 800ccce:	60a0      	str	r0, [r4, #8]
 800ccd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccd4:	f7fb fe5c 	bl	8008990 <memset>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	bd70      	pop	{r4, r5, r6, pc}

0800ccdc <__sfp_lock_acquire>:
 800ccdc:	4801      	ldr	r0, [pc, #4]	; (800cce4 <__sfp_lock_acquire+0x8>)
 800ccde:	f000 b8b3 	b.w	800ce48 <__retarget_lock_acquire_recursive>
 800cce2:	bf00      	nop
 800cce4:	24006465 	.word	0x24006465

0800cce8 <__sfp_lock_release>:
 800cce8:	4801      	ldr	r0, [pc, #4]	; (800ccf0 <__sfp_lock_release+0x8>)
 800ccea:	f000 b8ae 	b.w	800ce4a <__retarget_lock_release_recursive>
 800ccee:	bf00      	nop
 800ccf0:	24006465 	.word	0x24006465

0800ccf4 <__sinit_lock_acquire>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__sinit_lock_acquire+0x8>)
 800ccf6:	f000 b8a7 	b.w	800ce48 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	24006466 	.word	0x24006466

0800cd00 <__sinit_lock_release>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__sinit_lock_release+0x8>)
 800cd02:	f000 b8a2 	b.w	800ce4a <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	24006466 	.word	0x24006466

0800cd0c <__sinit>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4604      	mov	r4, r0
 800cd10:	f7ff fff0 	bl	800ccf4 <__sinit_lock_acquire>
 800cd14:	69a3      	ldr	r3, [r4, #24]
 800cd16:	b11b      	cbz	r3, 800cd20 <__sinit+0x14>
 800cd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd1c:	f7ff bff0 	b.w	800cd00 <__sinit_lock_release>
 800cd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd24:	6523      	str	r3, [r4, #80]	; 0x50
 800cd26:	4b13      	ldr	r3, [pc, #76]	; (800cd74 <__sinit+0x68>)
 800cd28:	4a13      	ldr	r2, [pc, #76]	; (800cd78 <__sinit+0x6c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	bf04      	itt	eq
 800cd32:	2301      	moveq	r3, #1
 800cd34:	61a3      	streq	r3, [r4, #24]
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 f820 	bl	800cd7c <__sfp>
 800cd3c:	6060      	str	r0, [r4, #4]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 f81c 	bl	800cd7c <__sfp>
 800cd44:	60a0      	str	r0, [r4, #8]
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 f818 	bl	800cd7c <__sfp>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	60e0      	str	r0, [r4, #12]
 800cd50:	2104      	movs	r1, #4
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	f7ff ff82 	bl	800cc5c <std>
 800cd58:	68a0      	ldr	r0, [r4, #8]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	2109      	movs	r1, #9
 800cd5e:	f7ff ff7d 	bl	800cc5c <std>
 800cd62:	68e0      	ldr	r0, [r4, #12]
 800cd64:	2202      	movs	r2, #2
 800cd66:	2112      	movs	r1, #18
 800cd68:	f7ff ff78 	bl	800cc5c <std>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	61a3      	str	r3, [r4, #24]
 800cd70:	e7d2      	b.n	800cd18 <__sinit+0xc>
 800cd72:	bf00      	nop
 800cd74:	0800d350 	.word	0x0800d350
 800cd78:	0800cca5 	.word	0x0800cca5

0800cd7c <__sfp>:
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	4607      	mov	r7, r0
 800cd80:	f7ff ffac 	bl	800ccdc <__sfp_lock_acquire>
 800cd84:	4b1e      	ldr	r3, [pc, #120]	; (800ce00 <__sfp+0x84>)
 800cd86:	681e      	ldr	r6, [r3, #0]
 800cd88:	69b3      	ldr	r3, [r6, #24]
 800cd8a:	b913      	cbnz	r3, 800cd92 <__sfp+0x16>
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7ff ffbd 	bl	800cd0c <__sinit>
 800cd92:	3648      	adds	r6, #72	; 0x48
 800cd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	d503      	bpl.n	800cda4 <__sfp+0x28>
 800cd9c:	6833      	ldr	r3, [r6, #0]
 800cd9e:	b30b      	cbz	r3, 800cde4 <__sfp+0x68>
 800cda0:	6836      	ldr	r6, [r6, #0]
 800cda2:	e7f7      	b.n	800cd94 <__sfp+0x18>
 800cda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cda8:	b9d5      	cbnz	r5, 800cde0 <__sfp+0x64>
 800cdaa:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <__sfp+0x88>)
 800cdac:	60e3      	str	r3, [r4, #12]
 800cdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdb2:	6665      	str	r5, [r4, #100]	; 0x64
 800cdb4:	f000 f847 	bl	800ce46 <__retarget_lock_init_recursive>
 800cdb8:	f7ff ff96 	bl	800cce8 <__sfp_lock_release>
 800cdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdc4:	6025      	str	r5, [r4, #0]
 800cdc6:	61a5      	str	r5, [r4, #24]
 800cdc8:	2208      	movs	r2, #8
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdd0:	f7fb fdde 	bl	8008990 <memset>
 800cdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cddc:	4620      	mov	r0, r4
 800cdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde0:	3468      	adds	r4, #104	; 0x68
 800cde2:	e7d9      	b.n	800cd98 <__sfp+0x1c>
 800cde4:	2104      	movs	r1, #4
 800cde6:	4638      	mov	r0, r7
 800cde8:	f7ff ff62 	bl	800ccb0 <__sfmoreglue>
 800cdec:	4604      	mov	r4, r0
 800cdee:	6030      	str	r0, [r6, #0]
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1d5      	bne.n	800cda0 <__sfp+0x24>
 800cdf4:	f7ff ff78 	bl	800cce8 <__sfp_lock_release>
 800cdf8:	230c      	movs	r3, #12
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	e7ee      	b.n	800cddc <__sfp+0x60>
 800cdfe:	bf00      	nop
 800ce00:	0800d350 	.word	0x0800d350
 800ce04:	ffff0001 	.word	0xffff0001

0800ce08 <_fwalk_reent>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	4688      	mov	r8, r1
 800ce10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce14:	2700      	movs	r7, #0
 800ce16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce1e:	d505      	bpl.n	800ce2c <_fwalk_reent+0x24>
 800ce20:	6824      	ldr	r4, [r4, #0]
 800ce22:	2c00      	cmp	r4, #0
 800ce24:	d1f7      	bne.n	800ce16 <_fwalk_reent+0xe>
 800ce26:	4638      	mov	r0, r7
 800ce28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2c:	89ab      	ldrh	r3, [r5, #12]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d907      	bls.n	800ce42 <_fwalk_reent+0x3a>
 800ce32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce36:	3301      	adds	r3, #1
 800ce38:	d003      	beq.n	800ce42 <_fwalk_reent+0x3a>
 800ce3a:	4629      	mov	r1, r5
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	47c0      	blx	r8
 800ce40:	4307      	orrs	r7, r0
 800ce42:	3568      	adds	r5, #104	; 0x68
 800ce44:	e7e9      	b.n	800ce1a <_fwalk_reent+0x12>

0800ce46 <__retarget_lock_init_recursive>:
 800ce46:	4770      	bx	lr

0800ce48 <__retarget_lock_acquire_recursive>:
 800ce48:	4770      	bx	lr

0800ce4a <__retarget_lock_release_recursive>:
 800ce4a:	4770      	bx	lr

0800ce4c <__swhatbuf_r>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	460e      	mov	r6, r1
 800ce50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce54:	2900      	cmp	r1, #0
 800ce56:	b096      	sub	sp, #88	; 0x58
 800ce58:	4614      	mov	r4, r2
 800ce5a:	461d      	mov	r5, r3
 800ce5c:	da08      	bge.n	800ce70 <__swhatbuf_r+0x24>
 800ce5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	602a      	str	r2, [r5, #0]
 800ce66:	061a      	lsls	r2, r3, #24
 800ce68:	d410      	bmi.n	800ce8c <__swhatbuf_r+0x40>
 800ce6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce6e:	e00e      	b.n	800ce8e <__swhatbuf_r+0x42>
 800ce70:	466a      	mov	r2, sp
 800ce72:	f000 f903 	bl	800d07c <_fstat_r>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	dbf1      	blt.n	800ce5e <__swhatbuf_r+0x12>
 800ce7a:	9a01      	ldr	r2, [sp, #4]
 800ce7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce84:	425a      	negs	r2, r3
 800ce86:	415a      	adcs	r2, r3
 800ce88:	602a      	str	r2, [r5, #0]
 800ce8a:	e7ee      	b.n	800ce6a <__swhatbuf_r+0x1e>
 800ce8c:	2340      	movs	r3, #64	; 0x40
 800ce8e:	2000      	movs	r0, #0
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	b016      	add	sp, #88	; 0x58
 800ce94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce98 <__smakebuf_r>:
 800ce98:	898b      	ldrh	r3, [r1, #12]
 800ce9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce9c:	079d      	lsls	r5, r3, #30
 800ce9e:	4606      	mov	r6, r0
 800cea0:	460c      	mov	r4, r1
 800cea2:	d507      	bpl.n	800ceb4 <__smakebuf_r+0x1c>
 800cea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cea8:	6023      	str	r3, [r4, #0]
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	2301      	movs	r3, #1
 800ceae:	6163      	str	r3, [r4, #20]
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd70      	pop	{r4, r5, r6, pc}
 800ceb4:	ab01      	add	r3, sp, #4
 800ceb6:	466a      	mov	r2, sp
 800ceb8:	f7ff ffc8 	bl	800ce4c <__swhatbuf_r>
 800cebc:	9900      	ldr	r1, [sp, #0]
 800cebe:	4605      	mov	r5, r0
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7ff f94d 	bl	800c160 <_malloc_r>
 800cec6:	b948      	cbnz	r0, 800cedc <__smakebuf_r+0x44>
 800cec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cecc:	059a      	lsls	r2, r3, #22
 800cece:	d4ef      	bmi.n	800ceb0 <__smakebuf_r+0x18>
 800ced0:	f023 0303 	bic.w	r3, r3, #3
 800ced4:	f043 0302 	orr.w	r3, r3, #2
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	e7e3      	b.n	800cea4 <__smakebuf_r+0xc>
 800cedc:	4b0d      	ldr	r3, [pc, #52]	; (800cf14 <__smakebuf_r+0x7c>)
 800cede:	62b3      	str	r3, [r6, #40]	; 0x28
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	6020      	str	r0, [r4, #0]
 800cee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee8:	81a3      	strh	r3, [r4, #12]
 800ceea:	9b00      	ldr	r3, [sp, #0]
 800ceec:	6163      	str	r3, [r4, #20]
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	6120      	str	r0, [r4, #16]
 800cef2:	b15b      	cbz	r3, 800cf0c <__smakebuf_r+0x74>
 800cef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cef8:	4630      	mov	r0, r6
 800cefa:	f000 f8d1 	bl	800d0a0 <_isatty_r>
 800cefe:	b128      	cbz	r0, 800cf0c <__smakebuf_r+0x74>
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	f043 0301 	orr.w	r3, r3, #1
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	89a0      	ldrh	r0, [r4, #12]
 800cf0e:	4305      	orrs	r5, r0
 800cf10:	81a5      	strh	r5, [r4, #12]
 800cf12:	e7cd      	b.n	800ceb0 <__smakebuf_r+0x18>
 800cf14:	0800cca5 	.word	0x0800cca5

0800cf18 <_malloc_usable_size_r>:
 800cf18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf1c:	1f18      	subs	r0, r3, #4
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	bfbc      	itt	lt
 800cf22:	580b      	ldrlt	r3, [r1, r0]
 800cf24:	18c0      	addlt	r0, r0, r3
 800cf26:	4770      	bx	lr

0800cf28 <_raise_r>:
 800cf28:	291f      	cmp	r1, #31
 800cf2a:	b538      	push	{r3, r4, r5, lr}
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	460d      	mov	r5, r1
 800cf30:	d904      	bls.n	800cf3c <_raise_r+0x14>
 800cf32:	2316      	movs	r3, #22
 800cf34:	6003      	str	r3, [r0, #0]
 800cf36:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf3e:	b112      	cbz	r2, 800cf46 <_raise_r+0x1e>
 800cf40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf44:	b94b      	cbnz	r3, 800cf5a <_raise_r+0x32>
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 f830 	bl	800cfac <_getpid_r>
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4601      	mov	r1, r0
 800cf50:	4620      	mov	r0, r4
 800cf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf56:	f000 b817 	b.w	800cf88 <_kill_r>
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d00a      	beq.n	800cf74 <_raise_r+0x4c>
 800cf5e:	1c59      	adds	r1, r3, #1
 800cf60:	d103      	bne.n	800cf6a <_raise_r+0x42>
 800cf62:	2316      	movs	r3, #22
 800cf64:	6003      	str	r3, [r0, #0]
 800cf66:	2001      	movs	r0, #1
 800cf68:	e7e7      	b.n	800cf3a <_raise_r+0x12>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf70:	4628      	mov	r0, r5
 800cf72:	4798      	blx	r3
 800cf74:	2000      	movs	r0, #0
 800cf76:	e7e0      	b.n	800cf3a <_raise_r+0x12>

0800cf78 <raise>:
 800cf78:	4b02      	ldr	r3, [pc, #8]	; (800cf84 <raise+0xc>)
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	6818      	ldr	r0, [r3, #0]
 800cf7e:	f7ff bfd3 	b.w	800cf28 <_raise_r>
 800cf82:	bf00      	nop
 800cf84:	24000010 	.word	0x24000010

0800cf88 <_kill_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4d07      	ldr	r5, [pc, #28]	; (800cfa8 <_kill_r+0x20>)
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	4611      	mov	r1, r2
 800cf94:	602b      	str	r3, [r5, #0]
 800cf96:	f7f4 fc85 	bl	80018a4 <_kill>
 800cf9a:	1c43      	adds	r3, r0, #1
 800cf9c:	d102      	bne.n	800cfa4 <_kill_r+0x1c>
 800cf9e:	682b      	ldr	r3, [r5, #0]
 800cfa0:	b103      	cbz	r3, 800cfa4 <_kill_r+0x1c>
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	bd38      	pop	{r3, r4, r5, pc}
 800cfa6:	bf00      	nop
 800cfa8:	24006460 	.word	0x24006460

0800cfac <_getpid_r>:
 800cfac:	f7f4 bc72 	b.w	8001894 <_getpid>

0800cfb0 <__sread>:
 800cfb0:	b510      	push	{r4, lr}
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	f000 f894 	bl	800d0e4 <_read_r>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	bfab      	itete	ge
 800cfc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800cfc4:	181b      	addge	r3, r3, r0
 800cfc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfca:	bfac      	ite	ge
 800cfcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfce:	81a3      	strhlt	r3, [r4, #12]
 800cfd0:	bd10      	pop	{r4, pc}

0800cfd2 <__swrite>:
 800cfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	461f      	mov	r7, r3
 800cfd8:	898b      	ldrh	r3, [r1, #12]
 800cfda:	05db      	lsls	r3, r3, #23
 800cfdc:	4605      	mov	r5, r0
 800cfde:	460c      	mov	r4, r1
 800cfe0:	4616      	mov	r6, r2
 800cfe2:	d505      	bpl.n	800cff0 <__swrite+0x1e>
 800cfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe8:	2302      	movs	r3, #2
 800cfea:	2200      	movs	r2, #0
 800cfec:	f000 f868 	bl	800d0c0 <_lseek_r>
 800cff0:	89a3      	ldrh	r3, [r4, #12]
 800cff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cffa:	81a3      	strh	r3, [r4, #12]
 800cffc:	4632      	mov	r2, r6
 800cffe:	463b      	mov	r3, r7
 800d000:	4628      	mov	r0, r5
 800d002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d006:	f000 b817 	b.w	800d038 <_write_r>

0800d00a <__sseek>:
 800d00a:	b510      	push	{r4, lr}
 800d00c:	460c      	mov	r4, r1
 800d00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d012:	f000 f855 	bl	800d0c0 <_lseek_r>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	bf15      	itete	ne
 800d01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d026:	81a3      	strheq	r3, [r4, #12]
 800d028:	bf18      	it	ne
 800d02a:	81a3      	strhne	r3, [r4, #12]
 800d02c:	bd10      	pop	{r4, pc}

0800d02e <__sclose>:
 800d02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d032:	f000 b813 	b.w	800d05c <_close_r>
	...

0800d038 <_write_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4d07      	ldr	r5, [pc, #28]	; (800d058 <_write_r+0x20>)
 800d03c:	4604      	mov	r4, r0
 800d03e:	4608      	mov	r0, r1
 800d040:	4611      	mov	r1, r2
 800d042:	2200      	movs	r2, #0
 800d044:	602a      	str	r2, [r5, #0]
 800d046:	461a      	mov	r2, r3
 800d048:	f7f4 fc63 	bl	8001912 <_write>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d102      	bne.n	800d056 <_write_r+0x1e>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	b103      	cbz	r3, 800d056 <_write_r+0x1e>
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	24006460 	.word	0x24006460

0800d05c <_close_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d06      	ldr	r5, [pc, #24]	; (800d078 <_close_r+0x1c>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	602b      	str	r3, [r5, #0]
 800d068:	f7f4 fc6f 	bl	800194a <_close>
 800d06c:	1c43      	adds	r3, r0, #1
 800d06e:	d102      	bne.n	800d076 <_close_r+0x1a>
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	b103      	cbz	r3, 800d076 <_close_r+0x1a>
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	bd38      	pop	{r3, r4, r5, pc}
 800d078:	24006460 	.word	0x24006460

0800d07c <_fstat_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d07      	ldr	r5, [pc, #28]	; (800d09c <_fstat_r+0x20>)
 800d080:	2300      	movs	r3, #0
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	602b      	str	r3, [r5, #0]
 800d08a:	f7f4 fc6a 	bl	8001962 <_fstat>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	d102      	bne.n	800d098 <_fstat_r+0x1c>
 800d092:	682b      	ldr	r3, [r5, #0]
 800d094:	b103      	cbz	r3, 800d098 <_fstat_r+0x1c>
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	bd38      	pop	{r3, r4, r5, pc}
 800d09a:	bf00      	nop
 800d09c:	24006460 	.word	0x24006460

0800d0a0 <_isatty_r>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	4d06      	ldr	r5, [pc, #24]	; (800d0bc <_isatty_r+0x1c>)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	602b      	str	r3, [r5, #0]
 800d0ac:	f7f4 fc69 	bl	8001982 <_isatty>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_isatty_r+0x1a>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_isatty_r+0x1a>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	24006460 	.word	0x24006460

0800d0c0 <_lseek_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	; (800d0e0 <_lseek_r+0x20>)
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	4608      	mov	r0, r1
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	602a      	str	r2, [r5, #0]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f7f4 fc62 	bl	8001998 <_lseek>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	d102      	bne.n	800d0de <_lseek_r+0x1e>
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	b103      	cbz	r3, 800d0de <_lseek_r+0x1e>
 800d0dc:	6023      	str	r3, [r4, #0]
 800d0de:	bd38      	pop	{r3, r4, r5, pc}
 800d0e0:	24006460 	.word	0x24006460

0800d0e4 <_read_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d07      	ldr	r5, [pc, #28]	; (800d104 <_read_r+0x20>)
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	4608      	mov	r0, r1
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	602a      	str	r2, [r5, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	f7f4 fbf0 	bl	80018d8 <_read>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_read_r+0x1e>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_read_r+0x1e>
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	24006460 	.word	0x24006460

0800d108 <_init>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr

0800d114 <_fini>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	bf00      	nop
 800d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11a:	bc08      	pop	{r3}
 800d11c:	469e      	mov	lr, r3
 800d11e:	4770      	bx	lr
